"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9450],{6029:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"posts-writing-by-notes","metadata":{"permalink":"/posts-writing-by-notes","source":"@site/blog/2022-09-12-card-notes-writing.md","title":"\u5361\u7247\u7b14\u8bb0\u5199\u4f5c\u6cd5 - \u8bfb\u4e66\u7b14\u8bb0","description":"\u4e4d\u770b\u4e66\u540d\u4ee5\u4e3a\u662f\u5173\u4e8e\u5982\u4f55\u505a\u7b14\u8bb0\u7684\u5de5\u5177\u4e66\uff0c\u540e\u9762\u53d1\u73b0\u91cd\u70b9\u662f\u8bb2\u5199\u4f5c\u601d\u7ef4\u65b9\u5f0f\uff0c\u6574\u4f53\u5185\u5bb9\u4e0a\u6bd4\u770b\u4e4b\u524d\u7684\u9884\u671f\u597d\u5f88\u591a\u3002\u5361\u7247\u76d2\u5199\u4f5c\u6cd5\u662f\u5362\u66fc\u6770\u51fa\u5b66\u672f\u6210\u5c31\u7684\u751f\u4ea7\u529b\u6765\u6e90\uff0c\u4ed6\u5728\u957f\u8fbe 30 \u591a\u5e74\u7684\u7814\u7a76\u4e2d\u51fa\u7248\u4e86 58 \u672c\u8457\u4f5c\u4ee5\u53ca\u6570\u767e\u7bc7\u6587\u7ae0\u3002\u4e66\u4e2d\u4e3b\u8981\u662f\u8bba\u8ff0\u5982\u4f55\u901a\u8fc7\u5361\u7247\u7b14\u8bb0\u7684\u65b9\u6cd5\u8fdb\u884c\u5199\u4f5c\uff0c\u4e5f\u987a\u4fbf\u89e3\u7b54\u4e86\u6211\u7684\u51e0\u4e2a\u95ee\u9898:","date":"2022-09-12T00:00:00.000Z","formattedDate":"September 12, 2022","tags":[{"label":"\u8bfb\u4e66","permalink":"/tags/\u8bfb\u4e66"}],"readingTime":8.73,"truncated":true,"authors":[{"name":"hulk"}],"frontMatter":{"author":"hulk","slug":"posts-writing-by-notes","title":"\u5361\u7247\u7b14\u8bb0\u5199\u4f5c\u6cd5 - \u8bfb\u4e66\u7b14\u8bb0","tags":["\u8bfb\u4e66"]},"nextItem":{"title":"Monitoring Go apps with Distributed Tracing and OpenTelemetry","permalink":"/monitoring-go-apps-with-distributed-tracing-and-opentelemetry"}},"content":"\u4e4d\u770b\u4e66\u540d\u4ee5\u4e3a\u662f\u5173\u4e8e\u5982\u4f55\u505a\u7b14\u8bb0\u7684\u5de5\u5177\u4e66\uff0c\u540e\u9762\u53d1\u73b0\u91cd\u70b9\u662f\u8bb2\u5199\u4f5c\u601d\u7ef4\u65b9\u5f0f\uff0c\u6574\u4f53\u5185\u5bb9\u4e0a\u6bd4\u770b\u4e4b\u524d\u7684\u9884\u671f\u597d\u5f88\u591a\u3002\u5361\u7247\u76d2\u5199\u4f5c\u6cd5\u662f\u5362\u66fc\u6770\u51fa\u5b66\u672f\u6210\u5c31\u7684\u751f\u4ea7\u529b\u6765\u6e90\uff0c\u4ed6\u5728\u957f\u8fbe 30 \u591a\u5e74\u7684\u7814\u7a76\u4e2d\u51fa\u7248\u4e86 58 \u672c\u8457\u4f5c\u4ee5\u53ca\u6570\u767e\u7bc7\u6587\u7ae0\u3002\u4e66\u4e2d\u4e3b\u8981\u662f\u8bba\u8ff0\u5982\u4f55\u901a\u8fc7\u5361\u7247\u7b14\u8bb0\u7684\u65b9\u6cd5\u8fdb\u884c\u5199\u4f5c\uff0c\u4e5f\u987a\u4fbf\u89e3\u7b54\u4e86\u6211\u7684\u51e0\u4e2a\u95ee\u9898:\\n\\n\x3c!--truncate--\x3e\\n* \u4e3a\u4ec0\u4e48\u65e0\u6cd5\u8bb0\u4f4f\u9605\u8bfb\u540e\u7684\u5927\u90e8\u5206\u5185\u5bb9\uff0c\u9694\u4e00\u6bb5\u65f6\u95f4\u8fd8\u662f\u4f1a\u5728\u540c\u4e00\u4e2a\u5730\u65b9\u88ab\u53cd\u590d\u918d\u9190\u704c\u9876\uff1f\u4e3b\u8981\u662f\u4eba\u8111\u7684\u5bb9\u91cf\u6709\u9650\uff0c\u53ea\u4f1a\u6682\u5b58\u77ed\u671f\u5185\u8ba4\u4e3a\u6700\u91cd\u8981\u7684\u4e8b\u60c5(\u8521\u683c\u5c3c\u514b\u6548\u5e94)\uff0c\u4e0d\u501f\u52a9\u5916\u90e8\u5b58\u50a8\u5f88\u5feb\u4f1a\u4e22\u5931\u3002\u524d\u51e0\u5929\u521a\u597d\u4e5f\u770b\u5230\u827e\u5bbe\u6d69\u65af\u9057\u5fd8\u66f2\u7ebf\u4e5f\u8bc1\u5b9e\u77e5\u8bc6\u9057\u5fd8\u662f\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u7684\u666e\u904d\u73b0\u8c61\uff0c\u53ef\u4ee5\u901a\u8fc7\u79d1\u5b66\u590d\u4e60\u65b9\u6cd5\u6765\u51cf\u5c11\u9057\u5fd8\u6bd4\u4f8b\u3002\\n* \u4e3a\u4ec0\u4e48\u5199\u4f5c\u8fd9\u4e48\u96be\uff1f\u4e3a\u4ec0\u4e48\u4f1a\u9677\u5165\u4e00\u76f4\u60f3\u5199\u4f46\u65e0\u4ece\u4e0b\u624b\u7684\u5faa\u73af\uff1f\u4e66\u4e2d\u7684\u63d0\u5230\u5f88\u91cd\u8981\u7684\u89c2\u70b9\uff1a**\u5199\u4f5c\u4e0d\u5e94\u8be5\u4ece\u7a7a\u767d\u5c4f\u5e55\u5f00\u59cb\uff0c\u800c\u662f\u9700\u8981\u4ece\u9605\u8bfb\u4e2d\u523b\u610f\u79ef\u7d2f\u89c2\u70b9\u548c\u8bba\u636e\uff0c\u5c06\u5199\u4f5c\u8fc7\u7a0b\u53d8\u6210\u81ea\u4e0b\u800c\u4e0a\u7684\u8fc7\u7a0b\u3002**\u4e00\u76f4\u5c06\u4e0d\u77e5\u9053\u5199\u4ec0\u4e48\u5f52\u56e0\u4e3a\u7f3a\u5c11\u8db3\u591f\u7684\u8f93\u5165\uff0c\u867d\u7136\u8be5\u89c2\u70b9\u662f\u5bf9\u7684\u4f46\u53c8\u8fc7\u4e8e\u5bbd\u6cdb\u3002\u73b0\u5728\u6211\u4f1a\u7406\u89e3\u4e3a\u662f\u7f3a\u5c11\u523b\u610f\u7684\u8f93\u5165\u548c\u79ef\u7d2f\uff0c\u9009\u62e9\u67d0\u4e2a\u65b9\u5411\u4e4b\u540e\uff0c\u9700\u8981\u523b\u610f\u53bb\u6536\u96c6\u548c\u9605\u8bfb\u76f8\u5173\u65b9\u5411\u7684\u4fe1\u606f\uff0c\u6682\u4e14\u653e\u4e0b\u4e0d\u76f8\u5173\u7684\u8f93\u5165\u3002\\n* \u4e3a\u4ec0\u4e48\u6709\u7b14\u8bb0\u4f46\u4ecd\u7136\u5bf9\u77e5\u8bc6\u8bb0\u5fc6\u5e2e\u52a9\u4e0d\u5927\uff1f\u4e0d\u7ba1\u662f\u91cd\u70b9\u5212\u7ebf\u8fd8\u662f\u7a7a\u767d\u5904\u8bb0\u5f55\u60f3\u6cd5\uff0c\u8fc7\u7a0b\u4e2d\u7f3a\u5931\u4e86\u601d\u8003\u6216\u8005\u5173\u8054\uff0c\u6700\u7ec8\u4e5f\u53ea\u662f\u5f97\u5230\u4e00\u5806\u4e0d\u4f1a\u518d\u770b\u7684\u7b14\u8bb0\u3002\u4f5c\u8005\u63d0\u5230\u5362\u66fc\u7684\u5361\u7247\u7b14\u8bb0\u6700\u91cd\u8981\u7684\u662f\u5206\u7c7b\u3001\u5173\u8054\u4ee5\u53ca\u5b9a\u671f\u6574\u7406\uff0c\u4e22\u5f03\u6389\u4e34\u65f6\u6216\u8005\u8fc7\u671f\u7684\u89c2\u70b9\u3002\\n\\n\u8fd9\u672c\u4e66\u5bf9\u4e8e\u6211\u81ea\u5df1\u6700\u5927\u7684\u5e2e\u52a9\u5728\u4e8e\u9605\u8bfb\u601d\u7ef4\u7684\u53d8\u5316\uff0c \u4e5f\u4fc3\u4f7f\u6211\u5199\u4e0b\u4e86\u7b2c\u4e00\u7bc7\u8bfb\u4e66\u7b14\u8bb0\u3002\u5f53\u7136\uff0c\u80fd\u5426\u771f\u6b63\u5e26\u6765\u5199\u4f5c\u4e0a\u7684\u6539\u53d8\uff0c\u9700\u8981\u7559\u7ed9\u65f6\u95f4\u6765\u56de\u7b54\u3002\u6211\u5341\u5206\u559c\u6b22\u91cc\u9762\u5173\u4e8e\u8bfb\u4e66\u7684\u89c2\u70b9: **\u300c\u8bfb\u4e66\u4e0d\u662f\u4e3a\u4e86\u79ef\u7d2f\u77e5\u8bc6\u800c\u662f\u5f62\u6210\u81ea\u5df1\u7684\u601d\u7ef4\u6846\u67b6\uff0c\u5e76\u4f7f\u7528\u65b0\u89c2\u70b9\u548c\u4e8b\u5b9e\u5bf9\u8fc7\u5f80\u7684\u7ecf\u9a8c\u63d0\u51fa\u8d28\u7591\u300d**\u3002\u6211\u4eec\u4e0d\u662f\u590d\u8bfb\u673a\uff0c\u4e0d\u5fc5\u4e3a\u4e86\u53ef\u4ee5\u80cc\u51fa\u67d0\u4e2a\u540d\u4eba\u7684\u8bed\u53e5\u800c\u8bfb\u4e66\uff0c\u800c\u5e94\u8be5\u662f\u7eaf\u7cb9\u4e3a\u4e86\u5f62\u6210\u81ea\u5df1\u7684\u601d\u8003\u65b9\u5f0f\u3002\u5177\u5907\u81ea\u5df1\u7684\u601d\u8003\u548c\u8fa8\u522b\u80fd\u529b\uff0c\u800c\u4e0d\u662f\u53d7\u67d0\u79cd\u6743\u5a01\u6216\u8005\u8206\u8bba\u7684\u5f15\u5bfc\u3002\u4ee5\u4e0b\u662f\u4e2a\u4eba\u8ba4\u4e3a\u503c\u5f97\u5206\u4eab\u7684\u51e0\u4e2a\u89c2\u70b9\u3002\\n\\n\\n### \u5199\u4f5c\u5f88\u91cd\u8981\\n\\n\u4e66\u4e2d\u5f15\u7528\u5362\u66fc\u7684: **\u300c\u4e0d\u5199\uff0c\u5c31\u65e0\u6cd5\u601d\u8003\u300d** \u6765\u8bf4\u660e\u5199\u4f5c\u7684\u91cd\u8981\u6027\u3002\u5f88\u591a\u4eba\u90fd\u610f\u8bc6\u5230\u4e86\u5199\u4f5c\u8868\u8fbe\u7684\u91cd\u8981\u6027\uff0c\u4f46\u80fd\u591f\u575a\u6301\u8df5\u884c\u7684\u4eba\u5e76\u4e0d\u591a\u3002\u4e3b\u8981\u662f\u8fc7\u5f80\u6559\u6388\u7684\u5199\u4f5c\u65b9\u5f0f\u5305\u542b\u5f88\u591a\u5199\u4f5c\u6307\u5357\u4e66\u7c4d\u90fd\u662f\u81f3\u4e0a\u800c\u4e0b\uff0c\u4e60\u60ef\u4e8e\u56f4\u7ed5\u7740\u67d0\u4e2a\u4e3b\u9898\u5c55\u5f00\u8bba\u8ff0\uff0c\u7f3a\u5c11\u4e86\u6700\u5173\u952e\u7684\u8bba\u636e\u6536\u96c6\u4ee5\u53ca\u79ef\u7d2f\u7684\u8fc7\u7a0b\u3002\u4ee5\u81f3\u4e8e\u9700\u8981\u4ece\u5bb9\u91cf\u6709\u9650\u7684\u5927\u8111\u91cc\u641c\u7d22\u548c\u63d0\u53d6\u89c2\u70b9\uff0c\u5c06\u5199\u4f5c\u53d8\u6210\u75db\u82e6\u7684\u8111\u66b4\u8fc7\u7a0b\u3002\u800c\u5362\u66fc\u7684\u5361\u7247\u7b14\u8bb0\u5199\u4f5c\u6cd5\u6838\u5fc3\u5219\u662f\u76f8\u53cd\uff0c\u63d0\u51fa\u5199\u4f5c\u4e0d\u5e94\u8be5\u662f\u7a7a\u767d\u7eb8\u5f00\u59cb\uff0c\u800c\u662f\u901a\u8fc7\u5927\u91cf\u9605\u8bfb\u4ee5\u53ca\u79ef\u7d2f\u89c2\u70b9\u8fd9\u79cd\u81ea\u4e0b\u800c\u4e0a\u7684\u8fc7\u7a0b\u3002\u9047\u5230\u6709\u4ef7\u503c\u7684\u89c2\u70b9\uff0c\u7528\u81ea\u5df1\u7684\u8bed\u8a00\u5199\u4e0b\u6765\u601d\u8003\uff0c\u5199\u4f5c\u65f6\u53ea\u9700\u5c06\u8fd9\u4e9b\u8fc7\u5f80\u7684\u89c2\u70b9\u805a\u5408\u5230\u4e00\u8d77\u3002\u53cd\u8fc7\u6765\uff0c\u8981\u60f3\u8981\u8ba8\u8bba\u67d0\u4e2a\u8bdd\u9898\uff0c\u91cd\u8981\u7684\u662f\u6536\u96c6\u76f8\u5173\u6750\u6599\u8fdb\u884c\u9605\u8bfb\u548c\u601d\u8003\uff0c\u800c\u4e0d\u662f\u5199\u4f5c\u7684\u8fc7\u7a0b\u6216\u8005\u5de5\u5177\u3002\u53e6\u5916\uff0c\u4e66\u4e2d\u4e3e\u4e86\u5f88\u591a\u6b21\u8d39\u66fc\u7684\u4f8b\u5b50\u6765\u5f3a\u8c03\u5173\u8054\u7684\u91cd\u8981\u6027\uff0c\u96f6\u6563\u7684\u77e5\u8bc6\u70b9\u5f88\u96be\u8bb0\u4f4f\uff0c\u800c\u5173\u8054\u4e4b\u540e\u66f4\u52a0\u5bb9\u6613\u3002\u4e5f\u53ef\u4ee5\u540c\u65f6\u590d\u76d8\u4e4b\u524d\u54ea\u4e9b\u89c2\u70b9\u662f\u4e00\u81f4\u6216\u8005\u76f8\u6096\uff0c\u5199\u4f5c\u5c31\u662f\u5173\u8054\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u901a\u8fc7\u5199\u4f5c\u4e0d\u65ad\u66f4\u65b0\u81ea\u5df1\u7684\u7406\u89e3\u548c\u601d\u8003\u3002\\n\\n### \u786e\u8ba4\u504f\u5dee\\n\\n\u5728\u4fdd\u6301\u5f00\u653e\u5fc3\u6001\u7684\u7ae0\u8282\u91cc\u9762\u63d0\u5230\u4e86 **\u786e\u8ba4\u504f\u5dee** \u8fd9\u4e2a\u6982\u5ff5\uff0c\u5927\u4f53\u7684\u610f\u601d\u662f\u4eba\u6f5c\u610f\u8bc6\u4f1a\u88ab\u719f\u6089\u6216\u611f\u89c9\u826f\u597d\u7684\u4e8b\u7269\u6240\u5438\u5f15\uff0c\u5254\u9664\u90a3\u4e9b\u6709\u8fdd\u6211\u4eec\u8ba4\u77e5\u7684\u4e8b\u7269\u3002\u786e\u8ba4\u504f\u5dee\u4f1a\u8ba9\u6211\u4eec\u65e0\u610f\u8bc6\u81ea\u52a8\u8fdb\u5165\u641c\u96c6\u5468\u56f4\u6709\u5229\u4e8e\u7ed3\u8bba\u7684\u6570\u636e\uff0c\u4ece\u800c\u5e72\u6270\u5b66\u4e60\u548c\u601d\u8003\u3002\u5199\u4f5c\u4e5f\u662f\u4e00\u6837\uff0c\u5728\u5bfb\u627e\u8bba\u636e\u65f6\u9700\u8981\u514b\u670d\u786e\u8ba4\u504f\u5dee\u7684\u5e72\u6270\uff0c\u907f\u514d\u65e0\u610f\u8bc6\u53ea\u6536\u96c6\u5bf9\u8bba\u70b9\u6709\u5229\u7684\u8bc1\u636e\u3002 \u5bf9\u4e8e\u5199\u4f5c\u6765\u8bf4\uff0c\u514b\u670d\u7684\u65b9\u5f0f\u53ef\u4ee5\u5c06\u5bfb\u627e\u8bc1\u5b9e\u6027\u7684\u4e8b\u5b9e\u53d8\u6210\u6536\u96c6\u6240\u6709\u76f8\u5173\u4fe1\u606f\uff0c\u800c\u4e0d\u7ba1\u5b83\u652f\u6301\u4ec0\u4e48\u8bba\u70b9\u3002\u4e66\u4e2d\u4e5f\u5f15\u7528\u4e86 Charles Darwin \u5982\u4f55\u5904\u7406\u786e\u8ba4\u504f\u5dee\u7684\u65b9\u5f0f: \u9047\u5230\u4e0e\u81ea\u5df1\u7ed3\u8bba\u76f8\u53cd\u7684\u4e8b\u5b9e\u6216\u8005\u89c2\u70b9\u65f6\u7acb\u5373\u628a\u5b83\u4eec\u8bb0\u4e0b\u6765\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4e8b\u5b9e\u548c\u89c2\u70b9\u66f4\u52a0\u5bb9\u6613\u88ab\u5ffd\u7565\u3002\\n\\n\u5728 **\u300c\u4e9a\u9a6c\u900a\u53cd\u5411\u5de5\u4f5c\u6cd5\u300d** \u4e66\u4e2d\u7684\u62db\u8058\u7ae0\u8282\u4e5f\u63d0\u5230\u8fd9\u4e2a\u6982\u5ff5\uff0c\u7531\u4e8e\u786e\u8ba4\u504f\u5dee\u5bfc\u81f4\u62db\u8058\u8005\u503e\u5411\u4e8e\u5173\u6ce8\u4ed6\u4eba\u786e\u8ba4\u7684\u6b63\u9762\u4fe1\u606f\uff0c\u800c\u5ffd\u7565\u8d1f\u9762\u548c\u77db\u76fe\u7684\u4fe1\u606f\uff0c\u6700\u7ec8\u5bfc\u81f4 \\"\u7fa4\u4f53\u601d\u7ef4\\"\u3002\u4e3e\u7684\u4f8b\u5b50\u5c31\u662f\u9762\u8bd5\u5b98\u4e4b\u95f4\u4ea4\u6d41\u4e00\u65e6\u7ed9\u4e88\u6b63\u9762\u53cd\u9988\uff0c\u4f1a\u5bfc\u81f4\u540e\u7eed\u9762\u8bd5\u8fc7\u7a0b\u4e2d\u65e0\u610f\u8bc6\u5c1d\u8bd5\u5bfb\u627e\u5019\u9009\u4eba\u8fd9\u4e9b\u4f18\u70b9\uff0c\u4ece\u800c\u5ffd\u7565\u4e86\u5019\u9009\u4eba\u5b58\u5728\u7684\u7f3a\u9677\u3002\u5f88\u591a\u516c\u53f8\u7684\u62db\u8058\u6d41\u7a0b\u4e0a\u90fd\u5b58\u5728\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u53ea\u662f\u53ef\u80fd\u6ca1\u6709\u610f\u8bc6\u5230\u800c\u5df2\uff0c\u4e00\u65e6\u610f\u8bc6\u5230\u4e4b\u540e\u6539\u53d8\u5c31\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\\n\\n###  \u603b\u7ed3\\n\\n\u5199\u4f5c\u6700\u91cd\u8981\u90fd\u662f\u4e2a\u4eba\u7684\u7406\u89e3\u548c\u601d\u8003\uff0c\u4e0d\u7ba1\u591a\u597d\u7684\u5de5\u5177\u90fd\u662f\u4e3a\u4e86\u66f4\u7cfb\u7edf\u5316\u7684\u601d\u8003\u3002\u53d7\u9650\u4e8e\u4eba\u8111\u7684\u5b58\u50a8\u5bb9\u91cf\uff0c\u9700\u8981\u901a\u8fc7\u7b14\u8bb0\u7684\u65b9\u5f0f\u5c06\u8bb0\u5fc6 offloading \u5230\u5916\u90e8\u5b58\u50a8\u4ee5\u51cf\u5c11\u77e5\u8bc6\u9057\u5fd8\u3002\u5361\u7247\u7b14\u8bb0\u5199\u4f5c\u6cd5\u672c\u8eab\u5e76\u6ca1\u6709\u9b54\u6cd5\uff0c\u5982\u679c\u6709\uff0c\u5e94\u5f53\u6240\u6709\u770b\u8fc7\u8fd9\u672c\u4e66\u7684\u4eba\u90fd\u80fd\u591f\u53d8\u6210\u957f\u671f\u7684\u5199\u4f5c\u8005\uff0c\u5b83\u6700\u91cd\u8981\u7684\u4f5c\u7528\u662f\u6539\u53d8\u4e86\u5199\u4f5c\u601d\u7ef4\uff0c\u8ba9\u6211\u4eec\u610f\u8bc6\u5230\u5199\u4f5c\u4e0d\u5e94\u8be5\u4ece\u96f6\u5f00\u59cb\u800c\u662f\u65e5\u5e38\u7684\u7406\u89e3\u548c\u601d\u8003\u3002\u53e6\u5916\uff0c\u5bf9\u4e8e\u4e13\u9898\u5199\u4f5c(\u6bd4\u5982\u8bba\u6587)\u4e5f\u662f\u4e00\u6837\uff0c\u5199\u4f5c\u8fc7\u7a0b\u4e0d\u662f\u91cd\u70b9\uff0c\u800c\u662f\u56f4\u7ed5\u4e13\u9898\u9605\u8bfb\u8d44\u6599\u8fc7\u7a0b\u4e2d\u4e2a\u4eba\u7684\u7406\u89e3\u548c\u601d\u8003\u3002\u5f53\u7136\uff0c\u6700\u4e3a\u91cd\u8981\u7684\u8fd8\u662f\u5b9e\u8df5\uff0c\u53ea\u6709\u771f\u6b63\u5230\u6c34\u91cc\u624d\u80fd\u5b66\u4f1a\u6e38\u6cf3\u3002\\n\\n\u6b22\u8fce\u626b\u7801\u5173\u6ce8 **hulk** \u4e2a\u4eba\u5fae\u4fe1\u516c\u4f17\u53f7\uff0c\u4e00\u8d77\u5b66\u4e60\u548c\u4ea4\u6d41:\\n\\n![img](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/personal-qrcode.jpeg)\\n\\n<Comments />"},{"id":"monitoring-go-apps-with-distributed-tracing-and-opentelemetry","metadata":{"permalink":"/monitoring-go-apps-with-distributed-tracing-and-opentelemetry","source":"@site/blog/2022-04-18-monitoring-go-apps-with-distributed-tracing-and-opentelemetry.md","title":"Monitoring Go apps with Distributed Tracing and OpenTelemetry","description":"This article gives a brief introduction into monitoring Go applications using OpenTelemetry and Uptrace.","date":"2022-04-18T00:00:00.000Z","formattedDate":"April 18, 2022","tags":[{"label":"Uptrace","permalink":"/tags/uptrace"},{"label":"OpenTelemetry","permalink":"/tags/open-telemetry"}],"readingTime":3.925,"truncated":true,"authors":[{"name":"Vladimir Mihailenco"}],"frontMatter":{"title":"Monitoring Go apps with Distributed Tracing and OpenTelemetry","slug":"monitoring-go-apps-with-distributed-tracing-and-opentelemetry","tags":["Uptrace","OpenTelemetry"],"author":"Vladimir Mihailenco"},"prevItem":{"title":"\u5361\u7247\u7b14\u8bb0\u5199\u4f5c\u6cd5 - \u8bfb\u4e66\u7b14\u8bb0","permalink":"/posts-writing-by-notes"},"nextItem":{"title":"\u5982\u4f55\u57fa\u4e8e\u78c1\u76d8 KV \u5b9e\u73b0 Bitmap","permalink":"/posts-how-to-impl-bitmap-on-disk-kv"}},"content":"This article gives a brief introduction into monitoring Go applications using OpenTelemetry and Uptrace.\\n\\n\x3c!--truncate--\x3e\\n\\n## What is OpenTelemetry?\\n\\n[OpenTelemetry](https://uptrace.dev/opentelemetry/) is an open source and vendor-neutral API for [distributed tracing](https://uptrace.dev/opentelemetry/distributed-tracing.html) (including logs and errors) and [OpenTelemetry metrics](https://uptrace.dev/opentelemetry/metrics.html).\\n\\nIt specifies how to collect and export telemetry data in a vendor agnostic way. With OpenTelemetry, you can instrument your application once and then add or change vendors without changing the instrumentation, for example, many [open source tracing tools](https://uptrace.dev/blog/distributed-tracing-tools.html) already support OpenTelemetry.\\n\\nBy being vendor-neutral, OpenTelemetry makes it possible to try different products with minimal efforts and avoid being stuck with a vendor forever.\\n\\nOpenTelemetry also enables different companies to work together on maintaining a single framework instead of duplicating efforts in proprietary projects which benefits everyone. It also means that OpenTelemetry works almost everywhere and you can trace requests across different languages, platforms, and even clouds.\\n\\n## How to use OpenTelemetry?\\n\\nThe easiest way to get started with OpenTelemetry is to pick an [OpenTelemetry backend](https://uptrace.dev/blog/opentelemetry-backend.html) (vendor) and follow the documentation. Most vendors provide pre-configured OpenTelemetry distros that allow you to skip some steps and can significantly improve your experience.\\n\\nIf you are looking for an open source solution, Jaeger is historically the default choice, but Uptrace provides more features and might be a better choice nowadays.\\n\\nUptrace is an [open source APM](https://uptrace.dev/get/open-source-apm.html) for OpenTelemetry that uses ClickHouse database to store traces, metrics, and logs. You can use it to monitor applications and set up automatic alerts to receive notifications via email, Slack, Telegram, and more.\\n\\n## What is tracing?\\n\\n[Distributed tracing](https://uptrace.dev/opentelemetry/distributed-tracing.html) allows to observe requests as they propagate through distributed systems, especially those built using a microservices architecture.\\n\\nTracing provides insights into your app performance along with any errors and logs. You immediately see what conditions cause errors and how particular error affects app performance.\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/monitoring/tracing-graph.png)\\n\\nUsing tracing, you can break down requests into [spans](https://uptrace.dev/opentelemetry/distributed-tracing.html#spans). **Span** is an operation (unit of work) your app performs handling a request, for example, a database query or a network call.\\n\\n**Trace** is a tree of spans that shows the path that a request makes through an app. Root span is the first span in a trace.\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/monitoring/trace-graph.png)\\n\\nTo learn more about tracing, see [Distributed tracing using OpenTelemetry](https://uptrace.dev/opentelemetry/distributed-tracing.html).\\n\\n## OpenTelemetry API\\n\\nOpenTelemetry API is a programming interface that you can use to instrument code to collect telemetry data such as traces, metrics, and logs.\\n\\nYou can create spans using OpenTelemetry API for Go like this:\\n\\n```go\\nimport \\"go.opentelemetry.io/otel\\"\\n\\nvar tracer = otel.Tracer(\\"app_or_package_name\\")\\n\\nfunc someFunc(ctx context.Context) error {\\n    ctx, span := tracer.Start(ctx, \\"some-func\\")\\n    defer span.End()\\n\\n    // the code you are measuring\\n\\n    return nil\\n}\\n```\\n\\nYou can also record [attributes](https://uptrace.dev/opentelemetry/distributed-tracing.html#attributes) and errors:\\n\\n```go\\nfunc someFunc(ctx context.Context) error {\\n    ctx, span := tracer.Start(ctx, \\"some-func\\")\\n    defer span.End()\\n\\n    if span.IsRecording() {\\n        span.SetAttributes(\\n            attribute.Int64(\\"enduser.id\\", userID),\\n            attribute.String(\\"enduser.email\\", userEmail),\\n        )\\n    }\\n\\n    if err := someOtherFunc(ctx); err != nil {\\n        span.RecordError(err)\\n        span.SetStatus(codes.Error, err.Error())\\n    }\\n\\n    return nil\\n}\\n```\\n\\nSee [OpenTelemetry Go API](https://uptrace.dev/opentelemetry/go-tracing.html) for details.\\n\\n## What is Uptrace?\\n\\nUptrace is an [open source APM](https://uptrace.dev/get/open-source-apm.html) with an intuitive query builder, rich dashboards, automatic alerts, and integrations for most languages and frameworks.\\n\\nUptrace accepts data from OpenTelemetry and stores it in a ClickHouse database. ClickHouse is a columnar database that is much more efficient for traces and logs than, for example, Elastic Search. On the same hardware, ClickHouse can store 10x more traces and, at the same time, provide much better performance.\\n\\nYou can [install](https://uptrace.dev/get/install.html) Uptrace by downloading a DEB/RPM package or a pre-compiled binary.\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/monitoring/uptrace.png)\\n\\n## Metrics monitoring\\n\\nUptrace also allows you to monitor metrics using Prometheus-like alerting rules. For example, the following monitor uses the group by node expression to create an alert whenever an individual Redis shard is down:\\n\\n```yaml\\nmonitors:\\n  - name: Redis shard is down\\n    metrics:\\n      - redis_up as $redis_up\\n    query:\\n      - group by cluster # monitor each cluster,\\n      - group by bdb # each database,\\n      - group by node # and each shard\\n      - $redis_up\\n    min_allowed_value: 1\\n    # shard should be down for 5 minutes to trigger an alert\\n    for_duration: 5m\\n```\\n\\nYou can also create queries with more complex expressions. For example, the following rules create an alert when the keyspace hit rate is lower than 75% or memory fragmentation is too high:\\n\\n```yaml\\nmonitors:\\n  - name: Redis read hit rate < 75%\\n    metrics:\\n      - redis_keyspace_read_hits as $hits\\n      - redis_keyspace_read_misses as $misses\\n    query:\\n      - group by cluster\\n      - group by bdb\\n      - group by node\\n      - $hits / ($hits + $misses) as hit_rate\\n    min_allowed_value: 0.75\\n    for_duration: 5m\\n```\\n\\nSee [Alerting and Notifications](https://uptrace.dev/get/alerting.html) for details.\\n\\n## What\'s next?\\n\\nNext, you can continue exploring [OpenTelemetry](https://uptrace.dev/opentelemetry/) or start instrumenting your app using popular instrumentations:\\n\\n- [OpenTelemetry Gin](https://uptrace.dev/get/instrument/opentelemetry-gin.html)\\n- [OpenTelemetry Go gRPC](https://uptrace.dev/get/instrument/opentelemetry-go-grpc.html)\\n- [OpenTelemetry database/sql](https://uptrace.dev/get/instrument/opentelemetry-database-sql.html)\\n- [OpenTelemetry Redis](https://uptrace.dev/get/monitor/opentelemetry-redis.html)"},{"id":"posts-how-to-impl-bitmap-on-disk-kv","metadata":{"permalink":"/posts-how-to-impl-bitmap-on-disk-kv","source":"@site/blog/2021-07-27-how-to-impl-bitmap-on-disk-kv.md","title":"\u5982\u4f55\u57fa\u4e8e\u78c1\u76d8 KV \u5b9e\u73b0 Bitmap","description":"\u5927\u90e8\u5206\u5f00\u53d1\u5bf9 Bitmap \u5e94\u8be5\u90fd\u4e0d\u964c\u751f\uff0c\u9664\u4e86\u4f5c\u4e3a Bloom Filter \u5b9e\u73b0\u7684\u5b58\u50a8\u4e4b\u5916\uff0c\u8bb8\u591a\u6570\u636e\u5e93\u4e5f\u6709\u63d0\u4f9b Bitmap \u7c7b\u578b\u7684\u7d22\u5f15\u3002\u5bf9\u4e8e\u5185\u5b58\u578b\u7684\u5b58\u50a8\u6765\u8bf4\uff0cBitmap \u53ea\u662f\u4e00\u4e2a\u7279\u6b8a\u7c7b\u578b(bit)\u7684\u7a00\u758f\u6570\u7ec4\uff0c\u64cd\u4f5c\u5185\u5b58\u4e0d\u4f1a\u5e26\u6765\u8bfb\u5199\u653e\u5927\u95ee\u9898(\u6307\u7684\u662f\u7269\u7406\u8bfb\u5199\u7684\u6570\u636e\u91cf\u8fdc\u5927\u4e8e\u903b\u8f91\u7684\u6570\u636e\u91cf), Redis \u5c31\u662f\u5728\u5b57\u7b26\u4e32\u7c7b\u578b\u4e0a\u652f\u6301 bit \u7684\u76f8\u5173\u64cd\u4f5c\uff0c\u800c\u5bf9\u4e8e Kvrocks \u8fd9\u79cd\u57fa\u4e8e\u78c1\u76d8 KV \u5b9e\u73b0\u7684\u5b58\u50a8\u5219\u4f1a\u662f\u6bd4\u8f83\u5927\u6311\u6218\uff0c\u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u8ba8\u8bba\u7684\u5176\u5b9e\u662f\u300c\u57fa\u4e8e\u78c1\u76d8 KV \u5b9e\u73b0 Bitmap \u8981\u5982\u4f55\u51cf\u5c11\u78c1\u76d8\u8bfb\u5199\u653e\u5927\u300d","date":"2021-07-27T00:00:00.000Z","formattedDate":"July 27, 2021","tags":[{"label":"Redis","permalink":"/tags/redis"},{"label":"Bitmap","permalink":"/tags/bitmap"},{"label":"Storage","permalink":"/tags/storage"}],"readingTime":11.125,"truncated":true,"authors":[{"name":"hulk"}],"frontMatter":{"author":"hulk","title":"\u5982\u4f55\u57fa\u4e8e\u78c1\u76d8 KV \u5b9e\u73b0 Bitmap","slug":"posts-how-to-impl-bitmap-on-disk-kv","tags":["Redis","Bitmap","Storage"]},"prevItem":{"title":"Monitoring Go apps with Distributed Tracing and OpenTelemetry","permalink":"/monitoring-go-apps-with-distributed-tracing-and-opentelemetry"},"nextItem":{"title":"Kvrocks \u4e00\u6b3e\u5f00\u6e90\u7684\u4f01\u4e1a\u7ea7\u78c1\u76d8KV\u5b58\u50a8\u670d\u52a1","permalink":"/intro-opensource-kvrocks"}},"content":"\u5927\u90e8\u5206\u5f00\u53d1\u5bf9 Bitmap \u5e94\u8be5\u90fd\u4e0d\u964c\u751f\uff0c\u9664\u4e86\u4f5c\u4e3a Bloom Filter \u5b9e\u73b0\u7684\u5b58\u50a8\u4e4b\u5916\uff0c\u8bb8\u591a\u6570\u636e\u5e93\u4e5f\u6709\u63d0\u4f9b Bitmap \u7c7b\u578b\u7684\u7d22\u5f15\u3002\u5bf9\u4e8e\u5185\u5b58\u578b\u7684\u5b58\u50a8\u6765\u8bf4\uff0cBitmap \u53ea\u662f\u4e00\u4e2a\u7279\u6b8a\u7c7b\u578b(bit)\u7684\u7a00\u758f\u6570\u7ec4\uff0c\u64cd\u4f5c\u5185\u5b58\u4e0d\u4f1a\u5e26\u6765\u8bfb\u5199\u653e\u5927\u95ee\u9898(\u6307\u7684\u662f\u7269\u7406\u8bfb\u5199\u7684\u6570\u636e\u91cf\u8fdc\u5927\u4e8e\u903b\u8f91\u7684\u6570\u636e\u91cf), Redis \u5c31\u662f\u5728\u5b57\u7b26\u4e32\u7c7b\u578b\u4e0a\u652f\u6301 bit \u7684\u76f8\u5173\u64cd\u4f5c\uff0c\u800c\u5bf9\u4e8e Kvrocks \u8fd9\u79cd\u57fa\u4e8e\u78c1\u76d8 KV \u5b9e\u73b0\u7684\u5b58\u50a8\u5219\u4f1a\u662f\u6bd4\u8f83\u5927\u6311\u6218\uff0c\u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u8ba8\u8bba\u7684\u5176\u5b9e\u662f\u300c**\u57fa\u4e8e\u78c1\u76d8 KV \u5b9e\u73b0 Bitmap** \u8981**\u5982\u4f55\u51cf\u5c11\u78c1\u76d8\u8bfb\u5199\u653e\u5927\u300d**\\n\\n\x3c!--truncate--\x3e\\n\\n## \u4e3a\u4ec0\u4e48\u4f1a\u4ea7\u751f\u8bfb\u5199\u653e\u5927\\n\\n\u8bfb\u5199\u653e\u5927\u7684\u4e3b\u8981\u662f\u6765\u6e90\u4e8e\u4e24\u65b9\u9762:\\n\\n- \u786c\u4ef6\u5c42\u9762\u7684\u6700\u5c0f\u8bfb\u5199\u5355\u5143\\n- \u8f6f\u4ef6\u5c42\u9762\u5b58\u50a8\u7ec4\u7ec7\u65b9\u5f0f\\n\\n\u786c\u4ef6\u5c42\u9762\u4e00\u822c\u662f\u7531\u4e8e\u6700\u5c0f\u8bfb\u5199\u5355\u5143\u5e26\u6765\u7684\u8bfb\u5199\u653e\u5927\uff0c\u4ee5 SSD \u4e3a\u4f8b\uff0c\u8bfb\u5199\u7684\u6700\u5c0f\u5355\u4f4d\u662f\u9875(\u4e00\u822c\u662f 4KiB/8KiB/16KiB)\u3002\u5373\u4f7f\u5e94\u7528\u5c42\u53ea\u5199\u5165\u4e00\u4e2a\u5b57\u8282\uff0c\u5728\u78c1\u76d8\u4e0a\u5b9e\u9645\u4f1a\u5199\u5165\u4e00\u4e2a\u9875\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u5199\u653e\u5927\uff0c\u53cd\u4e4b\u8bfb\u4e5f\u662f\u4e00\u6837\u3002\u53e6\u5916\uff0cSSD \u4fee\u6539\u6570\u636e\u4e0d\u662f\u5728\u9875\u5185\u4f4d\u7f6e\u539f\u5730\u4fee\u6539\u800c\u662f Read-Modify-Write \u7684\u65b9\u5f0f\uff0c\u4fee\u6539\u65f6\u9700\u8981\u5c06\u539f\u6765\u7684\u6570\u636e\u8bfb\u51fa\u6765\uff0c\u4fee\u6539\u4e4b\u540e\u518d\u5199\u5230\u65b0\u9875\uff0c\u8001\u7684\u78c1\u76d8\u9875\u7531 GC \u8fdb\u884c\u56de\u6536\u3002\u6240\u4ee5\uff0c\u5373\u4f7f\u5bf9\u540c\u4e00\u9875\u7684\u4e00\u5c0f\u5757\u6570\u636e\u53cd\u590d\u4fee\u6539\u4e5f\u4f1a\u7531\u4e8e\u786c\u4ef6\u672c\u8eab\u673a\u5236\u800c\u9020\u6210\u5199\u653e\u5927\u3002\u7c7b\u4f3c\u4e8e\u5982\u4e0b:\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/ssd-rmw.png)\\n\\n\u7531\u6b64\u53ef\u89c1\uff0c\u5927\u91cf\u968f\u673a\u5c0f io \u8bfb\u5199\u5bf9\u4e8e SSD \u78c1\u76d8\u6765\u8bf4\u662f\u5f88\u4e0d\u53cb\u597d\u7684\uff0c\u9664\u4e86\u5728\u6027\u80fd\u65b9\u9762\u6709\u6bd4\u8f83\u5927\u7684\u5f71\u54cd\u4e4b\u5916\uff0c\u9891\u7e41\u64e6\u5199\u4e5f\u4f1a\u4e25\u91cd\u5bfc\u81f4 SSD \u7684\u5bff\u547d(\u968f\u673a\u8bfb\u5199\u5bf9 HDD \u540c\u6837\u4e0d\u53cb\u597d\uff0c\u9700\u8981\u4e0d\u65ad\u5bfb\u9053\u548c\u5bfb\u5740)\u3002LSM-Tree \u5c31\u662f\u901a\u8fc7\u5c06\u968f\u673a\u5199\u5165\u53d8\u6210\u987a\u5e8f\u6279\u91cf\u5199\u5165\u6765\u7f13\u89e3\u8fd9\u7c7b\u95ee\u9898\u3002\\n\\n\u8f6f\u4ef6\u5c42\u9762\u7684\u8bfb\u5199\u653e\u5927\u4e3b\u8981\u6765\u81ea\u4e8e\u6570\u636e\u7ec4\u7ec7\u65b9\u5f0f\uff0c\u4e0d\u540c\u7684\u5b58\u50a8\u7ec4\u7ec7\u65b9\u5f0f\u6240\u5e26\u6765\u7684\u8bfb\u5199\u653e\u5927\u7a0b\u5ea6\u4e5f\u4f1a\u6709\u5f88\u5927\u7684\u5dee\u5f02\u3002\u8fd9\u91cc\u4ee5 RocksDB \u4e3a\u4f8b\uff0cRocksDB \u662f Facebook \u57fa\u4e8e Google LevelDB \u4e4b\u4e0a\u5b9e\u73b0\u4e86\u591a\u7ebf\u7a0b\uff0cBackup \u4ee5\u53ca Compaction \u7b49\u8bf8\u591a\u5f88\u5b9e\u7528\u7684\u529f\u80fd\u3002RocksDB \u7684\u6570\u636e\u7ec4\u7ec7\u65b9\u5f0f\u662f LSM-Tree\uff0c\u5728\u89e3\u51b3\u78c1\u76d8\u5199\u5165\u65b9\u6cd5\u95ee\u9898\uff0c\u672c\u8eab\u7684\u6570\u636e\u5b58\u50a8\u4e5f\u5e26\u6765\u4e86\u4e00\u4e9b\u7a7a\u95f4\u653e\u5927\u95ee\u9898\u3002\u4e0b\u9762\u53ef\u4ee5\u7b80\u5355\u770b\u4e00\u4e0b LSM-Tree \u662f\u5982\u4f55\u7ec4\u7ec7\u6570\u636e:\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/lsm-tree.png)\\n\\nLSM-Tree \u6bcf\u6b21\u5199\u5165\u90fd\u4f1a\u4ea7\u751f\u4e00\u6761\u8bb0\u5f55\uff0c\u6bd4\u5982\u4e0a\u56fe x \u5148\u540e\u5199\u4e86 4 \u6b21\uff0c\u5206\u522b\u662f 0\uff0c1\uff0c2\uff0c3\u3002\u5982\u679c\u5355\u770b x \u8fd9\u4e2a\u53d8\u91cf\uff0c\u8fd9\u91cc\u76f8\u5f53\u4e8e\u6709 4 \u500d\u7684\u7a7a\u95f4\u653e\u5927\uff0c\u8fd9\u4e9b\u91cd\u590d\u7684\u8bb0\u5f55\u4f1a\u5728 compaction \u7684\u65f6\u5019\u8fdb\u884c\u56de\u6536\u3002\u540c\u6837\uff0c\u5220\u9664\u4e5f\u662f\u901a\u8fc7\u63d2\u5165\u4e00\u6761 value \u4e3a\u7a7a\u7684\u8bb0\u5f55\u6765\u5b9e\u73b0\u3002 LSM-Tree \u6bcf\u4e00\u5c42\u7a7a\u95f4\u5927\u5c0f\u662f\u9010\u5c42\u9012\u589e\uff0c\u5f53\u5bb9\u91cf\u5927\u5c0f\u5f53\u5c42\u6700\u5927\u65f6\u4f1a\u89e6\u53d1 compaction \u5408\u5e76\u5230\u4e0b\u4e00\u5c42\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u5047\u8bbe Level 0 \u6700\u5927\u5b58\u50a8\u5927\u5c0f\u662f M Bytes\uff0c\u9010\u5c42\u6309\u7167 10 \u500d\u589e\u957f\u4e14\u6700\u5927 7 \u5c42\uff0c\u7406\u8bba\u4e0a\u7a7a\u95f4\u653e\u5927\u7684\u5927\u7ea6\u662f 1.111111 \u500d\u3002\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b:\\n\\n```go\\n\u7a7a\u95f4\u653e\u5927\u7387 = (1 + 10 + 100 +1000 + 10000 + 100000 + 1000000) * M / (1000000 * M) \\n```\\n\\n\u4f46\u5728\u5b9e\u9645\u573a\u666f\u4e2d\uff0c\u7531\u4e8e\u6700\u540e\u4e00\u5c42\u4e00\u822c\u65e0\u6cd5\u8fbe\u5230\u6700\u5927\u503c\uff0c\u6240\u4ee5\u653e\u5927\u7a7a\u95f4\u7387\u6bd4\u8fd9\u4e2a\u7406\u8bba\u503c\u5927\u4e0d\u5c11\uff0c\u5177\u4f53\u5728 RocksDB \u7684\u6587\u6863\u91cc\u9762\u4e5f\u6709\u63d0\u8fc7\uff0c\u5177\u4f53\u89c1: [https://rocksdb.org/blog/2015/07/23/dynamic-level.html](https://rocksdb.org/blog/2015/07/23/dynamic-level.html)\\n\\n\u53e6\u5916\uff0c\u7531\u4e8e RocksDB \u8bfb\u5199\u90fd\u662f\u4ee5 KV \u4e3a\u5355\u4f4d\uff0cValue \u8d8a\u5927\u5e26\u6765\u7684\u8bfb\u5199\u653e\u5927\u5c31\u53ef\u80fd\u8d8a\u5927\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a Value \u4e3a 10 MiB \u7684 JSON\uff0c\u5982\u679c\u8981\u4fee\u6539\u8fd9\u4e2a key \u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\uff0c\u90a3\u4e48\u9700\u8981\u628a\u6574\u4e2a JSON \u8bfb\u51fa\u6765\uff0c\u4fee\u6539\u540e\u518d\u91cd\u65b0\u5199\u56de\u53bb\uff0c\u5c31\u4f1a\u5bfc\u81f4\u5de8\u5927\u7684\u8bfb\u5199\u653e\u5927\u3002\u6709\u4e00\u7bc7 paper\u300cWiscKey: Separating Keys from Values in SSD-conscious Storage\u300d\u5c31\u662f\u901a\u8fc7 Key/Value \u5206\u79bb\u7684\u65b9\u5f0f\u6765\u4f18\u5316 LSM-Tree \u5927 KV \u7684\u6765\u51cf\u5c11 Compaction \u65f6\u5e26\u6765\u5199\u653e\u5927\u7684\u95ee\u9898\u3002TiKV \u91cc\u9762\u7684 titan \u5c31\u662f\u57fa\u4e8e Wiskey \u8bba\u6587\u4f18\u5316 RocksDB \u5728\u5927 KV \u573a\u666f\u7684\u5199\u653e\u5927\u95ee\u9898\uff0cRocksDB \u4e5f\u5728\u793e\u533a\u7248\u672c\u91cc\u9762\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u4e0d\u8fc7\u8fd8\u662f\u5b9e\u9a8c\u6027\u7684\u9636\u6bb5\u3002\\n\\n## \u57fa\u4e8e\u78c1\u76d8 KV \u5b9e\u73b0 Bitmap\\n\\n Kvrocks \u662f\u57fa\u4e8e RocksDB \u4e4b\u4e0a\u5b9e\u73b0\u7684\u517c\u5bb9 Redis \u534f\u8bae\u7684\u78c1\u76d8\u5b58\u50a8\uff0c \u9700\u8981\u652f\u6301 Bitmap \u529f\u80fd\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u5728\u78c1\u76d8 KV \u4e4b\u4e0a\u5b9e\u73b0 Bitmap \u7684\u529f\u80fd\u3002\u800c\u5927\u90e8\u5206\u4f7f\u7528 Bitmap \u7684\u573a\u666f\u90fd\u662f\u4f5c\u4e3a\u7a00\u758f\u6570\u7ec4\u6765\u7528\uff0c\u610f\u5473\u7740\u7b2c\u4e00\u6b21\u5199\u5165\u7684 offset \u4e3a 1\uff0c\u4e0b\u6b21\u7684 offset \u53ef\u80fd\u5c31\u662f 1000000000 \u751a\u81f3\u66f4\u5927\uff0c\u6240\u4ee5\u5728\u5b9e\u73b0 Bitmap \u5c31\u4f1a\u9762\u4e34\u4e0a\u8ff0\u8bfb\u5199\u548c\u7a7a\u95f4\u653e\u5927\u95ee\u9898\u3002\\n\\n\u4e00\u79cd\u6700\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u4ecd\u7136\u628a\u6574\u4e2a Bitmap \u4f5c\u4e3a\u4e00\u4e2a Value\uff0c\u8bfb\u5199\u65f6\u5c06 Value \u8bfb\u53d6\u5230\u5185\u5b58\u4e2d\u518d\u56de\u5199\u3002\u8fd9\u79cd\u5b9e\u73b0\u867d\u7136\u5f88\u7b80\u5355\uff0c\u4f46\u4e00\u4e0d\u5c0f\u5fc3\u53ef\u80fd\u5bfc\u81f4 value \u5de8\u5927\uff0c\u5355\u4e2a Value \u5927\u5c0f\u4e0a GiB \u90fd\u662f\u53ef\u80fd\u7684\u3002\u9664\u4e86\u5b58\u5728\u6709\u6548\u7a7a\u95f4\u5229\u7528\u7387\u95ee\u9898\u4e4b\u5916\uff0c\u53ef\u80fd\u4f1a\u76f4\u63a5\u5bfc\u81f4\u6574\u4e2a\u670d\u52a1\u4e0d\u53ef\u7528(\u9700\u8981\u8bfb\u5199\u6574\u4e2a Value)\u3002Pika \u91cc\u9762\u7684 Bitmap \u5c31\u662f\u8fd9\u79cd\u5b9e\u73b0\uff0c\u4f46\u9650\u5236\u6700\u5927\u7684 Value \u4e3a 128 KiB\uff0c\u9650\u5236 Value \u5927\u5c0f\u867d\u7136\u907f\u514d\u4e0a\u8ff0\u7684\u6781\u7aef\u60c5\u51b5\uff0c\u4f46\u4f1a\u5927\u5927\u9650\u5236 Bitmap \u7684\u4f7f\u7528\u573a\u666f\uff0c\u751a\u81f3\u662f\u65e0\u6cd5\u4f7f\u7528\u3002\\n\\n\u65e2\u7136\u77e5\u9053\u6838\u5fc3\u95ee\u9898\u662f\u7531\u4e8e\u5355\u4e2a KV \u8fc7\u5927\u5bfc\u81f4\uff0c \u90a3\u4e48\u6700\u76f4\u63a5\u7684\u65b9\u5f0f\u5c31\u662f\u5c06 Bitmap \u62c6\u5206\u6210\u591a\u4e2a KV\uff0c\u7136\u540e\u63a7\u5236\u5355\u4e2a KV \u5927\u5c0f\u5728\u5408\u7406\u8303\u56f4\u4e4b\u5185\uff0c \u90a3\u4e48\u8bfb\u5199\u5e26\u6765\u7684\u653e\u5927\u4e5f\u662f\u76f8\u5bf9\u53ef\u63a7\u3002\u5728\u5f53\u524d Kvrocks \u7684\u5b9e\u73b0\u91cc\u9762\u662f\u6309\u7167\u6bcf\u4e2a KV \u4e3a 1 KiB \u6765\u5212\u5206\uff0c\u76f8\u5f53\u4e8e\u6bcf\u4e2a value \u53ef\u4ee5\u5b58\u653e 8192 bits\u3002\u7b97\u6cd5\u793a\u610f\u56fe\u5982\u4e0b:\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/bitmap-split.png)\\n\\n\u4ee5 `setbit foo 8192002 1` \u4e3a\u4f8b\uff0c\u5b9e\u73b0\u7684\u6b65\u9aa4\u5982\u4e0b:\\n\\n1. \u8ba1\u7b97 `8192002` \u8fd9\u4e2a offset \u5bf9\u5e94\u6240\u5728\u7684 key, \u56e0\u4e3a Kvrocks \u662f\u6309\u7167 1 KiB \u4e00\u4e2a value\uff0c\u90a3\u4e48\u6240\u5728 key \u7684\u7f16\u53f7\u5c31\u662f 8192002/(1024*8) = 1000\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a offset \u5e94\u8be5\u5199\u5230 \\"foo\\" + 1000 \u8fd9\u4e2a key \u5bf9\u5e94\u7684 value \u91cc\u9762\\n2. \u63a5\u7740\u4ece RocksDB \u91cc\u9762\u53bb\u83b7\u53d6\u8fd9\u4e2a key \u5bf9\u5e94\u7684 value\\n3. \u8ba1\u7b97\u8fd9\u4e2a offset \u5728\u5206\u6bb5\u91cc\u9762\u7684\u504f\u79fb\uff0c8192002%8291 \u7b49\u4e8e 2\uff0c\u7136\u540e\u628a value \u4e2d\u504f\u79fb\u4e3a 2 \u7684 bit \u4f4d\u8bbe\u7f6e\u4e3a 1\\n4. \u6700\u540e\u5c06 value \u56de\u5199\u5230 RocksDB\\n\\n\u8fd9\u79cd\u5b9e\u73b0\u6bd4\u8f83\u5173\u952e\u7684\u4e00\u4e2a\u7279\u70b9\u662f Bitmap \u5bf9\u5e94\u7684 KV \u53ea\u5728\u6709\u5199\u5165\u7684\u65f6\u5019\u624d\u4f1a\u771f\u6b63\u5199\u5230 RocksDB \u91cc\u9762\u3002\u5047\u8bbe\u6211\u4eec\u53ea\u6267\u884c\u8fc7\u4e24\u6b21 setbit \uff0c\u5206\u522b\u662f  `setbit foo 1 1`  \u548c `setbit foo 8192002 1` \uff0c\u90a3\u4e48 RocksDB \u91cc\u9762\u53ea\u4f1a\u6709 foo:0 \u548c foo:1000 \u8fd9\u4e24\u4e2a key\uff0c\u5b9e\u9645\u7684\u5199\u5165 KV \u603b\u5171\u4e5f\u53ea\u6709 2 KiB\u3002\u521a\u597d\u4e5f\u53ef\u4ee5\u5b8c\u7f8e\u9002\u5e94 Bitmap \u8fd9\u79cd\u7a00\u758f\u6570\u7ec4\u7684\u573a\u666f\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u7a00\u758f\u5199\u5165\u800c\u5e26\u6765\u7a7a\u95f4\u653e\u5927\u7684\u95ee\u9898\u3002\\n\\n**\u8fd9\u4e2a\u60f3\u6cd5\u4e5f\u548c Linux \u7684\u865a\u62df\u5185\u5b58/\u7269\u7406\u5185\u5b58\u6620\u5c04\u7b56\u7565\u7c7b\u4f3c\uff0c\u6bd4\u5982\u6211\u4eec malloc \u7533\u8bf7\u4e86 1GiB \u7684\u5185\u5b58\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e5f\u53ea\u662f\u5206\u914d\u4e00\u7247\u865a\u62df\u5185\u5b58\u5730\u5740\u7a7a\u95f4\uff0c\u53ea\u6709\u5728\u771f\u6b63\u5199\u5165\u7684\u65f6\u5019\u624d\u4f1a\u89e6\u53d1\u7f3a\u9875\u4e2d\u65ad\u53bb\u5206\u914d\u7269\u7406\u5185\u5b58(\u76ee\u524d\u6b63\u5e38\u5185\u5b58\u9875\u5927\u5c0f\u662f 4KiB)\u3002\u4e5f\u5c31\u662f\u5982\u679c\u5185\u5b58\u9875\u6ca1\u6709\u88ab\u5199\u8fc7\uff0c\u53ea\u8bfb\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u7269\u7406\u5185\u5b58\u5206\u914d\u3002**\\n\\nGetBit \u4e5f\u662f\u7c7b\u4f3c\uff0c\u5148\u8ba1\u7b97 offset \u6240\u5728\u7684 key\uff0c\u7136\u540e\u4ece RocksDB \u8bfb\u53d6\u8fd9\u4e2a key, \u5982\u679c\u4e0d\u5b58\u5728\u5219\u8bf4\u660e\u8fd9\u6bb5\u6ca1\u6709\u88ab\u5199\u8fc7\uff0c\u76f4\u63a5\u8fd4\u56de 0\u3002\u5982\u679c\u5b58\u5728\u5219\u8bfb\u53d6 Value\uff0c\u8fd4\u56de\u5bf9\u5e94 bit \u7684\u503c\u3002\u53e6\u5916\uff0c\u5728\u5b9e\u73b0\u4e0a\u4e5f\u5355\u4e2a KV \u5b9e\u9645\u5b58\u50a8\u5927\u5c0f\u4e5f\u662f\u7531\u76ee\u524d\u5199\u5165\u6700\u5927\u7684 offset \u51b3\u5b9a\uff0c\u5e76\u4e0d\u662f\u6709\u5199\u5165\u5c31\u4f1a\u5206\u914d 1024 KiB\uff0c\u8fd9\u6837\u4e5f\u53ef\u4ee5\u4e00\u5b9a\u7a0b\u5ea6\u4f18\u5316\u5355\u4e2a KV \u5185\u7684\u8bfb\u5199\u653e\u5927\u95ee\u9898\u3002\u5b9e\u73b0\u53ef\u53c2\u8003: [https://github.com/KvrocksLabs/kvrocks/blob/unstable/src/redis_bitmap.cc](https://github.com/KvrocksLabs/kvrocks/blob/unstable/src/redis_bitmap.cc)\\n\\n## \u603b\u7ed3\\n\\n\u53ef\u4ee5\u770b\u5230\u57fa\u4e8e\u5185\u5b58\u548c\u78c1\u76d8\u4e4b\u4e0a\u53bb\u5b9e\u73b0\u540c\u4e00\u4e2a\u529f\u80fd\uff0c\u9664\u4e86\u4e0d\u540c\u7c7b\u578b\u5b58\u50a8\u4ecb\u8d28\u672c\u8eab\u7684\u901f\u5ea6\u5dee\u5f02\u4e4b\u5916\uff0c\u95ee\u9898\u548c\u6311\u6218\u662f\u5b8c\u5168\u4e0d\u4e00\u6837\u7684\u3002\u5bf9\u4e8e\u78c1\u76d8\u7c7b\u578b\u7684\u670d\u52a1\uff0c\u9700\u8981\u4e0d\u65ad\u53bb\u4f18\u5316\u968f\u673a\u8bfb\u5199\u548c\u7a7a\u95f4\u653e\u5927\u95ee\u9898\uff0c\u9664\u4e86\u5bf9\u4e8e\u8f6f\u4ef6\u672c\u8eab\u719f\u6089\u4e4b\u5916\uff0c\u540c\u6837\u9700\u8981\u4e86\u89e3\u786c\u4ef6\u8bbe\u5907\u3002\\n\\n\u53e6\u5916\uff0cKvrocks \u4f5c\u4e3a\u57fa\u4e8e\u78c1\u76d8 KV \u4e4b\u4e0a\u517c\u5bb9 Redis \u534f\u8bae\u5b58\u50a8\u670d\u52a1\uff0c\u6700\u7ecf\u5e38\u88ab\u95ee\u5230\u662f\u8ddf\u5176\u4ed6\u529f\u80fd\u7c7b\u4f3c\u7684\u670d\u52a1\u6709\u4ec0\u4e48\u533a\u522b\uff1f\u7b80\u5355\u6765\u8bf4\uff0c\u6700\u5927\u7684\u5dee\u5f02\u5728\u4e8e\u4e0d\u540c\u9879\u76ee\u7ef4\u62a4\u8005\u5728\u529f\u80fd\u8bbe\u8ba1\u4e0a\u7684\u5dee\u5f02\uff0c\u4e0d\u540c\u8bbe\u8ba1\u4f1a\u8ba9\u529f\u80fd\u770b\u4f3c\u4e00\u6837\u7684\u670d\u52a1\u5728\u8868\u73b0\u4e0a\u5b8c\u5168\u4e0d\u4e00\u6837\u3002\u6240\u4ee5\uff0c\u6700\u597d\u7684\u65b9\u5f0f\u5c31\u662f\u901a\u8fc7\u4ee3\u7801\u53bb\u4e86\u89e3\u9879\u76ee\u7684\u8bbe\u8ba1\u548c\u95ee\u9898\u3002\\n\\n\u6b22\u8fce\u5927\u5bb6\u626b\u7801\u5173\u6ce8 **\u300cKvrocks \u5b98\u65b9\u793e\u533a\u300d**\u516c\u4f17\u53f7\u5e76\u56de\u590d: **\u8fdb\u7fa4**\uff0c\u6765\u52a0\u5165\u6211\u4eec\u7684\u5fae\u4fe1\u7fa4\uff01\\n\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/qrcode.jpg)\\n\\n## References\\n\\n[1]  [https://rocksdb.org/blog/2015/07/23/dynamic-level.html](https://rocksdb.org/blog/2015/07/23/dynamic-level.html)\\n\\n[2] [https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf](https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf)\\n\\n[3] [https://github.com/KvrocksLabs/kvrocks](https://github.com/KvrocksLabs/kvrocks)\\n\\n[4] [https://github.com/facebook/rocksdb](https://github.com/facebook/rocksdb)\\n\\n[5] [https://github.com/tikv/titan](https://github.com/tikv/titan)"},{"id":"intro-opensource-kvrocks","metadata":{"permalink":"/intro-opensource-kvrocks","source":"@site/blog/2021-06-16-intro-opensource-kvrocks.md","title":"Kvrocks \u4e00\u6b3e\u5f00\u6e90\u7684\u4f01\u4e1a\u7ea7\u78c1\u76d8KV\u5b58\u50a8\u670d\u52a1","description":"Kvrocks \u662f\u57fa\u4e8e RocksDB \u4e4b\u4e0a\u517c\u5bb9 Redis \u534f\u8bae\u7684 NoSQL \u5b58\u50a8\u670d\u52a1\uff0c\u8bbe\u8ba1\u76ee\u6807\u662f\u63d0\u4f9b\u4e00\u4e2a\u4f4e\u6210\u672c\u4ee5\u53ca\u5927\u5bb9\u91cf\u7684 Redis \u670d\u52a1\uff0c\u4f5c\u4e3a Redis \u5728\u5927\u6570\u636e\u91cf\u573a\u666f\u7684\u4e92\u8865\u670d\u52a1\uff0c\u9009\u62e9\u517c\u5bb9 Redis \u534f\u8bae\u662f\u56e0\u4e3a\u7b80\u5355\u6613\u7528\u4e14\u4e1a\u52a1\u8fc1\u79fb\u6210\u672c\u4f4e\u3002\u76ee\u524d\u7ebf\u4e0a\u4f7f\u7528\u7684\u516c\u53f8\u5305\u542b:  \u7f8e\u56fe\u3001\u643a\u7a0b\u3001\u767e\u5ea6\u4ee5\u53ca\u767d\u5c71\u4e91\u7b49\uff0c\u5728\u7ebf\u4e0a\u7ecf\u8fc7\u4e24\u5e74\u591a\u5927\u89c4\u6a21\u5b9e\u4f8b\u7684\u9a8c\u8bc1\u3002","date":"2021-06-16T00:00:00.000Z","formattedDate":"June 16, 2021","tags":[{"label":"Redis","permalink":"/tags/redis"},{"label":"SSD","permalink":"/tags/ssd"},{"label":"Storage","permalink":"/tags/storage"}],"readingTime":15.58,"truncated":true,"authors":[],"frontMatter":{"title":"Kvrocks \u4e00\u6b3e\u5f00\u6e90\u7684\u4f01\u4e1a\u7ea7\u78c1\u76d8KV\u5b58\u50a8\u670d\u52a1","slug":"intro-opensource-kvrocks","tags":["Redis","SSD","Storage"]},"prevItem":{"title":"\u5982\u4f55\u57fa\u4e8e\u78c1\u76d8 KV \u5b9e\u73b0 Bitmap","permalink":"/posts-how-to-impl-bitmap-on-disk-kv"},"nextItem":{"title":"php-memcached \u7684\u4e00\u4e9b\u5751","permalink":"/posts-holes-in-php-memcached"}},"content":"Kvrocks \u662f\u57fa\u4e8e RocksDB \u4e4b\u4e0a\u517c\u5bb9 Redis \u534f\u8bae\u7684 NoSQL \u5b58\u50a8\u670d\u52a1\uff0c\u8bbe\u8ba1\u76ee\u6807\u662f\u63d0\u4f9b\u4e00\u4e2a\u4f4e\u6210\u672c\u4ee5\u53ca\u5927\u5bb9\u91cf\u7684 Redis \u670d\u52a1\uff0c\u4f5c\u4e3a Redis \u5728\u5927\u6570\u636e\u91cf\u573a\u666f\u7684\u4e92\u8865\u670d\u52a1\uff0c\u9009\u62e9\u517c\u5bb9 Redis \u534f\u8bae\u662f\u56e0\u4e3a\u7b80\u5355\u6613\u7528\u4e14\u4e1a\u52a1\u8fc1\u79fb\u6210\u672c\u4f4e\u3002\u76ee\u524d\u7ebf\u4e0a\u4f7f\u7528\u7684\u516c\u53f8\u5305\u542b:  \u7f8e\u56fe\u3001\u643a\u7a0b\u3001\u767e\u5ea6\u4ee5\u53ca\u767d\u5c71\u4e91\u7b49\uff0c\u5728\u7ebf\u4e0a\u7ecf\u8fc7\u4e24\u5e74\u591a\u5927\u89c4\u6a21\u5b9e\u4f8b\u7684\u9a8c\u8bc1\u3002\\n\\n\u9879\u76ee\u6838\u5fc3\u529f\u80fd\u5305\u542b:\\n\\n- \u517c\u5bb9 Redis \u534f\u8bae\\n- \u652f\u6301\u4e3b\u4ece\u590d\u5236\\n- \u652f\u6301\u901a\u8fc7 Namespace \u9694\u79bb\u4e0d\u540c\u4e1a\u52a1\u7684\u6570\u636e\\n- \u9ad8\u53ef\u7528\uff0c\u652f\u6301 Redis Sentinel \u81ea\u52a8\u4e3b\u4ece\u5207\u6362\\n- \u96c6\u7fa4\u6a21\u5f0f (\u8fdb\u884c\u4e2d\uff0c\u9884\u8ba1\u5728 7-8 \u6708\u4efd\u5b8c\u6210)\\n\\nGitHub\u5730\u5740\uff1a[https://github.com/bitleak/kvrocks](https://github.com/bitleak/kvrocks)\\n\\n\x3c!--truncate--\x3e\\n\\n## \u5b9e\u73b0\u65b9\u6848\u5bf9\u6bd4\\n\\n\u9664\u4e86 Kvrocks \u4e4b\u5916\uff0c\u793e\u533a\u4e5f\u6709\u4e00\u4e9b\u7c7b\u4f3c\u7684\u57fa\u4e8e\u78c1\u76d8\u5b58\u50a8\u517c\u5bb9 Redis \u534f\u8bae\u7684\u5f00\u6e90\u4ea7\u54c1\uff0c\u4ece\u5b58\u50a8\u8bbe\u8ba1\u6765\u770b\u53ef\u4ee5\u5206\u4e3a\u51e0\u7c7b:\\n\\n1. \u57fa\u4e8e\u78c1\u76d8 KV \u5b58\u50a8\u5f15\u64ce(\u6bd4\u5982 RocksDB/LevelDB) \u5b9e\u73b0 Redis \u534f\u8bae\\n2. \u57fa\u4e8e Redis \u5b58\u50a8\u4e4b\u4e0a\u5c06\u51b7\u6570\u636e\u4ea4\u6362\u5230\u78c1\u76d8(\u7c7b\u4f3c\u65e9\u671f Redis VM \u7684\u65b9\u6848)\\n3. \u57fa\u4e8e\u5206\u5e03\u5f0f KV(\u6bd4\u5982 TiKV) \u5b9e\u73b0 Redis \u534f\u8bae\u4ee3\u7406\uff0c\u672c\u5730\u4e0d\u505a\u5b58\u50a8\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/disk-kv-compare.png)\\n\\n**\u65b9\u6848 1:** \u662f\u57fa\u4e8e\u78c1\u76d8 KV \u4e4b\u4e0a\u517c\u5bb9 Redis \u534f\u8bae\uff0c\u7edd\u5927\u591a\u6570\u7684\u672c\u5730\u78c1\u76d8 KV \u53ea\u63d0\u4f9b\u6700\u7b80\u5355\u7684 Get/Set/Delete \u65b9\u6cd5\uff0c\u5bf9\u4e8e Hash/Set/ZSet/List/Bitmap \u7b49\u6570\u636e\u7ed3\u6784\u9700\u8981\u57fa\u4e8e\u78c1\u76d8 KV \u4e4b\u4e0a\u53bb\u5b9e\u73b0\u3002\u4f18\u70b9\u662f\u53ef\u4ee5\u89c4\u907f\u4e0b\u9762\u65b9\u6848 2 \u91cc\u63d0\u5230\u7684\u5927 Key \u95ee\u9898\uff0c\u7f3a\u70b9\u662f\u5b9e\u73b0\u5de5\u4f5c\u91cf\u5927\u4e00\u4e9b\u3002\\n\\n**\u65b9\u6848 2:** \u57fa\u4e8e Redis \u628a\u51b7\u6570\u636e\u4ea4\u6362\u78c1\u76d8\u662f\u4ee5 Key \u4f5c\u4e3a\u6700\u5c0f\u5355\u5143\uff0c\u5728\u5927 Key \u7684\u573a\u666f\u4e0b\u4f1a\u6709\u6bd4\u8f83\u5927\u7684\u6311\u6218\u3002\u4ea4\u6362\u5927 Key \u5230\u78c1\u76d8\u4f1a\u6709\u4e25\u91cd\u8bfb\u5199\u653e\u5927\uff0c\u5982\u679c\u662f\u8bfb\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6574\u4e2a\u670d\u52a1\u4e0d\u53ef\u7528\uff0c\u6240\u4ee5\u8fd9\u79cd\u5b9e\u73b0\u53ea\u80fd\u9650\u5236 Value \u5927\u5c0f\uff0c\u4f18\u70b9\u5728\u4e8e\u5b9e\u73b0\u7b80\u5355\u4e14\u53ef\u6309\u7167 Key \u7ef4\u5ea6\u6765\u505a\u51b7\u70ed\u6570\u636e\u5206\u79bb\u3002\\n\\n**\u65b9\u6848 3:** \u662f\u57fa\u4e8e\u5206\u5e03\u5f0f KV \u4e4b\u4e0a\u5b9e\u73b0 Redis \u534f\u8bae\uff0c\u6700\u5927\u7684\u533a\u522b\u5728\u4e8e\u6240\u4ee5\u7684\u64cd\u4f5c\u90fd\u662f\u901a\u8fc7\u7f51\u7edc\u3002\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u6700\u5927\u4f18\u70b9\u662f\u53ea\u9700\u8981\u5b9e\u73b0 Redis \u534f\u8bae\u7684\u90e8\u5206\uff0c\u670d\u52a1\u672c\u8eab\u662f\u65e0\u72b6\u6001\u7684\uff0c\u65e0\u987b\u8003\u8651\u6570\u636e\u590d\u5236\u4ee5\u53ca\u6269\u5c55\u6027\u7684\u95ee\u9898\u3002\u7f3a\u70b9\u4e5f\u6bd4\u8f83\u660e\u663e\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u547d\u4ee4\u90fd\u662f\u901a\u8fc7\u7f51\u7edc IO\uff0c\u5bf9\u4e8e\u975e String \u7c7b\u578b\u7684\u8bfb\u5199\u4e00\u822c\u90fd\u662f\u9700\u8981\u591a\u6b21\u7f51\u7edc IO \u4e14\u9700\u8981\u901a\u8fc7\u4e8b\u52a1\u6765\u4fdd\u8bc1\u539f\u5b50\uff0c\u4ece\u800c\u5728\u5ef6\u65f6\u548c\u6027\u80fd\u4e0a\u90fd\u4f1a\u6bd4\u65b9\u6848 1 \u548c 2 \u5dee\u4e0d\u5c11\u3002\\n\\n**Kvrocks \u8bbe\u8ba1\u7684\u521d\u8877\u662f\u4f5c\u4e3a Redis \u573a\u666f\u7684\u4e92\u8865\uff0c\u4f4e\u6210\u672c\u3001\u4f4e\u5ef6\u65f6\u548c\u9ad8\u541e\u5410\u662f\u6700\u91cd\u8981\u7684\u8bbe\u8ba1\u76ee\u6807\u3002**\u57fa\u4e8e Redis \u5b9e\u73b0\u51b7\u70ed\u6570\u636e\u4ea4\u6362\u7684\u65b9\u5f0f\u5728\u5927 Key \u573a\u666f\u4e0b\u53ef\u80fd\u5bfc\u81f4\u4e0d\u53ef\u7528\uff0c\u4ece\u800c\u9700\u8981\u9650\u5236\u5355\u4e2a Key \u5927\u5c0f\uff0c\u8fd9\u4e2a\u5bf9\u4e8e\u6211\u4eec\u60f3\u5b9e\u73b0\u4e00\u4e2a\u901a\u7528\u7684 NoSQL \u5b58\u50a8\u670d\u52a1\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\u3002\u800c\u5bf9\u4e8e\u65b9\u6848 3 \u8fd9\u79cd\u8fdc\u7a0b\u5b58\u50a8\u7684\u65b9\u6848\uff0c\u5ef6\u65f6\u548c\u541e\u5410\u4e00\u5b9a\u662f\u65e0\u6cd5\u6ee1\u8db3\u9884\u671f\uff0c\u6240\u4ee5\u6211\u4eec\u6700\u7ec8\u9009\u62e9\u7684\u65b9\u6848 1 \u8fd9\u79cd\u57fa\u4e8e\u78c1\u76d8 KV \u4e4b\u4e0a\u5b9e\u73b0 Redis \u534f\u8bae\u4ee5\u53ca\u590d\u5236\u3002\u9664\u4e86\u6570\u636e\u5b58\u50a8\u65b9\u5f0f\u4e4b\u5916\uff0c Kvrocks \u5e76\u6ca1\u6709\u6dd8\u6c70\u7b56\u7565\uff0c\u6240\u4ee5\u4e00\u822c\u662f\u4f5c\u4e3a\u5b58\u50a8\u670d\u52a1\u800c\u4e0d\u662f\u7f13\u5b58\uff0c\u5f53\u5199\u5165\u7684\u6570\u636e\u91cf\u8fbe\u5230\u5b9e\u4f8b\u6700\u5927\u5bb9\u91cf\u6216\u8005\u78c1\u76d8\u5bb9\u91cf\u4e0d\u8db3\u65f6\u4f1a\u5199\u5165\u5931\u8d25\u3002\\n\\n## \u6027\u80fd\\n\\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u4ee5\u4e0b\u63d0\u4f9b\u7684\u6027\u80fd\u6570\u636e\u662f\u57fa\u4e8e\u7279\u5b9a\u7684\u914d\u7f6e\u8fdb\u884c\u538b\u6d4b\uff0c\u4e0d\u540c\u914d\u7f6e\u4f1a\u6709\u6bd4\u8f83\u5927\u7684\u5dee\u5f02\u3002\u538b\u6d4b\u7684\u786c\u4ef6\u4ee5\u53ca Kvrocks \u914d\u7f6e\u8bf4\u660e\u53ef\u53c2\u8003: [https://github.com/bitleak/kvrocks#performance](https://github.com/bitleak/kvrocks#performance)\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/benchmark.png)\\n\\n\u8fd9\u91cc\u63d0\u4f9b\u6027\u80fd\u6570\u636e\u53ea\u662f\u4e3a\u4e86\u7ed9\u8bfb\u8005\u66f4\u52a0\u76f4\u89c2\u4e86\u89e3 Kvrocks \u7684\u6027\u80fd\u60c5\u51b5\uff0c\u5927\u90e8\u5206\u547d\u4ee4\u7531\u4e8e\u53ef\u591a\u7ebf\u7a0b\u5e76\u884c\u6267\u884c\uff0c\u4ece QPS \u7684\u7ef4\u5ea6\u6765\u770b\u4f1a\u6bd4 Redis \u66f4\u597d\u4e00\u4e9b\uff0c\u4f46\u5ef6\u65f6\u80af\u5b9a\u4f1a\u6bd4 Redis \u7565\u5dee\u3002\\n\\n## \u529f\u80fd\\n\\nKvrocks \u652f\u6301 Redis String\u3001 List\u3001 Hash\u3001Set\u3001 ZSet \u4e94\u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c \u4ee5\u53ca Bitmap\u3001Geo \u548c\u81ea\u5b9a\u4e49\u7684 Sorted Int \u7c7b\u578b\u3002\u5f53\u524d\u652f\u6301\u5927\u591a\u6570\u547d\u4ee4\uff0c\u4e5f\u652f\u6301 Pub/Sub\u3001\u4e8b\u52a1\u4ee5\u53ca\u5907\u4efd\u7b49\u529f\u80fd\u3002\\n\\n\u5177\u4f53\u53ef\u53c2\u8003\uff1a[https://github.com/bitleak/kvrocks/blob/unstable/docs/support-commands.md](https://github.com/bitleak/kvrocks/blob/unstable/docs/support-commands.md)\\n\\n## \u5feb\u901f\u4f53\u9a8c\\n\\n\u53ef\u4ee5\u4f7f\u7528 Docker \u7684\u65b9\u5f0f\u6765\u542f\u52a8 Kvrocks:\\n\\n```bash\\ndocker run -it -p 6666:6666 bitleak/kvrocks\\n```\\n\\n\u63a5\u7740\u53ef\u4ee5\u8ddf\u4f7f\u7528 Redis \u4e00\u6837\u4f7f\u7528:\\n\\n```bash\\n\u279c  ~ redis-cli -p 6666\\n\\n127.0.0.1:6666> set foo bar\\nOK\\n127.0.0.1:6666> get foo\\n\\"bar\\"\\n```\\n\\n## \u6574\u4f53\u8bbe\u8ba1\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/kvrocks-arch.png)\\n\\nKvrocks \u4e3b\u8981\u6709\u4e24\u7c7b\u7ebf\u7a0b:\\n\\n- Worker \u7ebf\u7a0b\uff0c\u4e3b\u8981\u8d1f\u8d23\u6536\u53d1\u8bf7\u6c42\uff0c\u89e3\u6790 Redis \u534f\u8bae\u4ee5\u53ca\u8bf7\u6c42\u8f6c\u4e3a RocksDB \u7684\u8bfb\u5199\\n- \u540e\u53f0\u7ebf\u7a0b\uff0c\u76ee\u524d\u5305\u542b\u4e00\u4e0b\u51e0\u79cd\u540e\u53f0\u7ebf\u7a0b:\\n    - Cron \u7ebf\u7a0b\uff0c\u8d1f\u8d23\u5b9a\u671f\u4efb\u52a1\uff0c\u6bd4\u5982\u81ea\u52a8\u6839\u636e\u5199\u5165 KV \u5927\u5c0f\u8c03\u6574 Block Size\u3001\u6e05\u7406 Backup \u7b49\\n    - Compaction Checker \u7ebf\u7a0b\uff0c\u5982\u679c\u5f00\u542f\u4e86\u589e\u91cf Compaction \u68c0\u67e5\u673a\u5236\uff0c\u90a3\u4e48\u4f1a\u5b9a\u65f6\u68c0\u67e5\u9700\u8981 Compaction \u7684 SST \u6587\u4ef6\\n    - Task Runner \u7ebf\u7a0b\uff0c\u8d1f\u8d23\u5f02\u6b65\u7684\u4efb\u52a1\u6267\u884c\uff0c\u6bd4\u5982\u540e\u53f0\u5168\u91cf Compaction\uff0cKey/Value \u6570\u91cf\u626b\u63cf\\n    - \u4e3b\u4ece\u590d\u5236\u7ebf\u7a0b\uff0c\u6bcf\u4e2a slave \u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7ebf\u7a0b\u7528\u6765\u505a\u589e\u91cf\u540c\u6b65\\n\\n**\u4e0b\u9762\u4ee5 Hash \u4e3a\u4f8b\u6765\u8bf4\u660e Kvrocks \u662f\u5982\u4f55\u5c06\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\u8f6c\u4e3a RocksDB \u5bf9\u5e94\u7684 KV?**\\n\\n\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u5c06 Hash \u6240\u6709\u7684\u5b57\u6bb5\u8fdb\u884c\u5e8f\u5217\u5316\u4e4b\u540e\u5199\u5230\u540c\u4e00\u4e2a Key \u91cc\u9762\uff0c\u6bcf\u6b21\u4fee\u6539\u90fd\u9700\u8981\u5c06\u6574\u4e2a Value \u8bfb\u51fa\u6765\u4e4b\u540e\u4fee\u6539\u518d\u5199\u5165\uff0c\u5f53 Value \u6bd4\u8f83\u5927\u65f6\u4f1a\u5bfc\u81f4\u4e25\u91cd\u7684\u8bfb\u5199\u65b9\u6cd5\u95ee\u9898\u3002\u6240\u4ee5\u6211\u4eec\u53c2\u8003 `blackwidow` \u7684\u5b9e\u73b0\uff0c\u628a Hash \u62c6\u5206\u6210 Metadata \u548c Subkey \u4e24\u4e2a\u90e8\u5206\uff0cHash \u91cc\u9762\u7684\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u662f\u72ec\u7acb\u7684 KV\uff0c\u518d\u4f7f\u7528 Metadata \u6765\u627e\u5230\u8fd9\u4e9b Subkey:\\n\\n```jsx\\n        +----------+------------+-----------+-----------+\\nkey =>  |  flags   |  expire    |  version  |  size     |\\n        | (1byte)  | (4byte)    |  (8byte)  | (8byte)   |\\n        +----------+------------+-----------+-----------+\\n                            (hash metadata)\\n\\n                     +---------------+\\nkey|version|field => |     value     |\\n                     +---------------+\\n              (hash subkey)\\n```\\n\\n\u91cc\u9762\u7684 flags \u76ee\u524d\u662f\u6765\u6807\u8bc6\u5f53\u524d Value \u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u662f Hash/Set/List \u7b49\u3002expire \u662f Key \u7684\u8fc7\u671f\u65f6\u95f4\uff0csize \u662f\u8fd9\u4e2a Key \u5305\u542b\u7684\u5b57\u6bb5\u6570\u91cf\uff0c\u8fd9\u4e24\u4e2a\u6bd4\u8f83\u597d\u7406\u89e3\u3002version \u662f\u5728 Key \u521b\u5efa\u65f6\u81ea\u52a8\u751f\u6210\u7684\u5355\u8c03\u9012\u589e\u7684 id\uff0c\u6bcf\u4e2a Subkey \u524d\u7f00\u4f1a\u5173\u8054\u4e0a version\u3002\u5f53 Metadata \u672c\u5220\u9664\u65f6\uff0c\u8fd9\u4e2a version \u5c31\u65e0\u6cd5\u88ab\u627e\u5230\uff0c\u4e5f\u610f\u5473\u7740\u5173\u8054\u8fd9\u4e2a version \u7684\u5168\u90e8 Subkey \u4e5f\u65e0\u6cd5\u627e\u5230\uff0c\u4ece\u800c\u5b9e\u73b0\u5feb\u901f\u5220\u9664\uff0c\u800c\u8fd9\u4e9b\u65e0\u6cd5\u627e\u5230\u7684 Subkey \u4f1a\u5728\u540e\u53f0 Compact \u7684\u65f6\u5019\u8fdb\u884c\u56de\u6536\u3002\\n\\n\u4ee5 HSET \u547d\u4ee4\u4e3a\u4f8b\uff0c\u4f2a\u4ee3\u7801\u5982\u4e0b:\\n\\n```jsx\\nHSET key, field, value:\\n  // \u5148\u6839\u636e hash key \u627e\u5230\u5bf9\u5e94\u7684 metadata \u5e76\u5224\u65ad\u662f\u5426\u8fc7\u671f\\n  // \u5982\u679c\u4e0d\u5b58\u5728\u6216\u8005\u8fc7\u671f\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 metadata\\n  metadata = rocksdb.Get(key)\\n  if metadata == nil || metadata.Expired() {\\n     metadata = createNewMetadata();\\n  }\\n  // \u6839\u636e metadata \u91cc\u9762\u7684\u7248\u672c\u7ec4\u6210 subkey\\n  subkey = key + metadata.version+field\\n\\tif rocksdb.Get(subkey) == nil {\\n     metadata.size += 1\\n  }\\n  // \u5199\u5165 subkey \u4ee5\u53ca\u66f4\u65b0 metadata\\n\\trocksdb.Set(subkey, value)\\n  rocksdb.Set(key, metadata)\\n```\\n\\n\u66f4\u591a\u7684\u6570\u636e\u7ed3\u6784\u8bbe\u8ba1\u53ef\u4ee5\u53c2\u8003: [https://github.com/bitleak/kvrocks/blob/unstable/docs/metadata-design.md](https://github.com/bitleak/kvrocks/blob/unstable/docs/metadata-design.md)\\n\\n**Kvrocks \u662f\u5982\u4f55\u8fdb\u884c\u6570\u636e\u590d\u5236?**\\n\\nKvocks \u7684\u5b9a\u4f4d\u662f\u4f5c\u4e3a\u5927\u6570\u636e\u91cf\u573a\u666f\u4e0b Redis \u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u63d0\u4f9b\u4e0e Redis \u4e00\u6837\u7684\u6570\u636e\u6700\u7ec8\u4e00\u81f4\u6027\u4fdd\u8bc1\uff0c\u91c7\u7528\u4e86\u7c7b\u4f3c Redis \u7684\u4e3b\u4ece\u5f02\u6b65\u590d\u5236\u6a21\u578b\u3002\u8003\u8651\u5230\u9700\u8981\u5e94\u5bf9\u66f4\u591a\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u540e\u7eed\u4f1a\u652f\u6301\u534a\u540c\u6b65\u590d\u5236\u6a21\u578b\u3002\u5728\u5b9e\u73b0\u4e0a\uff0c\u5168\u91cf\u590d\u5236\u5229\u7528 RocksDB \u7684 CheckPoint \u7279\u6027\uff0c`\u589e\u91cf\u590d\u5236\u91c7\u7528\u76f4\u63a5\u53d1\u9001 WAL \u7684\u65b9\u5f0f\uff0c\u4ece\u5e93\u63a5\u6536\u5230WAL\u76f4\u63a5\u64cd\u4f5c\u540e\u7aef\u5f15\u64ce`\uff0c\u76f8\u6bd4\u4e8e Binlog \u590d\u5236\u65b9\u5f0f\uff08\u56de\u653e\u4ece\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u7684\u547d\u4ee4\uff09\uff0c\u7701\u53bb\u4e86\u547d\u4ee4\u89e3\u6790\u548c\u5904\u7406\u7684\u5f00\u9500\uff0c\u590d\u5236\u901f\u5ea6\u5927\u5e45\u63d0\u5347\uff0c\u8fd9\u6837\u4e5f\u5c31\u89e3\u51b3\u4e86\u5176\u5b83\u91c7\u7528 Binlog \u590d\u5236\u65b9\u5f0f\u7684\u5b58\u50a8\u670d\u52a1\u6240\u5b58\u5728\u7684\u590d\u5236\u5ef6\u8fdf\u95ee\u9898\u3002\\n\\n**Kvrocks \u662f\u5982\u4f55\u5b9e\u73b0\u5206\u5e03\u5f0f\u96c6\u7fa4\uff1f**\\n\\n\u4e1a\u754c\u5e38\u7528Redis\u96c6\u7fa4\u65b9\u6848\u4e3b\u8981\u6709\u4e24\u7c7b\uff1a\u7c7b\u4f3c Codis \u4e2d\u5fc3\u5316\u7684\u96c6\u7fa4\u67b6\u6784\u548c\u793e\u533a Redis Cluster \u53bb\u4e2d\u5fc3\u5316\u7684\u96c6\u7fa4\u67b6\u6784\u3002Kvrocks \u96c6\u7fa4\u65b9\u6848\u9009\u62e9\u4e86\u7c7b\u4f3c Codis \u4e2d\u5fc3\u5316\u7684\u67b6\u6784\uff0c\u96c6\u7fa4\u5143\u6570\u636e\u5b58\u50a8\u5728\u914d\u7f6e\u4e2d\u5fc3\uff0c\u4f46\u4e0d\u4f9d\u8d56\u4ee3\u7406\u5c42\uff0c\u914d\u7f6e\u4e2d\u5fc3\u4e3a\u5b58\u50a8\u8282\u70b9\u63a8\u9001\u5143\u6570\u636e\uff0c`\u5bf9\u5916\u63d0\u4f9b Redis Cluster \u96c6\u7fa4\u534f\u8bae\u652f\u6301\uff0c\u5bf9\u4e8e\u4f7f\u7528 Redis Cluster SDK \u6216\u8005 Proxy \u7684\u7528\u6237\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u4fee\u6539`\u3002\u540c\u65f6\u4e5f\u53ef\u4ee5\u907f\u514d\u7c7b\u4f3cRedis Cluster \u53d7\u9650\u4e8e Gossip \u901a\u4fe1\u7684\u5f00\u9500\u800c\u5bfc\u81f4\u96c6\u7fa4\u89c4\u6a21\u4e0d\u80fd\u592a\u5927\u7684\u95ee\u9898\u3002\u53e6\u5916\uff0c\u5355\u673a\u7248\u7684 Kvrocks \u548c Redis \u4e00\u6837\u53ef\u4ee5\u76f4\u63a5\u652f\u6301 Twmeproxy\uff0c\u901a\u8fc7Sentinel\u5b9e\u73b0\u9ad8\u53ef\u7528\uff0c\u5bf9\u4e8e Codis \u901a\u8fc7\u7b80\u5355\u7684\u9002\u914d\u4e5f\u80fd\u591f\u6bd4\u8f83\u5feb\u7684\u652f\u6301\u3002\u76ee\u524d\u96c6\u7fa4\u65b9\u6848\u5904\u5728\u6d4b\u8bd5\u9636\u6bb5\uff0c\u9884\u8ba17\u6708\u4efd\u53d1\u5e03\uff0c\u5f85\u6b63\u5f0f\u53d1\u5e03\u540e\u4f1a\u7ed9\u5927\u5bb6\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u4e0d\u8fc7\u591a\u5c55\u5f00\u3002\\n\\n**\u5bf9\u4e8e\u5206\u5e03\u5f0f\u96c6\u7fa4\u6765\u8bf4\uff0c\u5f39\u6027\u4f38\u7f29\u7684\u80fd\u529b\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0cKvrocks \u662f\u5982\u4f55\u5b9e\u73b0\u5f39\u6027\u4f38\u7f29\u7684\uff1f**\\n\\n\u6574\u4e2a\u6269\u7f29\u5bb9\u62c6\u5206\u4e3a\u8fc1\u79fb\u5168\u91cf\u6570\u636e\u3001\u8fc1\u79fb\u589e\u91cf\u6570\u636e\u3001\u53d8\u66f4\u62d3\u6251\u4e09\u4e2a\u9636\u6bb5\u3002\u8fc1\u79fb\u5168\u91cf\u6570\u636e\u5229\u7528 RocksDB\u7684 Snapshot \u7279\u6027\uff0c\u751f\u6210 Snapshot \u8fed\u4ee3\u6570\u636e\u53d1\u9001\u5230\u76ee\u6807\u8282\u70b9\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u52a0\u5feb\u8fed\u4ee3\u6548\u7387\u6570\u636e\u7f16\u7801\u4e0aKey \u589e\u52a0 SlotID \u524d\u7f00\u3002\u8fc1\u79fb\u589e\u91cf\u6570\u636e\u9636\u6bb5\u76f4\u63a5\u53d1\u9001 WAL\u3002\u5f53\u5f85\u8fc1\u79fb\u7684\u589e\u91cf WAL \u5c0f\u4e8e\u8bbe\u5b9a\u7684\u9608\u503c\u5219\u5f00\u59cb\u963b\u5199\uff0c\u7b49\u53d1\u9001\u5b8c\u5269\u4f59\u7684 WAL \u5207\u6362\u62d3\u6251\u4e4b\u540e\u89e3\u9664\u963b\u5199\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u901a\u5e38\u662f\u6beb\u79d2\u7ea7\u7684\u3002\\n\\n## \u4f18\u5316\u70b9\\n\\n\u76f8\u6bd4\u5185\u5b58\u578b\u670d\u52a1\u6765\u8bf4\uff0c\u6700\u5e38\u89c1\u7684\u95ee\u9898\u662f\u78c1\u76d8\u7684\u541e\u5410\u548c\u5ef6\u65f6\u5e26\u6765\u7684\u6bdb\u523a\u70b9\u95ee\u9898\u3002\u9664\u4e86\u901a\u8fc7\u6162\u65e5\u5fd7\u547d\u4ee4\u6765\u786e\u8ba4\u662f\u5426\u6709\u6162\u8bf7\u6c42\u4ea7\u751f\u4e4b\u5916\uff0c\u8fd8\u63d0\u4f9b\u4e86 perflog \u547d\u4ee4\u7528\u6765\u5b9a\u4f4d RocksDB \u8bbf\u95ee\u6162\u7684\u95ee\u9898\uff0c\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b:\\n\\n```jsx\\n# \u7b2c\u4e00\u6761\u547d\u4ee4\u8bbe\u5b9a\u53ea\u5bf9 SET \u547d\u4ee4\u6536\u96c6 profiling \u65e5\u5fd7\\n# \u7b2c\u4e8c\u6761\u547d\u4ee4\u8bbe\u5b9a\u968f\u673a\u91c7\u6837\u7684\u6bd4\u4f8b\\n# \u7b2c\u4e09\u6761\u547d\u4ee4\u8bbe\u5b9a\u8d85\u8fc7\u591a\u957f\u65f6\u95f4\u7684\u547d\u4ee4\u624d\u5199\u5230 perf \u65e5\u5fd7\u91cc\u9762(\u5982\u679c\u662f\u4e3a\u4e86\u9a8c\u8bc1\u529f\u80fd\u53ef\u4ee5\u8bbe\u7f6e\u4e3a 0)\\n127.0.0.1:6666> config set profiling-sample-commands set\\nOK\\n127.0.0.1:6666> config set profiling-sample-ratio 100\\nOK\\n127.0.0.1:6666> config set profiling-sample-record-threshold-ms 1\\nOK\\n\\n# \u6267\u884c Set \u547d\u4ee4\uff0c\u5728\u53bb\u770b perflog \u547d\u4ee4\u5c31\u53ef\u4ee5\u770b\u5230\u5bf9\u5e94\u7684\u8017\u65f6\u70b9\\n127.0.0.1:6666> set a 1\\nOK\\n127.0.0.1:6666> perflog get 2\\n1) 1) (integer) 1\\n   2) (integer) 1623123739\\n   3) \\"set\\"\\n   4) (integer) 411\\n   5) \\"user_key_comparison_count = 7, write_wal_time = 122300, write_pre_and_post_process_time = 91867, write_memtable_time = 47349, write_scheduling_flushes_compactions_time = 13028\\"\\n   6) \\"thread_pool_id = 4, bytes_written = 45, write_nanos = 46030, prepare_write_nanos = 21605\\"\\n```\\n\\n\u4e4b\u524d\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u53d1\u73b0\u4e86\u4e00\u4e9b RocksDB \u53c2\u6570\u914d\u7f6e\u4e0d\u5408\u7406\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u4e4b\u524d SST \u6587\u4ef6\u5927\u5c0f\u9ed8\u8ba4\u662f 256MiB\uff0c\u5f53\u4e1a\u52a1\u7684 KV \u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u4e2a SST \u6587\u4ef6\u91cc\u9762\u53ef\u80fd\u6709\u767e\u4e07\u7ea7\u522b\u7684 KV\uff0c\u4ece\u800c\u5bfc\u81f4 index \u6570\u636e\u5757\u8fc7\u5927(\u51e0\u5341 MiB)\uff0c\u6bcf\u6b21\u4ece\u78c1\u76d8\u8bfb\u53d6\u6570\u636e\u9700\u8981\u8017\u8d39\u51e0\u5341 ms\u3002\u4f46\u7ebf\u4e0a\u4e0d\u540c\u4e1a\u52a1\u7684 KV \u5927\u5c0f\u53ef\u80fd\u4f1a\u5dee\u5f02\u6bd4\u8f83\u5927\uff0c\u901a\u8fc7 DBA \u624b\u52a8\u8c03\u6574\u7684\u65b9\u5f0f\u80af\u5b9a\u4e0d\u5408\u7406\uff0c\u6240\u4ee5\u6709\u4e86\u6839\u636e\u5199\u5165 KV \u5927\u5c0f\u5728\u7ebf\u81ea\u52a8\u8c03\u6574 SST \u548c Block Size \u7684\u529f\u80fd\uff0c\u5177\u4f53\u63cf\u8ff0\u89c1: [https://github.com/bitleak/kvrocks/issues/118](https://github.com/bitleak/kvrocks/issues/118)\\n\\n\u53e6\u5916\u4e00\u4e2a\u5c31\u662f RocksDB \u7684\u5168\u91cf Compact \u5bfc\u81f4\u78c1\u76d8 IO \u4ece\u800c\u9020\u6210\u4e1a\u52a1\u8bbf\u95ee\u7684\u6bdb\u523a\u70b9\u95ee\u9898\uff0c\u4e4b\u524d\u7b56\u7565\u662f\u6bcf\u5929\u51cc\u6668\u4f4e\u5cf0\u65f6\u6bb5\u8fdb\u884c\u4e00\u6b21\uff0c\u8fc7\u4e8e\u9891\u7e41\u4f1a\u5bfc\u81f4\u8bbf\u95ee\u6bdb\u523a\u70b9\uff0c\u9891\u7387\u8fc7\u4f4e\u4f1a\u5bfc\u81f4\u78c1\u76d8\u7a7a\u95f4\u56de\u6536\u4e0d\u53ca\u65f6\u3002\u6240\u4ee5\u589e\u52a0\u53e6\u5916\u4e00\u79cd\u90e8\u5206 Compact \u7b56\u7565\uff0c\u4f18\u5148\u5bf9\u90a3\u4e9b\u6bd4\u8f83\u8001\u4ee5\u53ca\u65e0\u6548 KV \u6bd4\u8f83\u591a\u7684 SST\u8fdb\u884c Compact\u3002\u5f00\u542f\u53ea\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u589e\u52a0\u4e00\u884c\uff0c\u90a3\u4e48\u5219\u4f1a\u5728\u51cc\u6668 0 \u5230 7 \u70b9\u4e4b\u95f4\u53bb\u68c0\u67e5\u8fd9\u4e9b SST \u6587\u4ef6\u5e76\u505a Compact\\n\\n```jsx\\ncompaction-checker-range 0-7\\n```\\n\\n## \u603b\u7ed3\\n\\n\u5728\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e0a\uff0cKvrocks \u66f4\u6ce8\u91cd\u7b80\u6d01\u9ad8\u6548\u3001\u7a33\u5b9a\u53ef\u9760\u3001\u6613\u4e8e\u4f7f\u7528\u548c\u95ee\u9898\u5b9a\u4f4d\u3002\u76ee\u524d Kvrocks \u5df2\u7ecf\u5728\u7ebf\u4e0a\u5927\u89c4\u6a21\u8fd0\u884c\u4e24\u5e74\u4e4b\u4e45\uff0c\u57fa\u672c\u529f\u80fd\u5df2\u5145\u5206\u9a8c\u8bc1\uff0c\u5927\u5bb6\u53ef\u4ee5\u653e\u5fc3\u4f7f\u7528\u3002\u5982\u9047\u5230\u95ee\u9898\uff0c\u5927\u5bb6\u53ef\u4ee5\u5728\u5fae\u4fe1\u7fa4\uff0cSlack(\u89c1 GitHub README)\uff0cIssue \u4e0a\u53cd\u9988\u548c\u4ea4\u6d41\uff0c\u6211\u4eec\u4e5f\u6b22\u8fce\u63d0 PR \u6765\u4e00\u8d77\u5b8c\u5584 Kvrocks\u3002\\n\\n\u5728\u793e\u533a\u7ef4\u62a4\u4e0a\uff0c\u5e0c\u671b\u53ef\u4ee5\u6709\u66f4\u52a0\u5f00\u653e\u7684\u4ea4\u6d41\u6c1b\u56f4\uff0c\u800c\u4e0d\u53ea\u662f\u628a\u4ee3\u7801\u653e\u5230 GitHub \u7684\u5f00\u6e90\u3002\u4e0d\u7ba1\u662f\u529f\u80fd\u8bbe\u8ba1\u8fd8\u662f\u4ee3\u7801\u5f00\u53d1\uff0c\u90fd\u4f1a\u5c3d\u91cf\u628a\u76f8\u5173\u7ec6\u8282\u90fd\u5728 GitHub \u91cc\u9762\u516c\u5f00\u53bb\u8ba8\u8bba\u3002\\n\\n\u53e6\u5916\uff0c2.0  \u7248\u672c\u9884\u8ba1\u5728 7-8 \u6708\u4efd\u4f1a\u5b8c\u6210\u5168\u90e8\u529f\u80fd\u7684\u5f00\u53d1\uff0c\u5927\u5bb6\u53ef\u4ee5\u671f\u5f85\u4e00\u4e0b\uff08\u5177\u4f53\u8fdb\u5c55\u89c1:  [https://github.com/bitleak/kvrocks/projects/](https://github.com/bitleak/kvrocks/projects/1)\\n\\n\u6b22\u8fce\u5927\u5bb6\u626b\u7801\u5173\u6ce8 **\u300cKvrocks \u5b98\u65b9\u793e\u533a\u300d**\u516c\u4f17\u53f7\u5e76\u56de\u590d: **\u8fdb\u7fa4**\uff0c\u6765\u52a0\u5165\u6211\u4eec\u7684\u5fae\u4fe1\u7fa4\uff01\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/qrcode.jpg)"},{"id":"posts-holes-in-php-memcached","metadata":{"permalink":"/posts-holes-in-php-memcached","source":"@site/blog/2020-03-17-holes-in-php-memcached.md","title":"php-memcached \u7684\u4e00\u4e9b\u5751","description":"\u7f8e\u56fe PHP \u4e1a\u52a1\u56e2\u961f\u5728\u4f7f\u7528 php-memcached \u6269\u5c55\u9646\u9646\u7eed\u7eed\u9047\u5230\u4e00\u4e9b\u9690\u853d\u7684 \u201d\u5751\u201d\uff0c\u800c\u8fd9\u4e9b\u5751\u5728 php-memcached \u4e5f\u662f\u6bd4\u8f83\u5bb9\u6613\u8e29\u5230\u3002\u5176\u4e2d\u6709\u5982 TCP_NODELAY \u8fd9\u7c7b\u5e38\u89c1\u7684\u5751\uff0c\u4e5f\u6709\u4e00\u4e9b php-memcached \u672c\u8eab\u8bbe\u8ba1\u5e26\u6765\u7684\u95ee\u9898\u3002\u8fd9\u91cc\u5206\u4eab\u51fa\u6765\u5e0c\u671b\u53ef\u4ee5\u7ed9\u9047\u5230\u7c7b\u4f3c\u95ee\u9898\u6216\u8005\u6b63\u5728\u5751\u91cc\u7684\u540c\u5b66\u5e26\u6765\u4e00\u4e9b\u5e2e\u52a9\u3002","date":"2020-03-17T00:00:00.000Z","formattedDate":"March 17, 2020","tags":[{"label":"tcp","permalink":"/tags/tcp"},{"label":"linux","permalink":"/tags/linux"},{"label":"php","permalink":"/tags/php"},{"label":"memcached","permalink":"/tags/memcached"}],"readingTime":6.81,"truncated":true,"authors":[],"frontMatter":{"title":"php-memcached \u7684\u4e00\u4e9b\u5751","slug":"posts-holes-in-php-memcached","tags":["tcp","linux","php","memcached"]},"prevItem":{"title":"Kvrocks \u4e00\u6b3e\u5f00\u6e90\u7684\u4f01\u4e1a\u7ea7\u78c1\u76d8KV\u5b58\u50a8\u670d\u52a1","permalink":"/intro-opensource-kvrocks"},"nextItem":{"title":"tcpkit \u4e00\u4e9b\u6539\u8fdb","permalink":"/posts-tcpkit-improvement"}},"content":"\u7f8e\u56fe PHP \u4e1a\u52a1\u56e2\u961f\u5728\u4f7f\u7528 php-memcached \u6269\u5c55\u9646\u9646\u7eed\u7eed\u9047\u5230\u4e00\u4e9b\u9690\u853d\u7684 \u201d\u5751\u201d\uff0c\u800c\u8fd9\u4e9b\u5751\u5728 php-memcached \u4e5f\u662f\u6bd4\u8f83\u5bb9\u6613\u8e29\u5230\u3002\u5176\u4e2d\u6709\u5982 `TCP_NODELAY` \u8fd9\u7c7b\u5e38\u89c1\u7684\u5751\uff0c\u4e5f\u6709\u4e00\u4e9b php-memcached \u672c\u8eab\u8bbe\u8ba1\u5e26\u6765\u7684\u95ee\u9898\u3002\u8fd9\u91cc\u5206\u4eab\u51fa\u6765\u5e0c\u671b\u53ef\u4ee5\u7ed9\u9047\u5230\u7c7b\u4f3c\u95ee\u9898\u6216\u8005\u6b63\u5728\u5751\u91cc\u7684\u540c\u5b66\u5e26\u6765\u4e00\u4e9b\u5e2e\u52a9\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n### 1.  TCP_NODELAY \u5bfc\u81f4 40ms \u5ef6\u65f6\\n\\n\u5148\u8bf4\u95ee\u9898\uff0cphp-memcached \u5728\u5f00\u542f\u4e8c\u8fdb\u5236\u534f\u8bae\u548c\u672a\u5f00\u542f `TCP_NODELAY`(\u9ed8\u8ba4\u5173\u95ed)\u65f6\u4f1a\u5bfc\u81f4 Get \u547d\u4ee4\u5728 cache miss \u573a\u666f\u4e0b\u7684\u5185\u7f51\u5ef6\u65f6\u4f1a\u5230\u8fbe 40ms \u5de6\u53f3\u3002\u8fd9\u4e2a\u662f\u7531\u4e8e `TCP_NODELAY` \u548c `TCP Delay ACK` \u7684\u7efc\u5408\u6548\u679c\u5e26\u6765\u7684\uff0c\u76f8\u4fe1\u5927\u5bb6\u5e94\u8be5\u591a\u591a\u5c11\u5c11\u90fd\u6709\u9047\u5230\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u4e0b\u9762\u4f1a\u5177\u4f53\u89e3\u91ca\u539f\u56e0\u3002\\n\\n\u91cd\u73b0\u4ee3\u7801\uff1a\\n\\n```php\\n<?php\\n\\n$memc = new Memcached();\\n$memc->addServer(\\"127.0.0.1\\", 11211);\\n$memc->setOption(Memcached::OPT_BINARY_PROTOCOL, true);\\n\\nfor ($i = 0; $i < 2; $i++) {\\n    $start = microtime();\\n    $memc->get(\\"foo\\"); // key `foo` wasn\'t exists\\n    var_dump(microtime()-$start);\\n}\\n```\\n\\n\u4ee3\u7801\u903b\u8f91\u5f00\u542f\u4e86\u4e8c\u8fdb\u5236\u534f\u8bae\u5e76\u4e24\u6b21 `Get` \u4e0d\u5b58\u5728\u7684 key\uff0c\u8f93\u51fa\u5982\u4e0b:\\n\\n```\\nfloat(0.00018799999999997)\\nfloat(0.039426)\\n```\\n\\n\u7b2c\u4e00\u6b21\u7684\u8bf7\u6c42\u7684\u5ef6\u65f6\u662f 0.18 ms \u800c\u7b2c\u4e8c\u6b21\u5219\u662f 40ms\uff0c\u8fd9\u91cc\u6709\u4e24\u4e2a\u95ee\u9898:\\n\\n1. \u4e3a\u4ec0\u4e48\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u9700\u8981 40ms\uff1f\\n2. \u7b2c\u4e00\u6b21\u8bf7\u6c42\u4e3a\u4ec0\u4e48\u6ca1\u6709\u95ee\u9898\uff1f\\n\\n\u6211\u4eec\u4ece\u6570\u636e\u5305\u7684\u89d2\u5ea6\u6765\u5206\u6790\u7b2c\u4e00\u4e2a 40 ms \u7684\u95ee\u9898:\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/holes-in-php-memcached-tcpdump.jpg)\\n\\n\u53ef\u4ee5\u770b\u5230 GET \u547d\u4ee4\u5728 php-memcached \u91cc\u9762\u7684\u9996\u5148\u5e76\u4e0d\u662f\u76f4\u63a5\u53d1\u9001 GET \u547d\u4ee4\uff0c \u800c\u662f\u7531 GetKQ \u548c NOOP \u4e24\u4e2a\u547d\u4ee4\u7ec4\u6210\u3002GetKQ \u548c GET \u7684\u533a\u522b\u662f\u5728 `key` \u4e0d\u5b58\u5728\u65f6\u4e0d\u4f1a\u8fd4\u56de\u6570\u636e\uff0c\u6240\u4ee5\u5ba2\u6237\u7aef\u4f9d\u8d56\u7684 noop \u8bf7\u6c42\u6765\u786e\u5b9a GetKQ \u662f\u5426\u662f cache miss\uff0c\u8fd9\u662f\u56e0\u4e3a memcached \u5904\u7406\u8bf7\u6c42\u5728\u8fde\u63a5\u5185\u662f\u4e32\u884c\u7684\uff0c\u5982\u679c noop \u8bf7\u6c42\u8fd4\u56de\u4e86\u800c GetKQ \u6ca1\u6709\u8fd4\u56de\u5219\u8bf4\u660e\u662f key \u4e0d\u5b58\u5728\u3002\\n\\n\u53e6\u5916\uff0c\u4e0a\u9762\u7684\u7b2c\u4e00\u6761\u548c\u7b2c\u4e8c\u6761\u6570\u636e\u5305\u53ef\u4ee5\u770b\u5230\u7531\u4e8e `TCP Delay ACK` \u673a\u5236\u5bfc\u81f4\u4e86 `GetKQ` \u8bf7\u6c42\u6570\u636e\u5305 ACK \u88ab\u5ef6\u65f6\u4e86 40ms\uff0c\u800c\u521a\u597d `TCP_NODELAY` \u9ed8\u8ba4\u4e0d\u5f00\u542f\uff0c\u89e6\u53d1\u4e86 negla \u7b97\u6cd5\uff08\u56e0\u4e3a\u672a\u53d1\u9001\u6570\u636e\u5305\u672a\u6ee1 MSS \u5927\u5c0f\uff09\u4ece\u800c\u5bfc\u81f4 `NOOP` \u547d\u4ee4\u5ef6\u65f6\u5230 ACK \u56de\u6765\uff0c\u6700\u7ec8\u6574\u4e2a\u8bf7\u6c42\u8017\u65f6\u5230\u8fbe 40 ms\u3002\\n\\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 GetKQ \u548c NOOP \u7ec4\u5408\u8bf7\u6c42\u6765\u66ff\u4ee3 GET \u8bf7\u6c42\uff1f\u4e3b\u8981\u662f\u56e0\u4e3a\u8fd9\u79cd\u65b9\u5f0f\u5728\u5927\u91cf Get Miss \u7684\u573a\u666f\u4e0b\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u6ca1\u7528\u7684 Not Found \u8fd4\u56de\uff0c\u8fd9\u4e2a\u5728 [Memcached Binary Wiki](https://github.com/memcached/memcached/wiki/BinaryProtocolRevamped#get-get-quietly-get-key-get-key-quietly) \u91cc\u9762\u6709\u63d0\u5230\u3002 \u5982\u679c\u5bf9\u4e8e TCP_NODELAY \u548c TCP Delay ACK \u4e0d\u719f\u6089\u7684\u540c\u5b66\u53ef\u4ee5\u53c2\u8003:\\n\\n* [wikipedia: TCP delayed acknowledgment](https://en.wikipedia.org/wiki/TCP_delayed_acknowledgment)\\n\\n* [wikipedia: Nagle\'s algorithm](https://en.wikipedia.org/wiki/Nagle\'s_algorithm)\\n\\n\u63a5\u7740\u53ef\u4ee5\u56de\u8fc7\u5934\u6765\u770b\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u4e2a Get \u8bf7\u6c42\u5ef6\u65f6\u662f\u6b63\u5e38\u7684\u5462\uff1f\u8fd9\u4e2a\u9700\u8981\u4ece TCP ack \u903b\u8f91\u6765\u770b\uff1a\\n\\n```c\\n// \u4ee3\u7801\u6587\u4ef6: net/ipv4/tcp_input.c \\n\\nstatic void tcp_event_data_recv(struct sock *sk, struct sk_buff *skb) {\\n   ... // \u7701\u7565\u903b\u8f91\u4e0d\u76f8\u5173\u4ee3\u7801\\n   if (!icsk->icsk_ack.ato) {\\n        /* \\n         * \u7b2c\u4e00\u6b21\u6536\u5230\u6570\u636e\u5305\u5219\u9a6c\u4e0a\u8fd4\u56de ACK\uff0c\u5e76\u628a ato \u8bbe\u7f6e\u4e3a TCP_ATO_MIN,\\n         * TCP_ATO_MIN \u9ed8\u8ba4\u6700\u5c0f\u503c\u662f 40ms\\n         */\\n        tcp_incr_quickack(sk);\\n        icsk->icsk_ack.ato = TCP_ATO_MIN;\\n    } else {\\n\\t\\t\\t// \u91cd\u65b0\u8ba1\u7b97 ato\\n      ...\\n    }\\n}\\n```\\n\\nTCP \u534f\u8bae\u6808\u5728\u7b2c\u4e00\u4e2a\u6570\u636e\u5305\u5230\u6765\u65f6\u4e0d\u89e6\u53d1 delay ACK \u673a\u5236\u7684\u4e3b\u8981\u539f\u56e0\u662f\u56e0\u4e3a\uff0cTCP \u5728\u521a\u5efa\u7acb\u5b8c\u8fde\u63a5\u4e4b\u540e\u4f1a\u8fdb\u5165 `slow start` \u9636\u6bb5\uff0c`slow start` \u5141\u8bb8\u53d1\u9001\u672a ACK \u7684\u7a97\u53e3\u5927\u5c0f\u53d6\u51b3\u4e8e\u4e4b\u524d\u7684 ACK \u6570\u91cf\uff0c\u6240\u4ee5\u4e3a\u4e86\u907f\u514d slow start \u9636\u6bb5\u8fc7\u6162\uff0c\u7b2c\u4e00\u4e2a\u6570\u636e\u5305\u4e0d\u89e6\u53d1 delay ack \u903b\u8f91\u3002\\n\\n> \u95ee\u9898\u4fee\u590d\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u679c\u5f00\u542f\u4e8c\u8fdb\u5236\u534f\u8bae\u7684\u65f6\u5019\uff0c\u9700\u8981\u624b\u52a8\u628a `TCP_NODELAY` \u4e5f\u5f00\u8d77\u6765\u3002\\n\\n### 2. \u4e0d\u5408\u7406\u7684\u9ed8\u8ba4\u91cd\u8bd5\u7b56\u7565\\n\\n\u5728\u4e00\u6b21\u914d\u5408\u4e1a\u52a1\u5b9a\u4f4d php memcached \u8bfb\u5199\u8d85\u65f6\u4e0d\u7b26\u5408\u9884\u671f\u53d1\u73b0\u4e86 SET \u547d\u4ee4\u5728\u8d85\u65f6\u7684\u573a\u666f\u4e0b\u4f1a\u81ea\u52a8\u8fdb\u884c\u4e24\u6b21\u91cd\u8bd5\uff0c\u540e\u9762\u901a\u8fc7\u4ee3\u7801\u53d1\u73b0 `store_retry_count` \u9ed8\u8ba4\u503c\u4e3a 2\uff0c \u4e5f\u5c31\u662f SET/ SET Multi/ INCR/ DECR \u8fd9\u51e0\u4e2a\u547d\u4ee4\u5728\u5931\u8d25\u7684\u573a\u666f\u4f1a\u81ea\u52a8\u91cd\u8bd5 2 \u6b21\uff0c\u5177\u4f53\u4ee3\u7801\u89c1: `php_memcached.c` \u7684 `s_memc_write_zval` \u51fd\u6570\u5b9e\u73b0\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d34\u4ee3\u7801\u3002\\n\\n\u5bf9\u4e8e\u4e00\u4e2a\u901a\u7528\u7684\u57fa\u7840\u5e93\u6765\u8bf4\uff0c\u8fd9\u79cd\u9690\u5f0f\u7684\u91cd\u8bd5\u7b56\u7565\u5728\u7c7b\u4f3c `incr/decr` \u8fd9\u7c7b\u975e\u5e42\u7b49\u7684\u64cd\u4f5c\u53ef\u80fd\u4f1a\u51fa\u73b0\u9884\u671f\u4e4b\u5916\u7684\u4e0d\u4e00\u81f4\u95ee\u9898\uff0c\u5e94\u8be5\u7559\u7ed9\u7528\u6237\u663e\u793a\u53bb\u8bbe\u7f6e\u91cd\u8bd5\u3002\u8fd9\u5757\u5df2\u7ecf\u63d0\u4e86 PR: [#452](https://github.com/php-memcached-dev/php-memcached/pull/452) \uff0c\u5e94\u8be5\u5728\u4e0b\u4e00\u4e2a release \u7248\u672c\u4f1a\u5408\u5e76\u3002\\n\\n### 3. \u9519\u8bef\u7684\u4ee3\u7801\u59ff\u52bf\u5bfc\u81f4\u957f\u8fde\u63a5\u5931\u6548\\n\\n\u8fd9\u4e2a\u95ee\u9898\u4e5f\u662f\u76f8\u5f53\u7b80\u5355\u4f46\u9690\u853d\uff0cphp-memcached \u7684\u4f9d\u8d56\u5e93 `libmemcached` \u5728\u53cd\u590d\u53bb\u8bbe\u7f6e\u4e00\u4e9b option\uff08\u6bd4\u5982\u8bbe\u7f6e `OPT_BINARY_PROTOCOL`\uff09\uff0c\u5373\u4f7f\u5728 option \u6ca1\u6709\u4fee\u6539\u7684\u573a\u666f\u4e0b\u4e5f\u4f1a\u5bfc\u81f4\u628a\u8001\u8fde\u63a5\u5173\u95ed\u91cd\u8fde\u3002\u7406\u8bba\u4e0a\uff0c\u5982\u679c option \u6ca1\u6709\u7684\u8bdd\u662f\u6ca1\u6709\u5fc5\u8981\u53bb\u5173\u95ed\u8001\u8fde\u63a5\uff0c\u5e94\u8be5\u4ece libmemcached \u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\u3002\u4e0d\u8fc7\uff0clibmemcached \u8fed\u4ee3\u6bd4\u8f83\u6162\uff0c\u4ece\u517c\u5bb9\u6027\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u5728 php-memcached \u91cc\u9762\u4fee\u590d\u4e5f\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u5177\u4f53 PR: [#451](https://github.com/php-memcached-dev/php-memcached/pull/451)\\n\\n\\n\\n## \u603b\u7ed3\\n\\n\u4f5c\u4e3a\u57fa\u7840\u5e93\u6765\u8bf4\uff0c\u51fa\u73b0\u7b2c\u4e8c\u70b9\u63d0\u5230\u9ed8\u8ba4\u91cd\u8bd5\u7b56\u7565\u8fd9\u4e2a\u5751\u5176\u5b9e\u662f\u4e0d\u592a\u5e94\u8be5\u7684\uff0c\u57fa\u7840\u5e93\u53ef\u4ee5\u5b9e\u73b0\u91cd\u8bd5\u529f\u80fd\uff0c\u4f46\u9ed8\u8ba4\u884c\u4e3a\u662f\u4ec0\u4e48\u5e94\u8be5\u8003\u8651\u8bf7\u6c42\u3002`TCP_NODELAY` \u8fd9\u4e2a\u5c5e\u4e8e\u5e38\u89c1\u95ee\u9898(\u5176\u5b9e\u4e5f\u662f `libmemcached` \u5b9e\u73b0\u7684\u95ee\u9898)\uff0c\u4e4b\u524d\u4e5f\u6709\u4eba\u53cd\u9988\u8fc7\uff0cmaintainer \u81ea\u5df1\u4e5f\u5f00\u8fc7\u76f8\u5173 PR \u4fee\u590d\u4f46\u6700\u7ec8\u4e0d\u77e5\u9053\u4ec0\u4e48\u539f\u56e0\u6ca1\u6709\u5408\u5e76\u3002\u7b2c\u4e09\u70b9\u4e5f\u662f `libmemcached` \u7684\u95ee\u9898\uff0c\u4e0d\u8fc7\u4e5f\u9700\u8981\u5728 php-memcached \u505a\u4e00\u4e9b\u7b80\u5355\u7684\u517c\u5bb9\u6027\u4fee\u590d\u3002\u867d\u7136 `php-memcached` \u6709\u4e0d\u5c11\u95ee\u9898\uff0c\u4f46\u6574\u4f53\u5c5e\u4e8e\u7455\u4e0d\u63a9\u745c\u3002"},{"id":"posts-tcpkit-improvement","metadata":{"permalink":"/posts-tcpkit-improvement","source":"@site/blog/2020-03-09-tcpkit-improvement.md","title":"tcpkit \u4e00\u4e9b\u6539\u8fdb","description":"tcpkit \u662f\u652f\u6301\u7528 lua \u811a\u672c\u5206\u6790\u7f51\u7edc\u6570\u636e\u5305\u7684\u5de5\u5177\uff0c\u9644\u5e26\u7b80\u5355\u534f\u8bae\u89e3\u6790(Redis/Memcached)\u548c\u5ef6\u65f6\u7edf\u8ba1\u3002\u6700\u65e9\u5f00\u53d1 tcpkit \u4e3b\u8981\u539f\u56e0\u662f\u7ecf\u5e38\u9700\u8981\u901a\u8fc7\u7f51\u7edc\u5305\u6765\u5206\u6790\u8d44\u6e90\u6162\u8bf7\u6c42\u95ee\u9898\uff0c\u5728\u6570\u636e\u5305\u91cf\u6bd4\u8f83\u5927\u7684\u573a\u666f\u4e0b\u4eba\u8089\u5206\u6790\u4f1a\u6d6a\u8d39\u6bd4\u8f83\u65f6\u95f4\uff0c\u6240\u4ee5\u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7\u7f16\u7801\u7684\u65b9\u5f0f\u6765\u5206\u6790\u8fd9\u7c7b\u95ee\u9898\u3002\u4ece\u5f00\u53d1\u81f3\u4eca\u5df2\u7ecf\u5e2e\u52a9\u6211\u4eec\u56e2\u961f\u4ee5\u53ca\u7f8e\u56fe DBA \u5b9a\u4f4d\u65e0\u6570\u7684\u7ebf\u4e0a\u95ee\u9898\uff0c\u4e4b\u524d\u751a\u81f3\u901a\u8fc7 tcpkit \u627e\u5230\u4e86 BCM \u7f51\u5361\u9a71\u52a8\u5230 kernel \u5076\u53d1\u4ea7\u751f\u51e0\u767e\u6beb\u79d2\u5ef6\u65f6\u95ee\u9898\u3002","date":"2020-03-09T00:00:00.000Z","formattedDate":"March 9, 2020","tags":[{"label":"TCPKIT","permalink":"/tags/tcpkit"},{"label":"TCP","permalink":"/tags/tcp"}],"readingTime":5.77,"truncated":true,"authors":[],"frontMatter":{"title":"tcpkit \u4e00\u4e9b\u6539\u8fdb","slug":"posts-tcpkit-improvement","tags":["TCPKIT","TCP"]},"prevItem":{"title":"php-memcached \u7684\u4e00\u4e9b\u5751","permalink":"/posts-holes-in-php-memcached"},"nextItem":{"title":"\u7f8e\u56fe\u5f00\u6e90\u4efb\u52a1\u961f\u5217 - LMSTFY","permalink":"/posts-meitu-opensource-task-queue"}},"content":"`tcpkit` \u662f\u652f\u6301\u7528 lua \u811a\u672c\u5206\u6790\u7f51\u7edc\u6570\u636e\u5305\u7684\u5de5\u5177\uff0c\u9644\u5e26\u7b80\u5355\u534f\u8bae\u89e3\u6790(Redis/Memcached)\u548c\u5ef6\u65f6\u7edf\u8ba1\u3002\u6700\u65e9\u5f00\u53d1 `tcpkit` \u4e3b\u8981\u539f\u56e0\u662f\u7ecf\u5e38\u9700\u8981\u901a\u8fc7\u7f51\u7edc\u5305\u6765\u5206\u6790\u8d44\u6e90\u6162\u8bf7\u6c42\u95ee\u9898\uff0c\u5728\u6570\u636e\u5305\u91cf\u6bd4\u8f83\u5927\u7684\u573a\u666f\u4e0b\u4eba\u8089\u5206\u6790\u4f1a\u6d6a\u8d39\u6bd4\u8f83\u65f6\u95f4\uff0c\u6240\u4ee5\u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7\u7f16\u7801\u7684\u65b9\u5f0f\u6765\u5206\u6790\u8fd9\u7c7b\u95ee\u9898\u3002\u4ece\u5f00\u53d1\u81f3\u4eca\u5df2\u7ecf\u5e2e\u52a9\u6211\u4eec\u56e2\u961f\u4ee5\u53ca\u7f8e\u56fe DBA \u5b9a\u4f4d\u65e0\u6570\u7684\u7ebf\u4e0a\u95ee\u9898\uff0c\u4e4b\u524d\u751a\u81f3\u901a\u8fc7 `tcpkit` \u627e\u5230\u4e86 BCM \u7f51\u5361\u9a71\u52a8\u5230 kernel \u5076\u53d1\u4ea7\u751f\u51e0\u767e\u6beb\u79d2\u5ef6\u65f6\u95ee\u9898\u3002\\n\\nGithub \u5730\u5740: [https://github.com/git-hulk/tcpkit](https://github.com/git-hulk/tcpkit)\\n\\n\x3c!--truncate--\x3e\\n\\n\u7b2c\u4e00\u4e2a\u7248\u672c\u5b58\u5728\u7684\u4e3b\u8981\u95ee\u9898\u662f\u8fc7\u4e8e\u53c2\u6570\u590d\u6742\u5bfc\u81f4\u4f7f\u7528\u5f88\u4e0d\u53cb\u597d\uff0c\u4f7f\u7528\u8005\u660e\u786e\u544a\u8bc9 `tcpkit` \u5f53\u524d\u662f\u8dd1\u5728\u5ba2\u6237\u7aef\u8fd8\u662f\u8d44\u6e90\u7aef\uff0c\u6700\u8fd1\u60f3\u5230\u901a\u8fc7 `syn` \u5305\u81ea\u52a8\u5206\u6790\u7684\u65b9\u5f0f\uff0c\u5468\u672b\u82b1\u4e86\u4e24\u5929\u65f6\u95f4\u91cd\u65b0\u5b9e\u73b0\u4e86\u4e00\u7248\u3002\u8fd9\u4e2a\u7248\u672c\u53e6\u5916\u4e00\u4e2a\u6539\u8fdb\u70b9\u662f `tcpkit` \u53c2\u6570\u548c `tcpdump` \u57fa\u672c\u4e00\u81f4\uff0c\u53ef\u4ee5\u51cf\u5c11\u4e0a\u624b\u7684\u5b66\u4e60\u6210\u672c\uff0c\u540c\u65f6\u4e5f\u652f\u6301\u4e86\u5206\u6790\u591a\u4e2a\u7aef\u53e3\u7684\u529f\u80fd\u3002\\n\\n\\n\u4e0b\u9762\u4e3b\u8981\u662f `tcpkit` \u4f7f\u7528\u5230\u51e0\u79cd\u573a\u666f:\\n\\n### case 1. \u5982\u4f55\u5206\u6790 Redis/Memcached \u5ef6\u65f6\\n\\n\u901a\u8fc7\u7f51\u7edc\u5305\u6765\u5206\u6790\u8d44\u6e90\u6162\u8bf7\u6c42\u4e00\u822c\u53ea\u4f1a\u7528\u5728\u5076\u53d1\u4e14\u6ca1\u6709\u89c4\u5f8b\u7684\u573a\u666f\uff0c\u5982\u679c\u662f\u5927\u9762\u79ef\u6162\u8bf7\u6c42\u5e94\u8be5\u5148\u901a\u8fc7\u8d44\u6e90\u76d1\u63a7\u6765\u5feb\u901f\u5b9a\u4f4d\u662f\u5426\u5230\u8fbe\u74f6\u9888\u3002\u5bf9\u4e8e\u53ea\u6709\u4e2a\u522b\u4e1a\u52a1\u673a\u5668\u51fa\u73b0\u6162\u8bf7\u6c42\u7684\u573a\u666f\u5219\u4f18\u5148\u53bb\u67e5\u770b\u4e1a\u52a1\u7aef\u95ee\u9898(\u6bd4\u5982\u5bf9\u5e94\u65f6\u523b\u662f\u5426\u6709\u957f\u65f6\u95f4 GC\uff0cphp/python \u8fd9\u7c7b\u5f15\u7528\u8ba1\u6570\u7684\u5c31\u4e0d\u7528\u770b\u4e86)\u3002\u5bf9\u4e8e\u65e0\u89c4\u5f8b\u5076\u53d1\u7684\u573a\u666f\uff0c\u53ef\u4ee5\u628a `tcpkit`  \u540c\u65f6\u8dd1\u5728\u5ba2\u6237\u7aef\u548c\u4e1a\u52a1\u7aef\u8fdb\u884c\u6293\u5305\u5206\u6790\uff0c\u5728\u5ba2\u6237\u7aef\u6267\u884c\u5982\u4e0b\u547d\u4ee4: \\n\\n`sudo tcpkit -i any tcp port 6379 -p redis` \\n\\n\u90a3\u4e48 tcpkit \u4f1a\u76d1\u542c\u7aef\u53e3 `6379` \u7684\u6570\u636e\u5305\u5e76\u4f7f\u7528 Redis \u534f\u8bae\u8fdb\u884c\u89e3\u6790:\\n\\n```\\n2020-03-08 19:23:06.258761 192.168.0.1:51137 => 192.168.0.2:6379 | 1.102 ms | set foo bared\\n```\\n\\n\u610f\u601d\u662f\u4ece\u5ba2\u6237\u7aef\u53d1\u51fa `SET` \u547d\u4ee4\u6570\u636e\u5305\u5230 Redis \u8fd4\u56de\u54cd\u5e94\u603b\u5171\u8017\u65f6 `1.102` ms\uff0c \u8fd9\u4e2a\u5ef6\u65f6\u5305\u542b\u4e86\u5185\u7f51 RTT\u3002\\n\\n\u5982\u679c\u662f\u5728\u8d44\u6e90\u7aef(\u5982 `Redis`)  \u4e5f\u662f\u6267\u884c\u4e0a\u9762\u7684\u547d\u4ee4\uff0c\u4f1a\u8f93\u51fa\u7c7b\u4f3c\u5982\u4e0b\u7684\u6570\u636e\u5305:\\n\\n```\\n2020-03-08 19:23:06.258761 127.0.0.1:51137 => 127.0.0.1:6379 | 0.059 ms | set foo bared\\n```\\n\\n\u610f\u601d\u662f\u4ece\u6536\u5230 `SET` \u547d\u4ee4\u6570\u636e\u5305\u5230\u5904\u7406\u5b8c\u54cd\u5e94\u603b\u5171\u8017\u65f6 `0.059` ms\uff0c \u8fd9\u4e2a\u5ef6\u65f6\u662f\u4e0d\u5305\u542b\u5185\u7f51 RTT\uff0c\u6240\u4ee5\u63a8\u65ad\u5185\u7f51\u7684\u5ef6\u65f6\u5927\u6982\u662f 1ms \u5de6\u53f3\u3002\\n\\n\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762\u662f\u6b63\u5e38\u7684\u8bf7\u6c42\uff0c\u5bf9\u4e8e\u6162\u8bf7\u6c42\u901a\u8fc7\u5bf9\u6bd4\u5ba2\u6237\u7aef\u7684\u5ef6\u65f6\u548c\u8d44\u6e90\u5904\u7406\u65f6\u95f4\uff0c\u5927\u90e8\u5206\u90fd\u53ef\u4ee5\u63a8\u65ad\u6162\u8bf7\u6c42\u5230\u5e95\u662f\u4e1a\u52a1\u7aef\u3001\u670d\u52a1\u7aef\u8fd8\u662f\u4e2d\u95f4\u94fe\u8def\u95ee\u9898\u3002\u53e6\u5916\uff0c\u5728\u5b9a\u4f4d\u95ee\u9898\u7684\u65f6\u5019\u4e00\u822c\u53ea\u5e0c\u671b\u8f93\u51fa\u8017\u65f6\u6bd4\u8f83\u957f\u7684\u8bf7\u6c42\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u52a0\u4e0a `-t` \u53c2\u6570\u6307\u5b9a\u6253\u5370\u5ef6\u65f6\u8d85\u8fc7\u8fd9\u4e2a\u9600\u503c\u7684\u8bf7\u6c42\u3002\\n\\n### case 2.  \u4f5c\u4e3a\u5ef6\u65f6\u7edf\u8ba1\u76d1\u63a7\u5de5\u5177\\n\\n\u9664\u4e86\u4e4b\u5916\u5b9e\u65f6\u5206\u6790\u5de5\u5177\u4e4b\u5916\uff0c`tcpkit` \u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u5e38\u9a7b\u8fdb\u7a0b\u548c\u8d44\u6e90\u90e8\u7f72\u5728\u4e00\u8d77\uff0c\u4f5c\u4e3a\u8d44\u6e90\u5ef6\u65f6\u76d1\u63a7\u7684\u624b\u6bb5\uff0c\u8f93\u51fa\u8d44\u6e90\u7684\u5ef6\u65f6\u5206\u5e03\u60c5(\u9ed8\u8ba4\u76d1\u542c `33333` \u7aef\u53e3)\uff0c\u8f93\u51fa\u662f json \u683c\u5f0f:\\n\\n```json\\n\u279c  ~ telnet 127.0.0.1 33333\\nTrying 127.0.0.1...\\nConnected to localhost.\\nEscape character is \'^]\'.\\n\\n{\\n\\t\\"127.0.0.1:6379\\":\\t{\\n\\t\\t\\"requests\\":\\t1700,\\n\\t\\t\\"request_bytes\\":\\t184100,\\n\\t\\t\\"responses\\":\\t1700,\\n\\t\\t\\"response_bytes\\":\\t1413764,\\n\\t\\t\\"latency\\":\\t[{\\n\\t\\t\\t\\t\\"<0.1ms\\":\\t326\\n\\t\\t\\t}, {\\n\\t\\t\\t\\t\\"0.1ms~0.2ms\\":\\t371\\n\\t\\t\\t}, {\\n\\t\\t\\t\\t\\"0.2~0.5ms\\":\\t589\\n\\t\\t\\t}, {\\n\\t\\t\\t\\t\\"0.5ms~1ms\\":\\t291\\n\\t\\t\\t}, {\\n\\t\\t\\t\\t\\"1ms~5ms\\":\\t123\\n\\t\\t\\t}]\\n\\t}\\n}\\n```\\n\\n### case 3. \u81ea\u5b9a\u4e49\u5206\u6790\u811a\u672c\\n\\n\u9664\u6b64\u4e4b\u5916\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u4e2a\u6027\u5316\u7684\u5206\u6790\u9700\u6c42\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49 `Lua` \u811a\u672c\u6765\u5206\u6790\uff0c`-S` \u7528\u6765\u6307\u5b9a lua \u811a\u672c\u6587\u4ef6\u7684\u4f4d\u7f6e\uff0ctcpkit \u5728\u6570\u636e\u5305\u4ea7\u751f\u65f6\u4f1a\u56de\u8c03\u811a\u672c\u6587\u4ef6\u91cc\u9762\u7684 `process` \u51fd\u6570\uff0c \u4f8b\u5b50\u89c1: [scripts/example.lua](https://github.com/git-hulk/tcpkit/blob/master/scripts/example.lua)\\n\\n```lua\\nfunction process(packet)\\n    if packet.size ~= 0 then -- skip the syn and ack\\n        local time_str = os.date(\'%Y-%m-%d %H:%M:%S\', packet.tv_sec)..\\".\\"..packet.tv_usec\\n        print(string.format(\\"%s %s:%d=>%s:%d %s %u %u %d %u %s\\",\\n            time_str,\\n            packet.sip, -- source ip\\n            packet.sport, -- source port\\n            packet.dip, -- destination ip\\n            packet.dport, -- destination port\\n            type, -- request or response packet\\n            packet.seq, -- sequence number\\n            packet.ack, -- ack number\\n            packet.flags, -- flags, e.g. syn|ack|psh..\\n            packet.size, -- payload size\\n            packet.payload -- payload\\n        ))\\n    end\\nend\\n```\\n\\n\u518d\u6bd4\u5982\u6211\u4eec\u60f3\u770b\u770b TCP \u5efa\u8fde\u8017\u65f6\u4ee5\u53ca\u662f\u5426\u6709 `syn` \u5305\u91cd\u4f20\uff0c\u51e0\u5341\u884c Lua \u811a\u672c\u5c31\u641e\u5b9a\u4e86\uff0c\u89c1\u793a\u4f8b\u4ee3\u7801: [scripts/tcp-connect.lua](https://github.com/git-hulk/tcpkit/blob/master/scripts/tcp-connect.lua)\\n\\n## \u6700\u540e\\n\\ntcpkit \u53ef\u4ee5\u505a\u7684\u8fd8\u6709\u5f88\u591a\uff0c\u6bd4\u5982\u9ed8\u8ba4\u652f\u6301\u66f4\u591a\u534f\u8bae\u5982 gRPC, memcached \u4e8c\u8fdb\u5236\u534f\u8bae\uff0ckafka \u534f\u8bae\u7b49\u7b49\u3002\u56e0\u4e3a\u4f5c\u4e3a `side project` \uff0c\u80fd\u5206\u914d\u7684\u7cbe\u529b\u548c\u65f6\u95f4\u6709\u9650\u4f1a\u63a8\u8fdb\u6162\u4e00\u4e9b\uff0c\u6b22\u8fce\u5927\u5bb6\u591a\u591a\u4f7f\u7528\u548c\u8fd4\u56de\uff0c\u66f4\u52a0\u6b22\u8fce PR \u6216\u8005\u5efa\u8bbe\u6027\u7684\u610f\u89c1\u3002\\n\\nGithub \u5730\u5740: [https://github.com/git-hulk/tcpkit](https://github.com/git-hulk/tcpkit)"},{"id":"posts-meitu-opensource-task-queue","metadata":{"permalink":"/posts-meitu-opensource-task-queue","source":"@site/blog/2019-11-28-meitu-task-queue.md","title":"\u7f8e\u56fe\u5f00\u6e90\u4efb\u52a1\u961f\u5217 - LMSTFY","description":"lmstfy(Let Me Schedule Task For You) \u662f\u7f8e\u56fe\u67b6\u6784\u57fa\u7840\u670d\u52a1\u56e2\u961f\u5728 2018 \u5e74\u521d\u57fa\u4e8e Redis \u5b9e\u73b0\u7684\u7b80\u5355\u4efb\u52a1\u961f\u5217(Task Queue)\u670d\u52a1\uff0c\u76ee\u524d\u5728\u7f8e\u56fe\u591a\u4e2a\u7ebf\u4e0a\u4ea7\u54c1\u4f7f\u7528\u63a5\u8fd1\u4e24\u5e74\u7684\u65f6\u95f4\u3002\u4e3b\u8981\u63d0\u4f9b\u4ee5\u4e0b\u7279\u6027:","date":"2019-11-28T00:00:00.000Z","formattedDate":"November 28, 2019","tags":[{"label":"LMSTFY","permalink":"/tags/lmstfy"},{"label":"Queue","permalink":"/tags/queue"},{"label":"Redis","permalink":"/tags/redis"}],"readingTime":12.66,"truncated":true,"authors":[],"frontMatter":{"layout":"article","title":"\u7f8e\u56fe\u5f00\u6e90\u4efb\u52a1\u961f\u5217 - LMSTFY","slug":"posts-meitu-opensource-task-queue","tags":["LMSTFY","Queue","Redis"]},"prevItem":{"title":"tcpkit \u4e00\u4e9b\u6539\u8fdb","permalink":"/posts-tcpkit-improvement"},"nextItem":{"title":"Redis 6 \u591a\u7ebf\u7a0b IO","permalink":"/posts-redis-thread-io"}},"content":"lmstfy(Let Me Schedule Task For You) \u662f\u7f8e\u56fe\u67b6\u6784\u57fa\u7840\u670d\u52a1\u56e2\u961f\u5728 2018 \u5e74\u521d\u57fa\u4e8e Redis \u5b9e\u73b0\u7684\u7b80\u5355\u4efb\u52a1\u961f\u5217(Task Queue)\u670d\u52a1\uff0c\u76ee\u524d\u5728\u7f8e\u56fe\u591a\u4e2a\u7ebf\u4e0a\u4ea7\u54c1\u4f7f\u7528\u63a5\u8fd1\u4e24\u5e74\u7684\u65f6\u95f4\u3002\u4e3b\u8981\u63d0\u4f9b\u4ee5\u4e0b\u7279\u6027:\\n\\n* \u4efb\u52a1\u5177\u5907\u5ef6\u65f6\u3001\u81ea\u52a8\u91cd\u8bd5\u3001\u4f18\u5148\u7ea7\u4ee5\u53ca\u8fc7\u671f\u7b49\u529f\u80fd\\n* \u901a\u8fc7 HTTP restful API \u63d0\u4f9b\u670d\u52a1\\n* \u5177\u5907\u6a2a\u5411\u6269\u5c55\u80fd\u529b\\n* \u4e30\u5bcc\u7684\u4e1a\u52a1\u548c\u6027\u80fd\u6307\u6807\\n\\nGithub \u9879\u76ee\u5730\u5740: [https://github.com/meitu/lmstfy](https://github.com/meitu/lmstfy)\\n\\n\x3c!--truncate--\x3e\\n\\n## \u4f7f\u7528\u573a\u666f\\n\\n\u4efb\u52a1\u961f\u5217\u8ddf\u6d88\u606f\u961f\u5217\u5728\u4f7f\u7528\u573a\u666f\u4e0a\u6700\u5927\u7684\u533a\u522b\u662f\uff1a \u4efb\u52a1\u4e4b\u95f4\u662f\u6ca1\u6709\u987a\u5e8f\u7ea6\u675f\u800c\u6d88\u606f\u8981\u6c42\u987a\u5e8f(FIFO)\uff0c\u4e14\u53ef\u80fd\u4f1a\u5bf9\u4efb\u52a1\u7684\u72b6\u6001\u66f4\u65b0\u800c\u6d88\u606f\u4e00\u822c\u53ea\u4f1a\u6d88\u8d39\u4e0d\u4f1a\u66f4\u65b0\u3002 \u7c7b\u4f3c Kafka \u5229\u7528\u6d88\u606f FIFO \u548c\u4e0d\u9700\u8981\u66f4\u65b0(\u4e0d\u9700\u8981\u5bf9\u6d88\u606f\u505a\u7d22\u5f15)\u7684\u7279\u6027\u6765\u8bbe\u8ba1\u6d88\u606f\u5b58\u50a8\uff0c\u5c06\u6d88\u606f\u8bfb\u5199\u53d8\u6210\u78c1\u76d8\u7684\u987a\u5e8f\u8bfb\u5199\u6765\u5b9e\u73b0\u6bd4\u8f83\u597d\u7684\u6027\u80fd\u3002\u800c\u4efb\u52a1\u961f\u5217\u9700\u8981\u80fd\u591f\u4efb\u52a1\u72b6\u6001\u8fdb\u884c\u66f4\u65b0\u5219\u9700\u8981\u5bf9\u6bcf\u4e2a\u6d88\u606f\u8fdb\u884c\u7d22\u5f15\uff0c\u6240\u4ee5\u5982\u679c\u628a\u4e24\u8005\u653e\u5230\u4e00\u8d77\u5b9e\u73b0\u5219\u5f88\u96be\u5b9e\u5728\u73b0\u529f\u80fd\u548c\u6027\u80fd\u4e0a\u517c\u5f97\u3002\\n\\n\u6211\u4eec\u5728\u4ee5\u4e0b\u51e0\u79cd\u573a\u666f\u4f1a\u4f7f\u7528\u4efb\u52a1\u961f\u5217:\\n\\n1. \u5b9a\u65f6\u4efb\u52a1\uff0c\u5982\u6bcf\u5929\u65e9\u4e0a 8 \u70b9\u5f00\u59cb\u63a8\u9001\u6d88\u606f\uff0c\u5b9a\u671f\u5220\u9664\u8fc7\u671f\u6570\u636e\u7b49\\n2. \u4efb\u52a1\u6d41\uff0c\u5982\u81ea\u52a8\u521b\u5efa Redis \u6d41\u7a0b\u7531\u8d44\u6e90\u521b\u5efa\uff0c\u8d44\u6e90\u914d\u7f6e\uff0cDNS \u4fee\u6539\u7b49\u90e8\u5206\u7ec4\u6210\uff0c\u4f7f\u7528\u4efb\u52a1\u961f\u5217\u53ef\u4ee5\u7b80\u5316\u6574\u4f53\u7684\u8bbe\u8ba1\u548c\u91cd\u8bd5\u6d41\u7a0b\\n3. \u91cd\u8bd5\u4efb\u52a1\uff0c\u5178\u578b\u573a\u666f\u5982\u79bb\u7ebf\u56fe\u7247\u5904\u7406\\n\\n## \u76ee\u6807\u4e0e\u8c03\u7814\\n\\n\u5728\u81ea\u7814\u4efb\u52a1\u961f\u5217\u4e4b\u524d\uff0c\u6211\u4eec\u57fa\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u8981\u6c42\u4f5c\u4e3a\u7ea6\u675f\u8c03\u7814\u4e86\u73b0\u6709\u4e00\u4e9b\u5f00\u6e90\u65b9\u6848:\\n\\n* \u4efb\u52a1\u652f\u6301\u5ef6\u65f6/\u4f18\u5148\u7ea7\u4efb\u52a1\u548c\u81ea\u52a8\u91cd\u8bd5\\n* \u9ad8\u53ef\u7528\uff0c\u670d\u52a1\u4e0d\u80fd\u6709\u5355\u70b9\u4ee5\u53ca\u4fdd\u8bc1\u6570\u636e\u4e0d\u4e22\u5931\\n* \u53ef\u6269\u5c55\uff0c\u4e3b\u8981\u662f\u5bb9\u91cf\u548c\u6027\u80fd\u9700\u8981\u53ef\u6269\u5c55\\n\\n\u7b2c\u4e00\u79cd\u65b9\u6848\u662f Redis \u4f5c\u8005\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u961f\u5217 (disque)[https://github.com/antirez/disque]\u3002disque \u91c7\u7528\u548c Redis Cluster \u7c7b\u4f3c\u65e0\u4e2d\u5fc3\u8bbe\u8ba1\uff0c\u6240\u6709\u8282\u70b9\u90fd\u53ef\u4ee5\u5199\u5165\u5e76\u590d\u5236\u5230\u5176\u4ed6\u8282\u70b9\u3002\u4e0d\u7ba1\u662f\u4ece\u529f\u80fd\u4e0a\u3001\u8bbe\u8ba1\u8fd8\u662f\u53ef\u9760\u6027\u90fd\u662f\u6bd4\u8f83\u597d\u7684\u9009\u62e9\u3002\u6211\u4eec\u5728 2017 \u5e74\u4e5f\u5f15\u5165 disque \u5728\u90e8\u5206\u4e1a\u52a1\u4f7f\u7528\u8fc7\u4e00\u6bb5\u65f6\u95f4\uff0c\u540e\u9762\u9047\u5230 bug \u5728\u5185\u90e8\u4fee\u590d\u540e\u60f3\u53cd\u9988\u5230\u793e\u533a\uff0c\u53d1\u73b0 Redis \u4f5c\u8005\u51b3\u5b9a\u4e0d\u518d\u7ef4\u62a4\u8fd9\u4e2a\u9879\u76ee(\u8981\u628a disque \u529f\u80fd\u4f5c\u4e3a redis module \u6765\u7ef4\u62a4\uff0c\u5e94\u8be5\u662f\u4f1a\u4f34\u968f Redis 6 \u53d1\u5e03)\u3002\u6700\u7ec8\u6211\u4eec\u4e5f\u653e\u5f03\u4e86 disque \u65b9\u6848\uff0c\u5c06\u6570\u636e\u8fc1\u79fb\u5230\u6211\u4eec\u81ea\u7814\u4efb\u52a1\u961f\u5217\u670d\u52a1\u3002\\n\\n\u7b2c\u4e8c\u79cd\u65b9\u6848\u662f 2007 \u5e74\u5c31\u5f00\u6e90\u7684 (beanstalkd)[https://github.com/beanstalkd/beanstalkd]\uff0c\u73b0\u5728\u4ecd\u7136\u8fd8\u662f\u5728\u7ef4\u62a4\u72b6\u6001\u3002beanstalkd \u662f\u7c7b memcached \u534f\u8bae\u5168\u5185\u5b58\u4efb\u52a1\u961f\u5217\uff0c\u65ad\u7535\u6216\u8005\u91cd\u542f\u65f6\u901a\u8fc7 WAL \u6587\u4ef6\u6765\u6062\u590d\u6570\u636e\u3002\u4f46 benstalkd \u4e0d\u652f\u6301\u590d\u5236\u529f\u80fd\uff0c\u670d\u52a1\u5b58\u5728\u5355\u70b9\u95ee\u9898\u4e14\u6570\u636e\u53ef\u9760\u6027\u4e5f\u65e0\u6cd5\u6ee1\u8db3\u3002\u5f53\u65f6\u4e5f\u6709\u8003\u8651\u57fa\u4e8e beanstalkd \u53bb\u505a\u4e8c\u6b21\u5f00\u53d1\uff0c\u4f46\u770b\u5b8c\u4ee3\u7801\u4e4b\u540e\u89c9\u5f97\u9700\u8981\u6539\u9020\u7684\u70b9\u4e0d\u53ea\u662f\u590d\u5236\uff0c\u8fd8\u6709\u7c7b\u4f3c\u5185\u5b58\u63a7\u5236\u7b49\u7b49\uff0c\u6240\u4ee5\u6ca1\u6709\u9009\u62e9 beanstalkd \u4e8c\u6b21\u5f00\u53d1\u7684\u65b9\u6848\u3002\\n\\n\u4e5f\u8003\u8651\u8fc7\u7c7b\u4f3c\u57fa\u4e8e kafka/rocketmq \u7b49\u6d88\u606f\u961f\u5217\u4f5c\u4e3a\u5b58\u50a8\u7684\u65b9\u6848\uff0c\u6700\u540e\u4ece\u5b58\u50a8\u8bbe\u8ba1\u6a21\u578b\u548c\u56e2\u961f\u6280\u672f\u6808\u7b49\u539f\u56e0\u51b3\u5b9a\u9009\u62e9\u57fa\u4e8e redis \u4f5c\u4e3a\u5b58\u50a8\u6765\u5b9e\u73b0\u4efb\u52a1\u961f\u5217\u7684\u529f\u80fd\u3002\\n\\n## \u8bbe\u8ba1\u548c\u5b9e\u73b0\\n\\n### \u57fa\u7840\u6982\u5ff5\\n\\n* namespace - \u7528\u6765\u9694\u79bb\u4e1a\u52a1\uff0c\u6bcf\u4e2a\u4e1a\u52a1\u662f\u72ec\u7acb\u7684 namespace\\n* queue - \u961f\u5217\u540d\u79f0\uff0c\u7528\u533a\u5206\u540c\u4e00\u4e1a\u52a1\u4e0d\u540c\u6d88\u606f\u7c7b\u578b\\n* job - \u4e1a\u52a1\u5b9a\u4e49\u7684\u4e1a\u52a1\uff0c\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u5c5e\u6027:\\n  * id: \u4efb\u52a1 ID\uff0c\u5168\u5c40\u552f\u4e00\\n  * delay: \u4efb\u52a1\u5ef6\u65f6\u4e0b\u53d1\u65f6\u95f4\uff0c \u5355\u4f4d\u662f\u79d2\\n  * tries: \u4efb\u52a1\u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0ctries = N \u8868\u793a\u4efb\u52a1\u4f1a\u6700\u591a\u4e0b\u53d1 N \u6b21\\n  * ttl(time to live): \u4efb\u52a1\u6700\u957f\u6709\u6548\u671f\uff0c\u8d85\u8fc7\u4e4b\u540e\u4efb\u52a1\u81ea\u52a8\u6d88\u5931\\n  * ttr(time to run): \u4efb\u52a1\u9884\u671f\u6267\u884c\u65f6\u95f4\uff0c\u8d85\u8fc7 ttr \u5219\u8ba4\u4e3a\u4efb\u52a1\u6d88\u8d39\u5931\u8d25\uff0c\u89e6\u53d1\u4efb\u52a1\u81ea\u52a8\u91cd\u8bd5\\n\\n### \u6570\u636e\u5b58\u50a8\\n\\nlmstfy \u7684 redis \u5b58\u50a8\u7531\u56db\u90e8\u5206\u7ec4\u6210:\\n\\n1. timer(sorted set) - \u7528\u6765\u5b9e\u73b0\u5ef6\u8fdf\u4efb\u52a1\u7684\u6392\u5e8f\uff0c\u518d\u7531\u540e\u53f0\u7ebf\u7a0b\u5b9a\u671f\u5c06\u5230\u671f\u7684\u4efb\u52a1\u5199\u5165\u5230 Ready Queue \u91cc\u9762\\n2. ready queue (list) - \u65e0\u5ef6\u65f6\u6216\u8005\u5df2\u5230\u671f\u4efb\u52a1\u7684\u961f\u5217\\n3. deadletter (list) - \u6d88\u8d39\u5931\u8d25(\u91cd\u8bd5\u6b21\u6570\u5230\u8fbe\u4e0a\u9650)\u7684\u4efb\u52a1\uff0c\u53ef\u4ee5\u624b\u52a8\u91cd\u65b0\u653e\u56de\u961f\u5217\\n4. job pool(string) - \u5b58\u50a8\u6d88\u606f\u5185\u5bb9\u7684\u6c60\u5b50\\n\\n\u652f\u6301\u5ef6\u8fdf\u7684\u4efb\u52a1\u961f\u5217\u672c\u8d28\u4e0a\u662f\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u7ed3\u5408: FIFO \u548c sorted set\u3002sorted set \u7528\u6765\u5b9e\u73b0\u5ef6\u65f6\u7684\u90e8\u5206\uff0c\u5c06\u4efb\u52a1\u6309\u7167\u5230\u671f\u65f6\u95f4\u6233\u5347\u5e8f\u5b58\u50a8\uff0c\u7136\u540e\u5b9a\u671f\u5c06\u5230\u671f\u7684\u4efb\u52a1\u8fc1\u79fb\u81f3 FIFO(ready queue)\u3002\u4efb\u52a1\u7684\u5177\u4f53\u5185\u5bb9\u53ea\u4f1a\u5b58\u50a8\u4e00\u4efd\u5728 job pool \u91cc\u9762\uff0c\u5176\u4ed6\u7684\u50cf ready queue\uff0ctimer\uff0cdeadletter \u53ea\u662f\u5b58\u50a8 job id\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u4e00\u4e9b\u5185\u5b58\u7a7a\u95f4\u3002\\n\\n\u4ee5\u4e0b\u662f\u6574\u4f53\u8bbe\u8ba1:\\n\\n![img](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/lmstfy-arch.png)\\n\\n### \u4efb\u52a1\u5199\u5165\\n\\n\u4efb\u52a1\u5728\u5199\u5165\u65f6\u4f1a\u5148\u4ea7\u751f\u4e00\u4e2a job id\uff0c\u76ee\u524d job id (16bytes) \u5305\u542b\u5199\u5165\u65f6\u95f4\u6233\u3001 \u968f\u673a\u6570\u548c\u5ef6\u8fdf\u79d2\u6570\uff0c \u7136\u540e\u5199\u5165 key \u4e3a `j:{namespace}/{queue}/{ID}` \u7684\u4efb\u52a1\u5230\u4efb\u52a1\u6c60 (pool) \u91cc\u9762\u3002\u4e4b\u540e\u6839\u636e\u5ef6\u65f6\u65f6\u95f4\u6765\u51b3\u5b9a\u8fd9\u4e2a job id \u5e94\u8be5\u5230 ready queue \u8fd8\u662f timer \u91cc\u9762:\\n\\n* delay = 0\uff0c\u8868\u793a\u4e0d\u9700\u8981\u5ef6\u65f6\u5219\u76f4\u63a5\u5199\u5230 ready queue(list)\\n* delay = n(n > 0)\uff0c\u8868\u793a\u9700\u8981\u5ef6\u65f6\uff0c\u5c06\u5ef6\u65f6\u52a0\u4e0a\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4\u4f5c\u4e3a\u7edd\u5bf9\u65f6\u95f4\u6233\u5199\u5230 timer(sorted set)\\n\\ntimer \u7684\u5b9e\u73b0\u662f\u5229\u7528 zset \u6839\u636e\u7edd\u5bf9\u65f6\u95f4\u6233\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u7531\u65c1\u8def\u7ebf\u7a0b\u5b9a\u671f\u8f6e\u8be2\u5c06\u5230\u671f\u7684\u4efb\u52a1\u901a\u8fc7 redis lua script \u6765\u5c06\u6570\u636e\u539f\u5b50\u5730\u8f6c\u79fb\u5230 ready queue \u91cc\u9762\u3002\\n\\n### \u4efb\u52a1\u6d88\u8d39\\n\\n\u4e4b\u524d\u63d0\u5230\u4efb\u52a1\u5728\u6d88\u8d39\u5931\u8d25\u4e4b\u540e\u9884\u671f\u80fd\u591f\u91cd\u8bd5\uff0c\u6240\u4ee5\u5fc5\u987b\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u53ef\u8ba4\u4e3a\u4efb\u52a1\u6d88\u8d39\u5931\u8d25\uff1f\u4e1a\u52a1\u5728\u6d88\u8d39\u65f6\u9700\u8981\u643a\u5e26 ttr(time to run) \u53c2\u6570\uff0c\u7528\u6765\u8868\u793a\u4e1a\u52a1\u9884\u671f\u4efb\u52a1\u6700\u957f\u6267\u884c\u65f6\u95f4\uff0c\u5982\u679c\u5728 ttr \u65f6\u95f4\u5185\u6ca1\u6709\u6536\u5230\u4e1a\u52a1\u4e3b\u52a8\u56de\u590d ACK \u6d88\u606f\u5219\u4f1a\u8ba4\u4e3a\u4efb\u52a1\u5931\u8d25(\u7c7b\u4f3c tcp \u7684\u91cd\u4f20 timer)\u3002\\n\\n![img](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/lmstfy-consume.png)\\n\\n\u6d88\u8d39\u65f6\u4ece ready queue \u4e2d (B)RPOP \u51fa\u4efb\u52a1\u7684 job id\uff0c\u7136\u540e\u6839\u636e job id \u4ece pool \u4e2d\u5c06\u4efb\u52a1\u5185\u5bb9\u53d1\u9001\u7ed9\u6d88\u8d39\u8005\u3002\u540c\u65f6\u5bf9 tries \u51cf\u4e00\uff0c\u6839\u636e\u6d88\u8d39\u7684 ttr(time to run) \u53c2\u6570, \u5c06\u4efb\u52a1\u653e\u5165 timer \u4e2d\u3002\u5982\u679c tries \u4e3a\u96f6, \u5728 ttr \u65f6\u95f4\u5230\u671f\u540e\u8be5 job id \u4f1a\u88ab\u653e\u5165 dead letter \u961f\u5217\u4e2d(\u8868\u793a\u4efb\u52a1\u6267\u884c\u5931\u8d25)\u3002\\n\\n### \u540c\u6b65\u4efb\u52a1\u6a21\u578b\\n\\nlmstfy \u9664\u4e86\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u5f02\u6b65\u548c\u5ef6\u65f6\u4efb\u52a1\u6a21\u578b\u4e4b\u5916\uff0c\u56e0\u4e3a namespace \u4e0b\u9762\u7684\u961f\u5217\u662f\u52a8\u6001\u521b\u5efa\u4e14 job id \u5168\u5c40\u552f\u4e00\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u540c\u6b65\u4efb\u52a1\u6a21\u578b (producer \u7b49\u5230\u4efb\u52a1\u6267\u884c\u6210\u529f\u4e4b\u540e\u8fd4\u56de)\u3002\u5927\u6982\u5982\u4e0b:\\n\\n1. producer \u5199\u5165\u4efb\u52a1\u4e4b\u540e\u62ff\u5230 job id, \u7136\u540e\u76d1\u542c(consume)\u4ee5 job id \u4e3a\u540d\u7684\u961f\u5217\\n2. consumer \u6d88\u8d39\u4efb\u52a1\u6210\u529f\u540e\uff0c\u5199\u56de\u590d\u6d88\u606f\u5230\u540c\u6837\u4ee5 job id \u4e3a\u540d\u7684\u961f\u5217\u4e2d\\n3. producer \u5982\u679c\u89c4\u5b9a\u65f6\u95f4\u5185\u80fd\u8bfb\u5230\u56de\u590d\u6d88\u606f\u5219\u8ba4\u4e3a\u6d88\u8d39\u6210\u529f\uff0c\u7b49\u5f85\u8d85\u65f6\u5219\u8ba4\u4e3a\u4efb\u52a1\u5931\u8d25\\n\\n### \u5982\u4f55\u5b9e\u73b0\u6a2a\u5411\u6269\u5c55\\n\\nlmstfy \u672c\u8eab\u662f\u65e0\u72b6\u6001\u7684\u670d\u52a1\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u5b9e\u73b0\u6a2a\u5411\u6269\u5c55\uff0c\u8fd9\u91cc\u7684\u6a2a\u5411\u6269\u5c55\u4e3b\u8981\u662f\u5b58\u50a8(\u76ee\u524d\u53ea\u652f\u6301 Redis)\u7684\u6a2a\u5411\u6269\u5c55\u3002\u8bbe\u8ba1\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u4e3b\u8981\u901a\u8fc7\u901a\u8fc7 namespace \u5bf9\u5e94\u7684 token \u8def\u7531\u6765\u5b9e\u73b0\uff0c \u6bd4\u5982\u6211\u4eec\u5f53\u524d\u914d\u7f6e\u4e24\u7ec4 Redis \u8d44\u6e90: `default` \u548c ` meipai`:\\n\\n````\\n[Pool]\\n[Pool.default]\\nAddr = \\"1.1.1.1:6379\\"\\n[Pool.meipai]\\nAddr = \\"2.2.2.2:6389\\"\\n````\\n\\n\u5728\u521b\u5efa namespace \u65f6\u53ef\u4ee5\u6307\u5b9a\u8d44\u6e90\u6c60\uff0ctoken \u91cc\u9762\u4f1a\u643a\u5e26\u8d44\u6e90\u6c60\u540d\u5b57\u4f5c\u4e3a\u524d\u7f00\u3002\u6bd4\u6307\u5b9a\u7f8e\u62cd\u8d44\u6e90\u6c60\uff0c\u90a3\u4e48 token \u7c7b\u4f3c: `meipai:01DT8EZ1N6XT` \uff0c\u540e\u7eed\u5728\u5904\u7406\u8bf7\u6c42\u65f6\u5c31\u53ef\u4ee5\u6839\u636e token \u91cc\u9762\u643a\u5e26\u7684\u8d44\u6e90\u6c60\u540d\u79f0\u6765\u8fdb\u884c\u8def\u7531\u6570\u636e\u3002\u4e0d\u8fc7\u8fd9\u79cd\u8bbe\u8ba1\u5b9e\u73b0\u961f\u5217\u7ea7\u522b\u7684\u6269\u5c55\uff0c\u5982\u679c\u5355\u961f\u5217\u5b58\u50a8\u6d88\u606f\u91cf\u8d85\u8fc7 Redis \u5185\u5b58\u4e0a\u9650\u5219\u9700\u8981\u5176\u4ed6\u624b\u6bb5\u6765\u89e3\u51b3(\u540e\u9762\u4f1a\u652f\u6301\u78c1\u76d8\u7c7b\u578b\u5b58\u50a8)\u3002\\n\\n## \u5982\u4f55\u4f7f\u7528\\n\\n```shell\\n# \u521b\u5efa namespace \u548c token, \u6ce8\u610f\u8fd9\u91cc\u4f7f\u7528\u7ba1\u7406\u7aef\u53e3\\n$ ./scripts/token-cli -c -n test_ns -p default -D \\"test ns apply by @hulk\\" 127.0.0.1:7778\\n\\n{\\n    \\"token\\": \\"01DT9323JACNBQ9JESV80G0000\\"\\n}\\n\\n# \u5199\u5165\u5185\u5bb9\u4e3a value \u7684\u4efb\u52a1\\n$ curl -XPUT -d \\"value\\" -i \\"http://127.0.0.1:7777/api/test_ns/q1?tries=3&delay=1&token=01DT931XGSPKNB7E2XFKPY3ZPB\\"\\n\\n{\\"job_id\\":\\"01DT9323JACNBQ9JESV80G0000\\",\\"msg\\":\\"published\\"}\\n\\n# \u6d88\u8d39\u4efb\u52a1\\n$ curl -i \\"http://127.0.0.1:7777/api/test_ns/q1?ttr=30&timeout=3&&token=01DT931XGSPKNB7E2XFKPY3ZPB\\"\\n\\n{\\"data\\":\\"value\\",\\"elapsed_ms\\":272612,\\"job_id\\":\\"01DT9323JACNBQ9JESV80G0000\\",\\"msg\\":\\"new job\\",\\"namespace\\":\\"test_ns\\",\\"queue\\":\\"q1\\",\\"ttl\\":86127}\\n\\n# ACK \u4efb\u52a1 id\uff0c\u8868\u793a\u6d88\u8d39\u6210\u529f\u4e0d\u518d\u91cd\u65b0\u4e0b\u53d1\u6539\u4efb\u52a1\\ncurl -i -XDELETE \\"http://127.0.0.1:7777/api/test_ns/q1/job/01DT9323JACNBQ9JESV80G0000?token=01DT931XGSPKNB7E2XFKPY3ZPB\\"\\n```\\n\\n\u66f4\u8be6\u7ec6 API \u8bf4\u660e\u89c1\u9879\u76ee [README](https://github.com/meitu/lmstfy/blob/master/README.md)\uff0c\u76ee\u524d\u6211\u4eec\u63d0\u4f9b\u4e86 PHP/Golang \u4e24\u79cd\u8bed\u8a00 SDK\uff0c\u5176\u4ed6\u8bed\u8a00\u53ef\u4ee5\u76f4\u63a5\u57fa\u4e8e HTTP \u5e93\u5c01\u88c5\u5373\u53ef\u3002\\n\\n## \u76d1\u63a7\u6307\u6807\\n\\nlmstfy \u4efb\u52a1\u961f\u5217\u7684\u53e6\u5916\u4e00\u4e2a\u8bbe\u8ba1\u76ee\u6807\u662f\u63d0\u4f9b\u8db3\u591f\u591a\u7684\u76d1\u63a7\u6307\u6807\uff0c\u9664\u4e86\u4f5c\u4e3a\u76d1\u63a7\u62a5\u8b66\u4e4b\u5916\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u7c7b\u4f3c k8s \u7684 scheduler \u63d0\u4f9b\u53cd\u9988\u6307\u6807\uff0c\u4ee5\u5f53\u524d\u961f\u5217\u5806\u79ef\u60c5\u51b5\u6307\u5bfc\u7cfb\u7edf\u8fdb\u884c\u52a8\u6001\u7f29\u6269\u5bb9\u3002\\n\\n\u4e1a\u52a1\u6307\u6807:\\n\\n- \u751f\u4ea7\u901f\u5ea6\\n- \u6d88\u8d39\u901f\u5ea6\\n- \u5ef6\u8fdf\u6570\u91cf\\n- \u5806\u79ef\u6570\u91cf (queue size)\\n- \u5931\u8d25\u6570\u91cf (deadletter size)\\n- \u4efb\u52a1\u4ece\u751f\u4ea7\u5230\u88ab\u6d88\u8d39\u7684\u65f6\u95f4\u5206\u5e03 (P50, P95 etc.)\\n\\n\u6027\u80fd\u76f8\u5173\u6307\u6807:\\n- \u751f\u4ea7\u63a5\u53e3\u5ef6\u8fdf (P95)\\n- \u6d88\u8d39\u63a5\u53e3\u5ef6\u8fdf (P95)\\n- \u5e76\u53d1\u8fde\u63a5\u6570\\n\\n## \u672a\u6765\u8ba1\u5212\\n\u5728\u6211\u4eec\u5f53\u524d\u7684\u4f7f\u7528\u573a\u666f\u4e0b, \u4e00\u4e2a 2G \u7684 redis \u5b9e\u4f8b\u5c31\u80fd\u591f\u652f\u6491\u5343\u4e07\u7ea7\u5de6\u53f3\u7684\u5ef6\u8fdf\u4efb\u52a1\u91cf\u3002\u4f46\u7c7b\u4f3c\u5bf9\u8c61\u5b58\u50a8\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406(\u5bf9\u8c61\u5b58\u50a8\u7684 TTL)\u8fd9\u79cd\u91cf\u5927\u4e14\u5ef6\u65f6\u95f4\u957f\u7684\u573a\u666f\uff0c\u4f7f\u7528 Redis \u5b58\u50a8\u6210\u672c\u6bd4\u8f83\u9ad8\u3002\u540e\u7eed\u4f1a\u8003\u8651\u57fa\u4e8e\u672c\u5730\u6587\u4ef6\u6216\u8005\u4ee5 kvrocks (\u81ea\u7814\u7684 SSD Redis KV) \u4f5c\u4e3a\u5b58\u50a8\uff0c\u5c06\u6570\u636e\u843d\u5230\u78c1\u76d8\u3002kvrocks \u76ee\u524d\u4e5f\u662f\u5f00\u6e90\u72b6\u6001\uff0c\u7f8e\u56fe\u5185\u90e8\u7ebf\u4e0a\u5df2\u7ecf\u90e8\u7f72\u63a5\u8fd1 100 \u4e2a\u5b9e\u4f8b\uff0c\u5916\u90e8\u4e5f\u6709\u4e00\u4e9b\u7c7b\u4f3c\u767d\u5c71\u4e91\u7b49\u516c\u53f8\u5728\u4f7f\u7528\uff0c\u540e\u9762\u4e5f\u4f1a\u8f93\u51fa\u76f8\u5173\u8bbe\u8ba1\u548c\u5b9e\u73b0\u6587\u7ae0\u3002\u6b22\u8fce\u5927\u5bb6\u53bb\u5173\u6ce8\u548c\u4f7f\u7528\uff0c\u66f4\u52a0\u6b22\u8fce issue \u548c PR\u3002\\n\\nkvrocks Github \u9879\u76ee\u5730\u5740: [https://github.com/meitu/kvrocks](https://github.com/meitu/kvrocks)\\n\\nlmsty \u7684 Github \u9879\u76ee\u5730\u5740: [https://github.com/meitu/lmstfy](https://github.com/meitu/lmstfy)\\n\\n\u5982\u6709\u66f4\u591a\u6280\u672f\u95ee\u9898\u60f3\u8981\u4ea4\u6d41\u53ef\u4ee5\u53d1\u90ae\u4ef6\u7ed9\u6211: hulk.website@gmail.com"},{"id":"posts-redis-thread-io","metadata":{"permalink":"/posts-redis-thread-io","source":"@site/blog/2019-08-08-redis-thread-io.md","title":"Redis 6 \u591a\u7ebf\u7a0b IO","description":"\u524d\u5929\u665a\u4e0a\u4e0d\u7ecf\u610f\u95f4\u5728 youtube \u4e0a\u9762\u770b\u5230 Redis \u4f5c\u8005 Salvatore \u5728 RedisConf 2019 \u5206\u4eab\uff0c\u5176\u4e2d\u4e00\u6bb5\u5c55\u793a\u4e86 Redis 6 \u5f15\u5165\u7684\u591a\u7ebf\u7a0b IO \u7279\u6027\u5bf9\u6027\u80fd\u63d0\u5347\u81f3\u5c11\u662f\u4e00\u500d\u4ee5\u4e0a\uff0c\u5185\u5fc3\u5f88\u662f\u6fc0\u52a8\uff0c\u8feb\u4e0d\u53ca\u5f85\u5730\u53bb\u770b\u4e86\u4e00\u4e0b\u76f8\u5173\u7684\u4ee3\u7801\u5b9e\u73b0\u3002","date":"2019-08-08T00:00:00.000Z","formattedDate":"August 8, 2019","tags":[{"label":"Redis","permalink":"/tags/redis"}],"readingTime":10.76,"truncated":true,"authors":[],"frontMatter":{"title":"Redis 6 \u591a\u7ebf\u7a0b IO","slug":"posts-redis-thread-io","tags":["Redis"]},"prevItem":{"title":"\u7f8e\u56fe\u5f00\u6e90\u4efb\u52a1\u961f\u5217 - LMSTFY","permalink":"/posts-meitu-opensource-task-queue"},"nextItem":{"title":"\u7f8e\u56fe\u591a\u7ebf\u7a0b twemproxy \u5b9e\u73b0","permalink":"/posts-meitu-opensource-twemproxy"}},"content":"\u524d\u5929\u665a\u4e0a\u4e0d\u7ecf\u610f\u95f4\u5728 youtube \u4e0a\u9762\u770b\u5230 Redis \u4f5c\u8005 `Salvatore` \u5728 [RedisConf 2019 \u5206\u4eab](https://www.youtube.com/watch?v=l7e5ve-ffmI)\uff0c\u5176\u4e2d\u4e00\u6bb5\u5c55\u793a\u4e86 Redis 6 \u5f15\u5165\u7684\u591a\u7ebf\u7a0b IO \u7279\u6027\u5bf9\u6027\u80fd\u63d0\u5347\u81f3\u5c11\u662f\u4e00\u500d\u4ee5\u4e0a\uff0c\u5185\u5fc3\u5f88\u662f\u6fc0\u52a8\uff0c\u8feb\u4e0d\u53ca\u5f85\u5730\u53bb\u770b\u4e86\u4e00\u4e0b\u76f8\u5173\u7684\u4ee3\u7801\u5b9e\u73b0\u3002\\n\\n\u76ee\u524d\u5bf9\u4e8e\u5355\u7ebf\u7a0b Redis \u6765\u8bf4\uff0c\u6027\u80fd\u74f6\u9888\u4e3b\u8981\u5728\u4e8e\u7f51\u7edc\u7684 IO \u6d88\u8017, \u4f18\u5316\u4e3b\u8981\u6709\u4e24\u4e2a\u65b9\u5411:\\n\\n1. \u63d0\u9ad8\u7f51\u7edc IO \u6027\u80fd\uff0c\u5178\u578b\u7684\u5b9e\u73b0\u50cf\u4f7f\u7528 DPDK \u6765\u66ff\u4ee3\u5185\u6838\u7f51\u7edc\u6808\u7684\u65b9\u5f0f\\n2. \u4f7f\u7528\u591a\u7ebf\u7a0b\u5145\u5206\u5229\u7528\u591a\u6838\uff0c\u5178\u578b\u7684\u5b9e\u73b0\u50cf Memcached\\n\\n\x3c!--truncate--\x3e\\n\\n\u534f\u8bae\u6808\u4f18\u5316\u7684\u8fd9\u79cd\u65b9\u5f0f\u8ddf Redis \u5173\u7cfb\u4e0d\u5927\uff0c\u591a\u7ebf\u7a0b\u7279\u6027\u5728\u793e\u533a\u4e5f\u88ab\u53cd\u590d\u63d0\u4e86\u5f88\u4e45\u540e\u7ec8\u4e8e\u5728 Redis 6 \u52a0\u5165\u591a\u7ebf\u7a0b\uff0c`Salvatore` \u5728\u81ea\u5df1\u7684\u535a\u5ba2 [An update about Redis developments in 2019](http://antirez.com/news/126) \u4e5f\u6709\u7b80\u5355\u7684\u8bf4\u660e\u3002\u4f46\u8ddf Memcached \u8fd9\u79cd\u4ece IO \u5904\u7406\u5230\u6570\u636e\u8bbf\u95ee\u591a\u7ebf\u7a0b\u7684\u5b9e\u73b0\u6a21\u5f0f\u6709\u4e9b\u5dee\u5f02\u3002Redis \u7684\u591a\u7ebf\u7a0b\u90e8\u5206\u53ea\u662f\u7528\u6765\u5904\u7406\u7f51\u7edc\u6570\u636e\u7684\u8bfb\u5199\u548c\u534f\u8bae\u89e3\u6790\uff0c\u6267\u884c\u547d\u4ee4\u4ecd\u7136\u662f\u5355\u7ebf\u7a0b\u3002\u4e4b\u6240\u4ee5\u8fd9\u4e48\u8bbe\u8ba1\u662f\u4e0d\u60f3\u56e0\u4e3a\u591a\u7ebf\u7a0b\u800c\u53d8\u5f97\u590d\u6742\uff0c\u9700\u8981\u53bb\u63a7\u5236 key\u3001lua\u3001\u4e8b\u52a1\uff0cLPUSH/LPOP \u7b49\u7b49\u7684\u5e76\u53d1\u95ee\u9898\u3002\u6574\u4f53\u7684\u8bbe\u8ba1\u5927\u4f53\u5982\u4e0b:\\n\\n![img](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/redis-thread-io-arch.png)\\n\\n## \u4ee3\u7801\u5b9e\u73b0\\n\\n\u591a\u7ebf\u7a0b IO \u7684\u8bfb(\u8bf7\u6c42)\u548c\u5199(\u54cd\u5e94)\u5728\u5b9e\u73b0\u6d41\u7a0b\u662f\u4e00\u6837\u7684\uff0c\u53ea\u662f\u6267\u884c\u8bfb\u8fd8\u662f\u5199\u64cd\u4f5c\u7684\u5dee\u5f02\u3002\u540c\u65f6\u8fd9\u4e9b IO \u7ebf\u7a0b\u5728\u540c\u4e00\u65f6\u523b\u5168\u90e8\u662f\u8bfb\u6216\u8005\u5199\uff0c\u4e0d\u4f1a\u90e8\u5206\u8bfb\u6216\u90e8\u5206\u5199\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u4e0b\u9762\u4ee5\u8bfb\u6d41\u7a0b\u4f5c\u4e3a\u4f8b\u5b50\u3002\u5206\u6790\u8fc7\u7a0b\u4e2d\u7684\u4ee3\u7801\u53ea\u662f\u4e3a\u4e86\u8f85\u52a9\u7406\u89e3\uff0c\u6240\u4ee5\u53ea\u4f1a\u8986\u76d6\u6838\u5fc3\u903b\u8f91\u800c\u4e0d\u662f\u5168\u90e8\u7ec6\u8282\u3002\u5982\u679c\u60f3\u5b8c\u5168\u7406\u89e3\u7ec6\u8282\uff0c\u5efa\u8bae\u770b\u5b8c\u4e4b\u540e\u518d\u6b21\u770b\u4e00\u6b21\u6e90\u7801\u5b9e\u73b0\u3002\\n\\n\u52a0\u5165\u591a\u7ebf\u7a0b IO \u4e4b\u540e\uff0c\u6574\u4f53\u7684\u8bfb\u6d41\u7a0b\u5982\u4e0b:\\n\\n1. \u4e3b\u7ebf\u7a0b\u8d1f\u8d23\u63a5\u6536\u5efa\u8fde\u8bf7\u6c42\uff0c\u8bfb\u4e8b\u4ef6\u5230\u6765(\u6536\u5230\u8bf7\u6c42)\u5219\u653e\u5230\u4e00\u4e2a\u5168\u5c40\u7b49\u5f85\u8bfb\u5904\u7406\u961f\u5217\\n2. \u4e3b\u7ebf\u7a0b\u5904\u7406\u5b8c\u8bfb\u4e8b\u4ef6\u4e4b\u540e\uff0c\u901a\u8fc7 RR(Round Robin) \u5c06\u8fd9\u4e9b\u8fde\u63a5\u5206\u914d\u7ed9\u8fd9\u4e9b IO \u7ebf\u7a0b\uff0c\u7136\u540e\u4e3b\u7ebf\u7a0b\u5fd9\u7b49\u5f85(spinlock \u7684\u6548\u679c)\u72b6\u6001\\n3. IO \u7ebf\u7a0b\u5c06\u8bf7\u6c42\u6570\u636e\u8bfb\u53d6\u5e76\u89e3\u6790\u5b8c\u6210(\u8fd9\u91cc\u53ea\u662f\u8bfb\u6570\u636e\u548c\u89e3\u6790\u5e76\u4e0d\u6267\u884c)\\n4. \u4e3b\u7ebf\u7a0b\u6267\u884c\u6240\u6709\u547d\u4ee4\u5e76\u6e05\u7a7a\u6574\u4e2a\u8bf7\u6c42\u7b49\u5f85\u8bfb\u5904\u7406\u961f\u5217(\u6267\u884c\u90e8\u5206\u4e32\u884c)\\n\\n\u4e0a\u9762\u7684\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u5b8c\u5168\u65e0\u9501\u7684\uff0c\u56e0\u4e3a\u5728 IO \u7ebf\u7a0b\u5904\u7406\u7684\u65f6\u4e3b\u7ebf\u7a0b\u4f1a\u7b49\u5f85\u5168\u90e8\u7684 IO \u7ebf\u7a0b\u5b8c\u6210\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0 data race \u7684\u573a\u666f\u3002\\n\\n> \u6ce8\u610f\uff1a\u5982\u679c\u5bf9\u4e8e\u4ee3\u7801\u5b9e\u73b0\u6ca1\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u4e0b\u9762\u5185\u5bb9\uff0c\u5bf9\u4e86\u89e3 Redis \u6027\u80fd\u63d0\u5347\u5e76\u6ca1\u6709\u4f24\u5bb3\u3002\\n\\n\u4e0b\u9762\u7684\u4ee3\u7801\u5206\u6790\u548c\u4e0a\u9762\u6d41\u7a0b\u662f\u5bf9\u5e94\u7684\uff0c\u5f53\u4e3b\u7ebf\u7a0b\u6536\u5230\u8bf7\u6c42\u7684\u65f6\u5019\u4f1a\u56de\u8c03 `network.c` \u91cc\u9762\u7684 `readQueryFromClient` \u51fd\u6570:\\n\\n```c\\nvoid readQueryFromClient(aeEventLoop *el, int fd, void *privdata, int mask) {\\n    /* Check if we want to read from the client later when exiting from\\n     * the event loop. This is the case if threaded I/O is enabled. */\\n    if (postponeClientRead(c)) return;\\n    ...\\n}\\n```\\n\\n`readQueryFromClient` \u4e4b\u524d\u7684\u5b9e\u73b0\u662f\u8d1f\u8d23\u8bfb\u53d6\u548c\u89e3\u6790\u8bf7\u6c42\u5e76\u6267\u884c\u547d\u4ee4\uff0c\u52a0\u5165\u591a\u7ebf\u7a0b IO \u4e4b\u540e\u52a0\u5165\u4e86\u4e0a\u9762\u7684\u8fd9\u884c\u4ee3\u7801\uff0c`postponeClientRead` \u5b9e\u73b0\u5982\u4e0b\uff1a\\n\\n```c\\nint postponeClientRead(client *c) {\\n    if (io_threads_active &&   // \u591a\u7ebf\u7a0b IO \u662f\u5426\u5728\u5f00\u542f\u72b6\u6001\uff0c\u5728\u5f85\u5904\u7406\u8bf7\u6c42\u8f83\u5c11\u65f6\u4f1a\u505c\u6b62 IO \\n    \u591a\u7ebf\u7a0b\\n        server.io_threads_do_reads && // \u8bfb\u662f\u5426\u5f00\u542f\u591a\u7ebf\u7a0b IO\\n        !(c->flags & (CLIENT_MASTER|CLIENT_SLAVE|CLIENT_PENDING_READ)))  // \u4e3b\u4ece\u5e93\u590d\u5236\u8bf7\u6c42\u4e0d\u4f7f\u7528\u591a\u7ebf\u7a0b IO\\n    {\\n        // \u8fde\u63a5\u6807\u8bc6\u4e3a CLIENT_PENDING_READ \u6765\u63a7\u5236\u4e0d\u4f1a\u53cd\u590d\u88ab\u52a0\u961f\u5217,\\n        // \u8fd9\u4e2a\u6807\u8bc6\u4f5c\u7528\u5728\u540e\u9762\u4f1a\u518d\u6b21\u63d0\u5230\\n        c->flags |= CLIENT_PENDING_READ;\\n        // \u8fde\u63a5\u52a0\u5165\u5230\u7b49\u5f85\u8bfb\u5904\u7406\u961f\u5217\\n        listAddNodeHead(server.clients_pending_read,c);\\n        return 1;\\n    } else {\\n        return 0;\\n    }\\n}\\n```\\n\\n`postponeClientRead` \u5224\u65ad\u5982\u679c\u5f00\u542f\u591a\u7ebf\u7a0b IO \u4e14\u4e0d\u662f\u4e3b\u4ece\u590d\u5236\u8fde\u63a5\u7684\u8bdd\u5c31\u653e\u5230\u961f\u5217\u7136\u540e\u8fd4\u56de 1\uff0c\u5728 `readQueryFromClient` \u51fd\u6570\u4f1a\u76f4\u63a5\u8fd4\u56de\u4e0d\u8fdb\u884c\u547d\u4ee4\u89e3\u6790\u548c\u6267\u884c\u3002\u63a5\u7740\u4e3b\u7ebf\u7a0b\u5728\u5904\u7406\u5b8c\u8bfb\u4e8b\u4ef6(\u6ce8\u610f\u662f\u8bfb\u4e8b\u4ef6\u4e0d\u662f\u8bfb\u6570\u636e)\u4e4b\u540e\u5c06\u8fd9\u4e9b\u8fde\u63a5\u901a\u8fc7 RR \u7684\u65b9\u5f0f\u5206\u914d\u7ed9\u8fd9\u4e9b IO \u7ebf\u7a0b:\\n\\n```c\\nint handleClientsWithPendingReadsUsingThreads(void) {\\n  ...\\n    // \u5c06\u7b49\u5f85\u5904\u7406\u961f\u5217\u7684\u8fde\u63a5\u6309\u7167 RR \u7684\u65b9\u5f0f\u5206\u914d\u7ed9\u591a\u4e2a IO \u7ebf\u7a0b\\n    listRewind(server.clients_pending_read,&li);\\n    int item_id = 0;\\n    while((ln = listNext(&li))) {\\n        client *c = listNodeValue(ln);\\n        int target_id = item_id % server.io_threads_num;\\n        listAddNodeTail(io_threads_list[target_id],c);\\n        item_id++;\\n    }\\n    ...\\n    \\n    // \u4e00\u76f4\u5fd9\u7b49\u5f85\u76f4\u5230\u6240\u6709\u7684\u8fde\u63a5\u8bf7\u6c42\u90fd\u88ab IO \u7ebf\u7a0b\u5904\u7406\u5b8c\\n    while(1) {\\n        unsigned long pending = 0;\\n        for (int j = 0; j < server.io_threads_num; j++)\\n            pending += io_threads_pending[j];\\n        if (pending == 0) break;\\n    }\\n```\\n\\n\u4ee3\u7801\u91cc\u9762\u7684 `io_threads_list` \u7528\u6765\u5b58\u50a8\u6bcf\u4e2a IO \u7ebf\u7a0b\u5bf9\u5e94\u9700\u8981\u5904\u7406\u7684\u8fde\u63a5\uff0c\u7136\u540e\u4e3b\u7ebf\u7a0b\u5c06\u8fd9\u4e9b\u8fde\u63a5\u901a\u8fc7 RR \u7684\u65b9\u5f0f\u5206\u914d\u7ed9\u8fd9\u4e9b IO \u7ebf\u7a0b\u540e\u8fdb\u5165\u5fd9\u7b49\u5f85\u72b6\u6001(\u76f8\u5f53\u4e8e\u4e3b\u7ebf\u7a0b blocking \u4f4f)\u3002IO \u5904\u7406\u7ebf\u7a0b\u5165\u53e3\u662f `IOThreadMain` \u51fd\u6570:\\n\\n```c\\nvoid *IOThreadMain(void *myid) {\\n  while(1) {\\n        // \u904d\u5386\u7ebf\u7a0b id \u83b7\u53d6\u7ebf\u7a0b\u5bf9\u5e94\u7684\u5f85\u5904\u7406\u8fde\u63a5\u5217\u8868\\n        listRewind(io_threads_list[id],&li);\\n        while((ln = listNext(&li))) {\\n            client *c = listNodeValue(ln);\\n            // \u901a\u8fc7 io_threads_op \u63a7\u5236\u7ebf\u7a0b\u8981\u5904\u7406\u7684\u662f\u8bfb\u8fd8\u662f\u5199\u8bf7\u6c42\\n            if (io_threads_op == IO_THREADS_OP_WRITE) {\\n                writeToClient(c->fd,c,0);\\n            } else if (io_threads_op == IO_THREADS_OP_READ) {\\n                readQueryFromClient(NULL,c->fd,c,0);\\n            } else {\\n                serverPanic(\\"io_threads_op value is unknown\\");\\n            }\\n        }\\n        listEmpty(io_threads_list[id]);\\n        io_threads_pending[id] = 0;\\n  }\\n}\\n```\\nIO \u7ebf\u7a0b\u5904\u7406\u6839\u636e\u5168\u5c40 `io_threads_op` \u72b6\u6001\u6765\u63a7\u5236\u5f53\u524d IO \u7ebf\u7a0b\u5e94\u8be5\u5904\u7406\u8bfb\u8fd8\u662f\u5199\u4e8b\u4ef6\uff0c\u8fd9\u4e5f\u662f\u4e0a\u9762\u63d0\u5230\u7684\u5168\u90e8 IO \u7ebf\u7a0b\u540c\u4e00\u65f6\u523b\u53ea\u4f1a\u6267\u884c\u8bfb\u6216\u8005\u5199\u3002\u53e6\u5916\uff0c\u5fc3\u7ec6\u7684\u540c\u5b66\u53ef\u80fd\u6ce8\u610f\u5230\u5904\u7406\u7ebf\u7a0b\u4f1a\u8c03\u7528 `readQueryFromClient` \u51fd\u6570\uff0c\u800c\u8fde\u63a5\u5c31\u662f\u7531\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u52a0\u5230\u961f\u5217\u7684\uff0c\u90a3\u4e0d\u5c31\u6b7b\u5faa\u73af\u4e86\uff1f \u8fd9\u4e2a\u7684\u7b54\u6848\u5728 `postponeClientRead` \u51fd\u6570\uff0c\u5df2\u7ecf\u52a0\u5230\u7b49\u5f85\u5904\u7406\u961f\u5217\u7684\u8fde\u63a5\u4f1a\u88ab\u8bbe\u7f6e `CLIENT_PENDING_READ` \u6807\u8bc6\u3002`postponeClientRead` \u51fd\u6570\u4e0d\u4f1a\u628a\u8fde\u63a5\u518d\u6b21\u52a0\u5230\u961f\u5217\uff0c\u90a3\u4e48 `readQueryFromClient` \u4f1a\u7ee7\u7eed\u6267\u884c\u8bfb\u53d6\u548c\u89e3\u6790\u8bf7\u6c42\u3002`readQueryFromClient` \u51fd\u6570\u8bfb\u53d6\u8bf7\u6c42\u6570\u636e\u5e76\u8c03\u7528  `processInputBuffer` \u51fd\u6570\u8fdb\u884c\u89e3\u6790\u547d\u4ee4\uff0c`processInputBuffer` \u4f1a\u5224\u65ad\u5f53\u524d\u8fde\u63a5\u662f\u5426\u6765\u81ea IO \u7ebf\u7a0b\uff0c\u5982\u679c\u662f\u7684\u8bdd\u5c31\u53ea\u89e3\u6790\u4e0d\u6267\u884c\u547d\u4ee4\uff0c\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\u3002\\n\\n\u5927\u5bb6\u53bb\u770b `IOThreadMain` \u5b9e\u73b0\u4f1a\u53d1\u73b0\u8fd9\u4e9b io \u7ebf\u7a0b\u662f\u6ca1\u6709\u4efb\u4f55 sleep \u673a\u5236\uff0c\u5728\u7a7a\u95f2\u72b6\u6001\u4e5f\u4f1a\u5bfc\u81f4\u6bcf\u4e2a\u7ebf\u7a0b\u7684 CPU \u8dd1\u5230 100%\uff0c\u4f46\u7b80\u5355 sleep \u5219\u4f1a\u5bfc\u81f4\u8bfb\u5199\u5904\u7406\u4e0d\u53ca\u65f6\u800c\u5bfc\u81f4\u6027\u80fd\u66f4\u5dee\u3002Redis \u5f53\u524d\u7684\u89e3\u51b3\u65b9\u5f0f\u662f\u901a\u8fc7\u5728\u7b49\u5f85\u5904\u7406\u8fde\u63a5\u6bd4\u8f83\u5c11\u7684\u65f6\u5019\u5173\u95ed\u8fd9\u4e9b IO \u7ebf\u7a0b\u3002\u4e3a\u4ec0\u4e48\u4e0d\u9002\u7528\u6761\u4ef6\u53d8\u91cf\u6765\u63a7\u5236\u5462\uff1f\u6211\u4e5f\u6ca1\u60f3\u660e\u767d\uff0c\u540e\u9762\u53ef\u4ee5\u5230\u793e\u533a\u63d0\u95ee\u3002\\n\\n## \u6027\u80fd\u5bf9\u6bd4\\n\\n### \u538b\u6d4b\u914d\u7f6e:\\n\\n```shell\\nRedis Server: \u963f\u91cc\u4e91 Ubuntu 18.04\uff0c8 CPU 2.5 GHZ, 8G \u5185\u5b58\uff0c\u4e3b\u673a\u578b\u53f7 ecs.ic5.2xlarge\\nRedis Benchmark Client: \u963f\u91cc\u4e91 Ubuntu 18.04\uff0c8 2.5 GHZ CPU, 8G \u5185\u5b58\uff0c\u4e3b\u673a\u578b\u53f7 ecs.ic5.2xlarge\\n```\\n\\n\u591a\u7ebf\u7a0b IO \u7248\u672c\u521a\u5408\u5e76\u5230 `unstable` \u5206\u652f\u4e00\u6bb5\u65f6\u95f4\uff0c\u6240\u4ee5\u53ea\u80fd\u4f7f\u7528 `unstable` \u5206\u652f\u6765\u6d4b\u8bd5\u591a\u7ebf\u7a0b IO\uff0c\u5355\u7ebf\u7a0b\u7248\u672c\u662f Redis 5.0.5\u3002\u591a\u7ebf\u7a0b IO \u7248\u672c\u9700\u8981\u65b0\u589e\u4ee5\u4e0b\u914d\u7f6e:\\n\\n```shell\\nio-threads 4 # \u5f00\u542f 4 \u4e2a IO \u7ebf\u7a0b\\nio-threads-do-reads yes # \u8bf7\u6c42\u89e3\u6790\u4e5f\u662f\u7528 IO \u7ebf\u7a0b\\n```\\n\\n\u538b\u6d4b\u547d\u4ee4: `redis-benchmark -h 192.168.0.49 -a foobared -t set,get -n 1000000 -r 100000000 --threads 4 -d ${datasize} -c 256`\\n\\n![img](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/redis-thread-io-get-benchmark.png)\\n\\n![img](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/redis-thread-io-set-benchmark.png)\\n\\n\u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u5230 GET/SET \u547d\u4ee4\u5728 4 \u7ebf\u7a0b IO \u65f6\u6027\u80fd\u76f8\u6bd4\u5355\u7ebf\u7a0b\u662f\u51e0\u4e4e\u662f\u7ffb\u500d\u4e86\u3002\u53e6\u5916\uff0c\u8fd9\u4e9b\u6570\u636e\u53ea\u662f\u4e3a\u4e86\u7b80\u5355\u9a8c\u8bc1\u591a\u7ebf\u7a0b IO \u662f\u5426\u771f\u6b63\u5e26\u6765\u6027\u80fd\u4f18\u5316\uff0c\u5e76\u6ca1\u6709\u9488\u5bf9\u4e25\u8c28\u7684\u5ef6\u65f6\u63a7\u5236\u548c\u4e0d\u540c\u5e76\u53d1\u7684\u573a\u666f\u8fdb\u884c\u538b\u6d4b\u3002\u6570\u636e\u4ec5\u4f9b\u9a8c\u8bc1\u53c2\u8003\u800c\u4e0d\u80fd\u4f5c\u4e3a\u7ebf\u4e0a\u6307\u6807\uff0c\u4e14\u53ea\u662f\u76ee\u524d\u7684 `unstble` \u5206\u652f\u7684\u6027\u80fd\uff0c\u4e0d\u6392\u9664\u540e\u7eed\u53d1\u5e03\u7684\u6b63\u5f0f\u7248\u672c\u7684\u6027\u80fd\u4f1a\u66f4\u597d\u3002\\n\\n> \u6ce8\u610f: Redis Benchmark \u9664\u4e86 `unstable` \u5206\u652f\u4e4b\u5916\u90fd\u662f\u5355\u7ebf\u7a0b\uff0c\u5bf9\u4e8e\u591a\u7ebf\u7a0b IO \u7248\u672c\u6765\u8bf4\uff0c\u538b\u6d4b\u53d1\u5305\u6027\u80fd\u4f1a\u6210\u4e3a\u74f6\u9888\uff0c\u52a1\u5fc5\u81ea\u5df1\u7f16\u8bd1 `unstable` \u5206\u652f\u7684 redis-benchmark \u6765\u538b\u6d4b\uff0c\u5e76\u914d\u7f6e --threads \u5f00\u542f\u591a\u7ebf\u7a0b\u538b\u6d4b\u3002\u53e6\u5916\uff0c\u5982\u679c\u53d1\u73b0\u7f16\u8bd1\u5931\u8d25\u4e5f\u83ab\u614c\uff0c\u8fd9\u662f\u56e0\u4e3a Redis \u7528\u4e86 Atomic_ \u7279\u6027\uff0c\u66f4\u65b0\u7248\u672c\u7684\u7f16\u8bd1\u5de5\u5177\u624d\u652f\u6301\uff0c\u6bd4\u5982 GCC 5.0 \u4ee5\u4e0a\u7248\u672c\u3002\\n\\n## \u603b\u7ed3\\n\\nRedis 6.0 \u9884\u8ba1\u4f1a\u5728 2019 \u5e74\u5e95\u53d1\u5e03\uff0c\u5c06\u5728\u6027\u80fd\u3001\u534f\u8bae\u4ee5\u53ca\u6743\u9650\u63a7\u5236\u90fd\u4f1a\u6709\u5f88\u5927\u7684\u6539\u8fdb\u3002`Salvatore` \u4eca\u5e74\u5168\u8eab\u5fc3\u6295\u5165\u5728\u4f18\u5316 Redis \u548c\u96c6\u7fa4\u7684\u529f\u80fd\uff0c\u7279\u522b\u503c\u5f97\u671f\u5f85\u3002\u53e6\u5916\uff0c\u4eca\u5e74\u5e74\u5e95\u793e\u533a\u4e5f\u4f1a\u540c\u65f6\u53d1\u5e03\u7b2c\u4e00\u4e2a\u7248\u672c redis cluster proxy \u6765\u89e3\u51b3\u591a\u8bed\u8a00 SDK \u517c\u5bb9\u7684\u95ee\u9898\uff0c\u671f\u5f85\u5728\u5177\u5907 proxy \u529f\u80fd\u4e4b\u540e cluster \u80fd\u5728\u56fd\u5185\u6709\u66f4\u52a0\u5e7f\u6cdb\u7684\u5e94\u7528\u3002"},{"id":"posts-meitu-opensource-twemproxy","metadata":{"permalink":"/posts-meitu-opensource-twemproxy","source":"@site/blog/2018-10-10-meitu-multi-thread-twemproxy.md","title":"\u7f8e\u56fe\u591a\u7ebf\u7a0b twemproxy \u5b9e\u73b0","description":"\u7f8e\u56fe\u5728 2017 \u5e74\u4e0b\u534a\u5e74\u5f00\u59cb\u8ba1\u5212\u505a Redis/Memcached \u8d44\u6e90 PaaS \u5e73\u53f0\uff0c\u800c PaaS \u5316\u4e4b\u540e\u9762\u4e34\u4e00\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u5b9e\u73b0\u8d44\u6e90\u7f29\u5bb9/\u6269\u5bb9\u5bf9\u4e1a\u52a1\u65e0\u611f\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u7f8e\u56fe\u6280\u672f\u56e2\u961f\u4e8e 17 \u5e74 11 \u6708\u5f15\u5165 twemproxy \u4f5c\u4e3a\u8d44\u6e90\u7f51\u5173\u3002","date":"2018-10-10T00:00:00.000Z","formattedDate":"October 10, 2018","tags":[{"label":"Twemproxy","permalink":"/tags/twemproxy"},{"label":"Redis","permalink":"/tags/redis"},{"label":"Memcached","permalink":"/tags/memcached"}],"readingTime":14.33,"truncated":true,"authors":[],"frontMatter":{"title":"\u7f8e\u56fe\u591a\u7ebf\u7a0b twemproxy \u5b9e\u73b0","slug":"posts-meitu-opensource-twemproxy","tags":["Twemproxy","Redis","Memcached"]},"prevItem":{"title":"Redis 6 \u591a\u7ebf\u7a0b IO","permalink":"/posts-redis-thread-io"},"nextItem":{"title":"Redis 4.0 \u975e\u963b\u585e\u5220\u9664","permalink":"/posts-redis-async-delete"}},"content":"\u7f8e\u56fe\u5728 2017 \u5e74\u4e0b\u534a\u5e74\u5f00\u59cb\u8ba1\u5212\u505a Redis/Memcached \u8d44\u6e90 PaaS \u5e73\u53f0\uff0c\u800c PaaS \u5316\u4e4b\u540e\u9762\u4e34\u4e00\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u5b9e\u73b0\u8d44\u6e90\u7f29\u5bb9/\u6269\u5bb9\u5bf9\u4e1a\u52a1\u65e0\u611f\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u7f8e\u56fe\u6280\u672f\u56e2\u961f\u4e8e 17 \u5e74 11 \u6708\u5f15\u5165 twemproxy \u4f5c\u4e3a\u8d44\u6e90\u7f51\u5173\u3002\\n\\n\u4f46\u662f\u957f\u671f\u7684\u5b9e\u8df5\u4e2d\uff0c\u5176\u5f00\u6e90\u7248\u672c\u4e0d\u80fd\u5b8c\u5168\u9002\u5e94\u7f8e\u56fe\u7684\u5b9e\u9645\u60c5\u51b5\uff0c\u5176\u4e3b\u8981\u5b58\u5728\u5355\u7ebf\u7a0b\u6a21\u578b\u65e0\u6cd5\u5229\u7528\u591a\u6838\uff0c\u6027\u80fd\u4e0d\u4f73\uff1b\u914d\u7f6e\u65e0\u6cd5\u5728\u7ebf Reload \uff1bRedis \u4e0d\u652f\u6301\u4e3b\u4ece\u6a21\u5f0f\uff1b\u65e0\u5ef6\u65f6\u6307\u6807\u7b49\u95ee\u9898\uff0c\u6240\u4ee5\u7f8e\u56fe\u6280\u672f\u56e2\u961f\u5bf9\u5176\u8fdb\u884c\u4e86\u76f8\u5e94\u7684\u6539\u9020\u3002\u6211\u4eec\u57fa\u4e8e\u4e4b\u4e0a\u5b9e\u73b0\u4e86\u591a\u8fdb\u7a0b\u4ee5\u53ca\u914d\u7f6e\u5728\u7ebf\u66f4\u65b0\u7684\u529f\u80fd\uff0c\u540c\u65f6\u589e\u52a0\u4e86\u4e00\u4e9b\u5ef6\u65f6\u7684\u76f8\u5173\u76d1\u63a7\u6307\u6807\u3002\\n\\n\u672c\u6587\u5c06\u4e3a\u5927\u5bb6\u8be6\u7ec6\u8bb2\u89e3 twemproxy \u5b9e\u73b0\u4ee5\u53ca\u76f8\u5e94\u5730\u6539\u9020\uff0c\u5e0c\u671b\u80fd\u7ed9\u5176\u4ed6\u7684\u6280\u672f\u56e2\u961f\u63d0\u4f9b\u4e00\u4e9b\u53ef\u4ee5\u501f\u9274\u7684\u7ecf\u9a8c\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n## \u4e3a\u4ec0\u4e48\u8981\u9009\u62e9 twemproxy\\n\\nwemproxy \u662f\u4e00\u6b3e\u7531 twitter \u5f00\u6e90\u7684 Redis/Memcached \u4ee3\u7406\uff0c\u4e3b\u8981\u76ee\u6807\u662f\u51cf\u5c11\u540e\u7aef\u8d44\u6e90\u7684\u8fde\u63a5\u6570\u4ee5\u53ca\u4e3a\u7f13\u5b58\u6a2a\u5411\u6269\u5c55\u80fd\u529b\u3002 twemproxy \u652f\u6301\u591a\u79cd hash \u5206\u7247\u7b97\u6cd5\uff0c\u540c\u65f6\u5177\u5907\u5931\u8d25\u8282\u70b9\u81ea\u52a8\u5254\u9664\u7684\u529f\u80fd\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5176\u4ed6\u6bd4\u8f83\u6210\u719f\u7684\u5f00\u6e90\u89e3\u51b3\u65b9\u6848\u8fd8\u6709 codis\uff0ccodis \u5177\u5907\u5728\u7ebf\u7684 auto-scale \u4ee5\u53ca\u53cb\u597d\u7684\u540e\u53f0\u7ba1\u7406\uff0c\u4f46\u6574\u4f53\u7684\u529f\u80fd\u66f4\u63a5\u8fd1\u4e8e Redis Cluster\uff0c\u800c\u4e0d\u662f\u4ee3\u7406\u3002\u7f8e\u56fe\u8fd9\u8fb9\u9700\u8981\u7684\u662f\u4e00\u4e2a Redis \u548c Memcached \u534f\u8bae\u7c7b PaaS \u670d\u52a1\u7684\u4ee3\u7406(\u7f51\u5173)\uff0c\u6240\u4ee5\u6211\u4eec\u6700\u7ec8\u9009\u62e9\u4e86 twemproxy\u3002\\n\\n## twemproxy \u5b9e\u73b0\\n\\ntwemproxy \u4e3b\u8981\u7684\u529f\u80fd\u662f\u89e3\u6790\u7528\u6237\u8bf7\u6c42\u540e\u8f6c\u53d1\u5230\u540e\u7aef\u7684\u7f13\u5b58\u8d44\u6e90\uff0c\u6210\u529f\u540e\u5728\u628a\u54cd\u5e94\u8f6c\u53d1\u56de\u5ba2\u6237\u7aef\u3002\\n\\n\u4ee3\u7801\u5b9e\u73b0\u7684\u6838\u5fc3\u662f\u4e09\u79cd\u8fde\u63a5\u5bf9\u8c61:\\n1. proxy connection\uff0c \u7528\u6765\u76d1\u542c\u7528\u6237\u5efa\u7acb\u8fde\u63a5\u7684\u8bf7\u6c42\uff0c\u5efa\u7acb\u8fde\u63a5\u6210\u529f\u540e\u4f1a\u5bf9\u5e94\u4ea7\u751f\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\\n2. client connection\uff0c\u7531\u5efa\u8fde\u6210\u529f\u540e\u4ea7\u751f\uff0c\u7528\u6237\u8bfb\u5199\u6570\u636e\u90fd\u662f\u901a\u8fc7 client connection \u89e3\u6790\u8bf7\u6c42\u540e\uff0c\u6839\u636e key \u548c\u54c8\u5e0c\u89c4\u5219\u9009\u62e9\u4e00\u4e2a server \u8fdb\u884c\u8f6c\u53d1\\n3. server connection\uff0c\u8f6c\u53d1\u7528\u6237\u8bf7\u6c42\u5230\u7f13\u5b58\u8d44\u6e90\u5e76\u63a5\u6536\u548c\u89e3\u6790\u54cd\u5e94\u6570\u636e\u8f6c\u56de client connection\uff0cclient connection \u5c06\u54cd\u5e94\u8fd4\u56de\u5230\u7528\u6237\\n\\n\u4e09\u79cd\u8fde\u63a5\u7684\u6570\u636e\u6d41\u5411\u5982\u4e0b\u56fe\uff1a\\n\\n![img](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/twemproxy-inner.jpeg)\\n(\u4e0a\u56fe\u7684 client connection \u4e4b\u6240\u4ee5\u6ca1\u6709 imsgq \u662f\u56e0\u4e3a\u8bf7\u6c42\u89e3\u6790\u5b8c\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165 server \u7684 imsgq)\\n\\n1. \u7528\u6237\u901a\u8fc7 proxy connection \u5efa\u7acb\u8fde\u63a5\uff0c\u4ea7\u751f\u4e00\u4e2a client connection\\n2. client connection \u5f00\u59cb\u8bfb\u53d6\u7528\u6237\u7684\u8bf7\u6c42\u6570\u636e\uff0c\u5e76\u5c06\u5b8c\u6574\u7684\u8bf7\u6c42\u6839\u636e key \u548c\u8bbe\u7f6e\u7684\u54c8\u5e0c\u89c4\u5219\u9009\u62e9 server, \u7136\u540e\u5c06\u8fd9\u4e2a\u8bf7\u6c42\u5b58\u653e\u5230 server \u7684 imsgq\\n3. \u63a5\u7740 server connection \u53d1\u9001 imsgq \u8bf7\u6c42\u5230\u8fdc\u7a0b\u8d44\u6e90\uff0c\u53d1\u9001\u5b8c\u6210\u4e4b\u540e(\u5199 tcp buffer) \u5c31\u4f1a\u5c06 msg \u4ece imsgq \u8fc1\u79fb\u5230 omsgq\uff0c\u54cd\u5e94\u56de\u6765\u4e4b\u540e\u4ece omsgq \u961f\u5217\u91cc\u9762\u627e\u5230\u8fd9\u4e2a\u5bf9\u5e94\u7684 msg \u4ee5\u53ca client connection\\n4. \u6700\u540e\u5c06\u54cd\u5e94\u5185\u5bb9\u653e\u5230 client connection \u7684 omsgq\uff0c\u7531 client connection \u5c06\u6570\u636e\u53d1\u9001\u56de\u5ba2\u6237\u7aef\u3002\\n\\n\u4e0a\u9762\u63d0\u5230\u7684\u7528\u6237\u8bf7\u6c42\u548c\u8d44\u6e90\u54cd\u5e94\u7684\u6570\u636e\u90fd\u662f\u5728\u89e3\u6790\u4e4b\u540e\u653e\u5230\u5185\u5b58\u7684 buf \u91cc\u9762\uff0c\u5728 client \u548c server \u4e24\u79cd\u8fde\u63a5\u7684\u5185\u90e8\u6d41\u8f6c\u4e5f\u53ea\u662f\u6307\u9488\u7684\u62f7\u8d1d(\u5b98\u7f51 README \u91cc\u9762\u63d0\u5230\u7684 Zero Copy)\u3002\u8fd9\u4e5f\u662f twemproxy \u5355\u7ebf\u7a0b\u6a21\u578b\u5728\u5c0f\u5305\u573a\u666f\u80fd\u591f\u8fbe\u5230 10w qps \u7684\u539f\u56e0\u4e4b\u4e00\uff0c\u51e0\u4e4e\u4e0d\u62f7\u8d1d\u5185\u5b58\u3002\\n\\n\u4f46\u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\uff0c\u5f53\u524d\u5f00\u6e90\u7248\u672c\u5b58\u5728\u51e0\u4e2a\u95ee\u9898: \\n* \u5355\u7ebf\u7a0b\u6a21\u578b\u65e0\u6cd5\u5229\u7528\u591a\u6838\uff0c\u6027\u80fd\u4e0d\u591f\u597d\uff0c\u6781\u7aef\u60c5\u51b5\u4e0b\u4ee3\u7406\u548c\u8d44\u6e90\u9700\u8981 1:1 \u90e8\u7f72\\n* \u914d\u7f6e\u65e0\u6cd5\u5728\u7ebf Reload\uff0ctwitter \u5185\u90e8\u7248\u672c\u5e94\u8be5\u662f\u652f\u6301\u7684\uff0c\u5355\u5143\u6d4b\u8bd5\u91cc\u9762\u6709\u9488\u5bf9 reload \u7684 case\uff0cPaaS \u573a\u666f\u9700\u8981\u4e0d\u65ad\u66f4\u65b0\u914d\u7f6e\\n* Redis \u4e0d\u652f\u6301\u4e3b\u4ece\u6a21\u5f0f\uff08Redis \u5728\u4f5c\u4e3a\u7f13\u5b58\u7684\u573a\u666f\u4e0b\u786e\u5b9e\u6ca1\u5fc5\u8981\u4f7f\u7528\u4e3b\u4ece\uff09\uff0c\u4f46\u90e8\u5206\u573a\u666f\u9700\u8981\\n* \u6570\u636e\u6307\u6807\u8fc7\u5c11\uff0c\u5ef6\u65f6\u6307\u6807\u5b8c\u5168\u6ca1\u6709\u3002\\n\\n### \u591a\u8fdb\u7a0b\u7248\u672c\\n\\n\u9488\u5bf9\u4ee5\u4e0a\u7684\u51e0\u4e2a\u95ee\u9898\uff0c\u7f8e\u56fe\u7684\u5f00\u6e90\u7248\u672c\u90fd\u505a\u4e86\u4e00\u4e9b\u4fee\u6539\uff0c\u6700\u6838\u5fc3\u7684\u529f\u80fd\u662f\u591a\u8fdb\u7a0b\u548c\u914d\u7f6e\u5728\u7ebf reload\u3002\u6539\u9020\u540e\u6574\u4f53\u8fdb\u7a0b\u6a21\u578b\u7c7b\u4f3c Nginx\uff0c \u7b80\u5355\u793a\u610f\u56fe\u5982\u4e0b:\\n\\n![img](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/twemproxy-process-mode.png)\\n\\nmaster \u7684\u529f\u80fd\u5c31\u662f\u7ba1\u7406 worker \u8fdb\u7a0b\uff0c\u4e0d\u63a5\u6536\u548c\u5904\u7406\u7528\u6237\u8bf7\u6c42\u3002\u5982\u679c worker \u8fdb\u7a0b\u5f02\u5e38\u9000\u51fa\uff0c\u90a3\u4e48 master \u5219\u4f1a\u81ea\u52a8\u62c9\u8d77\u65b0\u7684\u8fdb\u7a0b\u6765\u66ff\u4ee3\u6302\u6389\u7684\u8001\u8fdb\u7a0b\u3002\u9664\u6b64\u4e4b\u5916\uff0cmaster \u8fd8\u4f1a\u63a5\u6536\u6765\u81ea\u7528\u6237\u7684\u51e0\u79cd\u4fe1\u53f7: \\n* SIGHUP\uff0c \u91cd\u65b0\u52a0\u8f7d\u65b0\u914d\u7f6e \\n* SIGTTIN\uff0c\u63d0\u9ad8\u65e5\u5fd7\u7ea7\u522b, \u7ea7\u522b\u8d8a\u9ad8\u65e5\u5fd7\u8d8a\u8be6\u7ec6 \\n* SIGTTOU\uff0c\u964d\u4f4e\u65e5\u5fd7\u7ea7\u522b\uff0c\u7ea7\u522b\u8d8a\u4f4e\u65e5\u5fd7\u8d8a\u5c11 \\n* SIGUSR1\uff0c\u91cd\u65b0\u6253\u5f00\u65e5\u5fd7\u6587\u4ef6 \\n* SIGTERM\uff0c\u4f18\u96c5\u9000\u51fa\uff0c\u7b49\u5230\u4e00\u6bb5\u65f6\u95f4\u540e\u9000\u51fa \\n* SIGINT\uff0c\u5f3a\u5236\u9000\u51fa \\n\\n\u540c\u65f6\u8fd8\u589e\u52a0\u4e86\u51e0\u4e2a\u5168\u5c40\u914d\u7f6e: \\n\\n```shell\\nglobal:\\n  worker_processes: auto      # num of workers, fallback to single process model while worker_processes is 0\\n  max_openfiles: 102400       # max num of open files in every worker process\\n  user: nobody                # user of worker\'s process, master process should be setup with root\\n  group: nobody               # group of worker\'s process\\n  worker_shutdown_timeout: 30 # terminate the old worker after worker_shutdown_timeout, unit is second\\n```\\n\\n\u9664\u4e86 `worker_shutdown_timeout` \u5176\u4ed6\u51e0\u4e2a\u914d\u7f6e\u5e94\u8be5\u6bd4\u8f83\u597d\u7406\u89e3\u3002`worker_shutdown_timeout` \u662f\u914d\u7f6e\u8001 worker \u5728\u6536\u5230\u9000\u51fa\u4fe1\u53f7\u540e\u591a\u957f\u65f6\u95f4\u9000\u51fa\u3002\u8fd9\u4e2a\u914d\u7f6e\u662f\u8ddf\u591a\u8fdb\u7a0b\u5b9e\u73b0\u76f8\u5173\u7684\u53c2\u6570\uff0c\u6211\u4eec\u662f\u901a\u8fc7\u542f\u52a8\u65b0\u8fdb\u7a0b\u66ff\u4ee3\u8001\u8fdb\u7a0b\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u914d\u7f6e\u4ee5\u53ca\u8fdb\u7a0b\u6570\u76ee\u7684\u5728\u7ebf\u4fee\u6539\uff0c\u6240\u4ee5\u8fd9\u4e2a\u914d\u7f6e\u5c31\u662f\u7528\u6765\u6307\u5b9a\u8001\u8fdb\u7a0b\u7684\u4fdd\u7559\u65f6\u95f4\u3002\\n\\n### Reuse Port\\n\\n\u5728 reuse port \u4e4b\u524d\uff0c\u591a\u7ebf\u7a0b/\u8fdb\u7a0b\u670d\u52a1\u76d1\u542c\u5efa\u8fde\u8bf7\u6c42\u4e00\u822c\u6709\u4e24\u79cd\u65b9\u5f0f:\\n1. \u7531\u4e00\u4e2a\u7ebf\u7a0b\u8d1f\u8d23\u63a5\u6536\u6240\u6709\u7684\u65b0\u8fde\u63a5\uff0c\u5176\u4ed6\u7ebf\u7a0b\u670d\u52a1\u53ea\u8d1f\u8d23\u5efa\u7acb\u8fde\u63a5\u4e4b\u540e\u7684\u5904\u7406\u3002\u8fd9\u79cd\u65b9\u5f0f\u7684\u95ee\u9898\u662f\u5728\u77ed\u8fde\u63a5\u573a\u666f\u4e0b\uff0c\u8fd9\u4e2a accept \u7ebf\u7a0b\u5f88\u5bb9\u6613\u6210\u4e3a\u74f6\u9888(\u5355\u6838\u6211\u4eec\u8fd9\u8fb9\u6d4b\u8bd5\u4e00\u822c\u662f\u5728 4w+/s \u5de6\u53f3)\\n2. \u6240\u6709\u7684\u7ebf\u7a0b/\u8fdb\u7a0b\u90fd\u540c\u65f6 accept \u540c\u4e00\u4e2a\u76d1\u542c\u7684\u6587\u4ef6\u53e5\u67c4\u3002 \u8fd9\u79cd\u65b9\u5f0f\u7684\u95ee\u9898\u662f\u5728\u9ad8\u8d1f\u8f7d\u7684\u573a\u666f\u4e0b\uff0c\u4e0d\u540c\u7ebf\u7a0b/\u8fdb\u7a0b\u7684\u5524\u9192\u4f1a\u4e0d\u5747\u5300\uff0c\u53e6\u5916\u4f1a\u6709\u60ca\u7fa4\u7684\u6548\u679c(accept/epoll \u5728\u65b0\u7248\u672c\u5185\u6838\u4e2d\u4e5f\u6709\u89e3\u51b3\u60ca\u7fa4\u95ee\u9898)\\n\\nreuse port \u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u5141\u8bb8\u591a\u4e2a socket \u540c\u65f6\u76d1\u542c\u540c\u4e00\u4e2a\u7aef\u53e3\uff0c\u540c\u65f6\u4e0d\u4f1a\u5b58\u5728\u5efa\u7acb\u8fde\u63a5\u4e0d\u5747\u5300\u7684\u95ee\u9898\u3002 \u4f7f\u7528 reuse port \u4e5f\u76f8\u5f53\u7b80\u5355\uff0c\u53ea\u9700\u8981\u628a\u76d1\u542c\u901a\u8fc7\u4e00\u4e2a\u7aef\u53e3\u7684 socket \u90fd\u8bbe\u7f6e\u4e0a reuse port \u6807\u8bc6\u5373\u53ef\u3002\\n\\n```c\\nint\\nnc_set_reuseport(int sd)\\n{\\n#ifdef NC_HAVE_REUSEPORT\\n    int reuse;\\n    socklen_t len;\\n\\n    reuse = 1;\\n    len = sizeof(reuse);\\n\\n    return setsockopt(sd, SOL_SOCKET, SO_REUSEPORT, &reuse, len);\\n#else\\n    return 0;\\n#endif\\n}\\n```\\n\\n\u867d\u7136 reuse port \u662f\u5728 linux 3.9 \u624d\u88ab\u5408\u5e76\u8fdb\u6765\uff0c\u4f46\u5f88\u591a\u53d1\u884c\u7248\u7684 OS \u90fd\u6709 backport \u5230\u66f4\u65e9\u4e4b\u524d\u7684\u7248\u672c\uff08\u81f3\u5c11\u6211\u4eec\u5728\u4f7f\u7528\u7684 centos6 \u7684 kernel 2.6.32 \u662f\u6709\u7684\uff09\uff0c\u5f88\u591a\u535a\u5ba2\u5728\u8fd9\u70b9\u4e0a\u6709\u4e9b\u8bef\u5bfc\u3002\u53e6\u5916\uff0c\u5728 reload \u65f6\u5019\u4e5f\u4e0d\u80fd\u7b80\u5355\u5c06\u8001\u7684\u76d1\u542c\u5173\u95ed\uff0c\u4f1a\u5bfc\u81f4 tcp backlog \u91cc\u9762\u8fd9\u4e9b\u4e09\u6b21\u63e1\u624b\u6210\u529f\u4f46\u672a accept \u7684\u8fde\u63a5\u4e22\u5931\uff0c\u4e1a\u52a1\u5728\u8fd9\u4e9b\u8fde\u63a5\u4e0a\u53d1\u9001\u6570\u636e\u5219\u4f1a\u6536\u5230 rst \u5305\u3002\\n\\n\u6211\u4eec\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u5f0f\u662f\u8ba9\u76d1\u542c\u8fde\u63a5\u90fd\u5728 master \u8fdb\u7a0b\u4e0a\u9762\u521b\u5efa\u548c\u7ef4\u62a4\uff0cworker \u8fdb\u7a0b\u53ea\u662f\u5728 fork \u4e4b\u540e\u76f4\u63a5\u7ee7\u627f\u76d1\u542c\u7684\u8fde\u63a5\uff0c\u6240\u4ee5\u5728 reload \u7684\u65f6\u5019 master \u5c31\u53ef\u4ee5\u5c06\u8001 worker \u91cc\u9762\u7684\u76d1\u542c\u8fde\u63a5\u8fc1\u79fb\u5230\u65b0\u7684 worker\uff0c \u6765\u4fdd\u8bc1 tcp backlog \u91cc\u9762\u7684\u6570\u636e\u4e0d\u4f1a\u4e22\u5931\u3002\\n\\n\u5177\u4f53\u4ee3\u7801\u89c1: [nc_process.c#L172](https://github.com/meitu/twemproxy/blob/develop/src/nc_process.c#L172), \u8fd9\u79cd\u65b9\u5f0f\u80fd\u591f\u5728\u8fdb\u7a0b\u6570\u4e0d\u53d8\u6216\u8005\u589e\u591a\u7684\u573a\u666f\u4e0b\u4fdd\u8bc1 backlog \u91cc\u9762\u7684\u6570\u636e\u4e0d\u4f1a\u4e22\uff0c\u8fdb\u7a0b\u6570\u7f29\u51cf\u65f6\u8fd8\u662f\u4f1a\u4e22\u5931\u4e00\u4e9b\\n\\n### Redis \u4e3b\u4ece\u6a21\u5f0f\\n\\n\u5728\u539f\u751f\u7684 twemproxy \u91cc\u9762\u662f\u4e0d\u652f\u6301 Redis \u4e3b\u4ece\u6a21\u5f0f\u7684\uff0c\u8fd9\u4e2a\u5e94\u8be5\u4e3b\u8981\u662f\u56e0\u4e3a twemproxy \u628a Redis/Memcached \u5f53\u505a\u662f\u7f13\u5b58\u800c\u4e0d\u662f\u5b58\u50a8\uff0c\u6240\u4ee5\u8fd9\u79cd\u4e3b\u4ece\u7ed3\u6784\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u8fd0\u7ef4\u4e5f\u6bd4\u8f83\u7b80\u5355\u3002\u4f46\u662f\u5bf9\u4e8e\u6211\u4eec\u5185\u90e8\u4e1a\u52a1\u6765\u8bf4\uff0c\u6709\u4e9b\u5e76\u4e0d\u662f\u5168\u90e8\u90fd\u662f\u4f5c\u4e3a\u7f13\u5b58\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u8fd9\u79cd\u4e3b\u4ece\u7ed3\u6784\u3002\u914d\u7f6e\u4e5f\u6bd4\u8f83\u7b80\u5355:\\n\\n```shell\\n    servers:\\n        -  127.0.0.1:6379:1 master\\n        - 127.0.0.1:6380:1 \\n```\\n\u5982\u679c\u68c0\u6d4b\u5230 server \u7684\u540d\u5b57\u4e3a master \u5219\u8ba4\u4e3a\u8be5\u5b9e\u4f8b\u4e3a\u4e3b\uff0c\u4e00\u4e2a\u6c60\u5b50\u91cc\u9762\u53ea\u5141\u8bb8\u4e00\u4e2a\u4e3b\uff0c\u5426\u5219\u8ba4\u4e3a\u914d\u7f6e\u4e0d\u5408\u6cd5\u3002\\n\\n### \u7edf\u8ba1\u6307\u6807\\n\\n\u4e2a\u4eba\u89c9\u5f97 twemproxy \u5b58\u5728\u7684\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u662f\u5ef6\u65f6\u6307\u6807\u5b8c\u5168\u7f3a\u5931\uff0c\u8fd9\u4e2a\u5bf9\u4e8e\u6392\u67e5\u95ee\u9898\u4ee5\u53ca\u76d1\u63a7\u62a5\u8b66\u662f\u6bd4\u8f83\u4e0d\u5229\u7684\u3002\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4e24\u79cd\u5ef6\u65f6\u6307\u6807\\n\\n1. request latency, \u6307\u7684\u662f\u5ba2\u6237\u7aef\u8bf7\u6c42\u5230\u8fd4\u56de\u7684\u5ef6\u65f6, \u5305\u542b twemproxy \u5185\u90e8\u4ee5\u53ca server \u7684\u8017\u65f6\uff0c\u8fd9\u4e2a\u6307\u6807\u66f4\u52a0\u63a5\u8fd1\u4e1a\u52a1\u7684\u8017\u65f6\\n2. server latency, \u6307\u7684\u662f twemproxy \u8bf7\u6c42 server \u7684\u8017\u65f6\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7406\u89e3\u4e3a Redis/Memcached server \u7684\u8017\u65f6\\n\\n\u5728\u5076\u53d1\u95ee\u9898\u7684\u573a\u666f\u4e0b\uff0c\u6839\u636e\u4e24\u79cd\u5ef6\u65f6\u53ef\u4ee5\u5b9a\u4f4d\u662f twemproxy\u3001server \u8fd8\u662f\u5ba2\u6237\u7aef\u7684\u95ee\u9898(\u6bd4\u5982 GC)\u5bfc\u81f4\u6162\u8bf7\u6c42\uff0c\u53e6\u5916\u4e5f\u53ef\u4ee5\u6162\u8bf7\u6c42\u7684\u6bd4\u4f8b\u8fdb\u884c\u76d1\u63a7\u62a5\u8b66\u3002\u8fd9\u4e24\u79cd\u6307\u6807\u662f\u901a\u8fc7 bucket \u7684\u65b9\u5f0f\u6765\u8bb0\u5f55\u7684\uff0c\u6bd4\u5982 <1ms \u7684\u6570\u76ee\uff0c<10ms \u7684\u6570\u76ee\u7b49\u7b49\u3002\\n\\n## \u4ecd\u7136\u5b58\u5728\u7684\u95ee\u9898\\n1. \u5728 worker \u6570\u76ee\u51cf\u5c11\u7684\u573a\u666f\u4e0b\uff0c\u88ab\u9500\u6bc1\u7684\u8001 Worker \u7684 tcp backlog \u4f1a\u4e22\u5931\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u8fde\u63a5\u8d85\u65f6\\n2. unix socket \u6ca1\u6709 reuse port \u7c7b\u4f3c\u7684\u673a\u5236\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u8fd8\u662f\u5355\u8fdb\u7a0b\u4f46\u53ef\u4ee5\u652f\u6301\u5728\u7ebf reload\\n3. \u4e0d\u652f\u6301 Memcached \u4e8c\u8fdb\u5236\u534f\u8bae\uff0c\u51e0\u5e74\u524d\u6709\u4eba\u63d0\u4f9b\u76f8\u5173 PR \u4f46\u4e00\u76f4\u90fd\u6ca1\u6709\u8fdb\u5165 master\\n4. \u5ba2\u6237\u7aef\u7684\u6700\u5927\u8fde\u63a5\u6570\u6709\u914d\u7f6e\u4f46\u5b9e\u9645\u4e0a\u4e0d\u751f\u6548\uff0c\u8fd9\u4e2a\u529f\u80fd\u6211\u4eec\u540e\u7eed\u4f1a\u52a0\u4e0a\\n5. \u547d\u4ee4\u652f\u6301\u4e0d\u5168(\u4e3b\u8981\u662f\u6ca1\u6709 key \u4ee5\u53ca\u4e00\u4e9b blocking \u7684\u6307\u4ee4)\\n6. reload \u671f\u95f4\u65b0\u8001\u8fdb\u7a0b\u7684\u914d\u7f6e\u4e0d\u4e00\u81f4\u4f1a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u810f\u6570\u636e\\n\\n## \u6027\u80fd\u538b\u6d4b\\n\u4ee5\u4e0b\u6570\u636e\u662f\u5728\u957f\u8fde\u63a5\u5c0f\u5305\u573a\u666f\u4e0b\u538b\u6d4b\u5f97\u51fa\uff0c\u4e3b\u8981\u662f\u9a8c\u8bc1\u591a\u8fdb\u7a0b\u7248\u672c\u662f\u5426\u8ddf\u9884\u671f\u7684\u4e00\u81f4\u3002\u6ca1\u6709\u5176\u4ed6\u786c\u4ef6\u5230\u8fbe\u74f6\u9888\u4e4b\u524d\uff0c\u6027\u80fd\u53ef\u4ee5\u968f\u7740 CPU \u6838\u6570\u7ebf\u6027\u589e\u957f\u3002\\n\\n\u538b\u6d4b\u73af\u5883\u5982\u4e0b:\\n\\n* CentOS 6.6\\n* CPU Intel E5-2660 32 \u903b\u8f91\u6838\\n* \u5185\u5b58 64G\\n* \u4e24\u5f20\u5343\u5146\u7f51\u5361\u505a bond0\\n\\n![img](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/twemproxy-benchmark.webp)\\n\\n\u5355\u4e2a worker \u573a\u666f\u548c twemproxy \u6539\u9020\u4e4b\u524d\u7684\u6027\u80fd\u5dee\u4e0d\u591a\uff0c\u5728 10w \u5de6\u53f3\u3002\u968f\u7740 worker \u6570\u76ee\u589e\u52a0\uff0c\u540e\u9762\u6027\u80fd\u548c worker \u57fa\u672c\u662f\u4fdd\u6301\u7ebf\u4e0a\u589e\u957f\uff0c\u7b26\u5408\u9884\u671f\u30028 \u6838\u4ee5\u4e0a\u7684\u74f6\u9888\u662f bond0 \u6a21\u5f0f\u4e0b\u5305\u63a5\u6536\u4e0d\u5747\u5300\u5bfc\u81f4\u5355\u7f51\u5361\u6027\u80fd\u8fbe\u5230\u74f6\u9888\uff0c\u6570\u636e\u65e0\u6cd5\u4f5c\u4e3a\u53c2\u8003\u3002\u4e0a\u9762\u7684\u6570\u636e\u4e5f\u662f\u6211\u4eec\u81ea\u5df1\u73af\u5883\u7684\u538b\u6d4b\u6570\u636e\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u9a8c\u8bc1\u3002\u5982\u679c\u662f\u591a\u7f51\u5361\u9700\u8981\u6ce8\u610f\u7ed1\u5b9a\u4e2d\u65ad\u6216\u8005\u591a\u961f\u5217\u5230\u591a\u4e2a CPU, \u907f\u514d CPU0 \u8f6f\u4e2d\u65ad\u5904\u7406\u6210\u4e3a\u74f6\u9888\u3002\\n\\n## \u6700\u540e\\n\\n\u591a\u8fdb\u7a0b\u7248\u672c\u7684 twemproxy \u5b9e\u73b0\u4e0a\u7b97\u662f\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u5e76\u4fee\u590d\u4e0d\u5c11 twemproxy \u7ec6\u8282\u95ee\u9898(\u4e00\u90e8\u5206\u662f\u4f7f\u7528\u65b9\u62a5\u544a)\uff0c\u6bd4\u5982 mbuf \u4e00\u65e6\u5206\u914d\u5c31\u4e0d\u4f1a\u6536\u7f29\u5bfc\u81f4\u5185\u5b58\u4e0a\u6da8\u4e4b\u540e\u4e0d\u518d\u4e0b\u964d\u7684\u95ee\u9898\u7b49\u7b49\u3002\u5f88\u591a\u529f\u80fd\u7ec6\u8282\u6211\u4eec\u4e5f\u5728\u4e0d\u65ad\u4f18\u5316\uff0c\u6211\u4eec\u4e5f\u53ea\u7ef4\u62a4 Github \u4e0a\u7684\u4e00\u4e2a\u7248\u672c\u3002\\n\\n\u4ee3\u7801\u5730\u5740: [https://github.com/meitu/twemproxy](https://github.com/meitu/twemproxy)\\n\\n\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u56e2\u961f\u76ee\u524d\u4e5f\u5f00\u6e90\u5176\u4ed6\u4e00\u4e9b\u9879\u76ee:\\n\\n* [golang \u7248\u672c\u7684 kafka consumer group](https://github.com/meitu/go-consumergroup)\\n* [php \u7248\u672c\u7684 kafka consumer group](https://github.com/meitu/php-consumergroup)\\n* [\u57fa\u4e8e\u4ee5\u592a\u574a\u7684 DPoS \u5b9e\u73b0](https://github.com/meitu/go-ethereum)\\n\\n\u540e\u7eed\u8fd8\u4f1a\u5f00\u6e90\u66f4\u591a\u7684\u4e1c\u897f\uff0c\u6b22\u8fce\u5927\u5bb6\u591a\u591a\u5173\u6ce8~"},{"id":"posts-redis-async-delete","metadata":{"permalink":"/posts-redis-async-delete","source":"@site/blog/2017-01-24-redis-async-delete.md","title":"Redis 4.0 \u975e\u963b\u585e\u5220\u9664","description":"\u5bf9\u4e8e Redis \u8fd9\u79cd\u5355\u7ebf\u7a0b\u6a21\u578b\u7684\u670d\u52a1\u6765\u8bf4\uff0c\u4e00\u4e9b\u8017\u65f6\u7684\u547d\u4ee4\u963b\u585e\u5176\u4ed6\u8bf7\u6c42\u662f\u4e2a\u5934\u75db\u7684\u95ee\u9898\u3002\u5178\u578b\u7684\u547d\u4ee4\u5982 KEYS/FLUSHALL/FLUSHDB \u7b49\u7b49\uff0c\u4e00\u822c\u7ebf\u4e0a\u4e5f\u4f1a\u7981\u7528\u8fd9\u4e9b\u4f1a\u904d\u5386\u6574\u4e2a\u5e93\u7684\u547d\u4ee4\u3002\u800c\u50cf DEL/LRANGE/HGETALL \u8fd9\u4e9b\u53ef\u80fd\u5bfc\u81f4\u963b\u585e\u7684\u547d\u4ee4\u7ecf\u5e38\u88ab\u5de5\u7a0b\u5e08\u5ffd\u89c6\uff0c\u8fd9\u4e9b\u547d\u4ee4\u5728 value \u6bd4\u8f83\u5927\u7684\u65f6\u5019\u8ddf KEYS \u8fd9\u4e9b\u5e76\u6ca1\u6709\u672c\u8d28\u533a\u522b\u3002","date":"2017-01-24T00:00:00.000Z","formattedDate":"January 24, 2017","tags":[{"label":"Redis","permalink":"/tags/redis"}],"readingTime":5.105,"truncated":true,"authors":[],"frontMatter":{"title":"Redis 4.0 \u975e\u963b\u585e\u5220\u9664","slug":"posts-redis-async-delete","tags":["Redis"]},"prevItem":{"title":"\u7f8e\u56fe\u591a\u7ebf\u7a0b twemproxy \u5b9e\u73b0","permalink":"/posts-meitu-opensource-twemproxy"},"nextItem":{"title":"Redis 4.0 RDB \u548c AOF \u6df7\u5408\u5b58\u50a8","permalink":"/posts-redis-mixed-format"}},"content":"\u5bf9\u4e8e Redis \u8fd9\u79cd\u5355\u7ebf\u7a0b\u6a21\u578b\u7684\u670d\u52a1\u6765\u8bf4\uff0c\u4e00\u4e9b\u8017\u65f6\u7684\u547d\u4ee4\u963b\u585e\u5176\u4ed6\u8bf7\u6c42\u662f\u4e2a\u5934\u75db\u7684\u95ee\u9898\u3002\u5178\u578b\u7684\u547d\u4ee4\u5982 KEYS/FLUSHALL/FLUSHDB \u7b49\u7b49\uff0c\u4e00\u822c\u7ebf\u4e0a\u4e5f\u4f1a\u7981\u7528\u8fd9\u4e9b\u4f1a\u904d\u5386\u6574\u4e2a\u5e93\u7684\u547d\u4ee4\u3002\u800c\u50cf DEL/LRANGE/HGETALL \u8fd9\u4e9b\u53ef\u80fd\u5bfc\u81f4\u963b\u585e\u7684\u547d\u4ee4\u7ecf\u5e38\u88ab\u5de5\u7a0b\u5e08\u5ffd\u89c6\uff0c\u8fd9\u4e9b\u547d\u4ee4\u5728 value \u6bd4\u8f83\u5927\u7684\u65f6\u5019\u8ddf KEYS \u8fd9\u4e9b\u5e76\u6ca1\u6709\u672c\u8d28\u533a\u522b\u3002\\n\\nRedis 4.0 \u5f00\u59cb\u9488\u5bf9 DEL/FLUSHALL/FLUSHDB \u505a\u4e86\u4e00\u4e9b\u4f18\u5316\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\\n### 1) DEL/FLUSHALL/FLUSHDB \u5f02\u6b65\u5316\\n\\nFLUSHALL/FLUSHDB \u6e05\u9664\u5e93\u7684\u65f6\u5019\u56e0\u4e3a\u8981\u5bf9\u6bcf\u4e2a kv \u8fdb\u884c\u904d\u5386\u4f1a\u6bd4\u8f83\u8017\u65f6\u3002\u540c\u7406\u5bf9\u4e8e DEL \u547d\u4ee4\u4e5f\u662f\uff0c\u5982 VALUE \u662f\u94fe\u8868\uff0c\u96c6\u5408\u6216\u8005\u5b57\u5178\uff0c\u540c\u6837\u8981\u904d\u5386\u5220\u9664\u3002\u5728 Redis 4.0 \u9488\u5bf9\u8fd9\u4e09\u4e2a\u547d\u4ee4\u5f15\u5165\u4e86\u5f02\u6b65\u5316\u5904\u7406\uff0c\u907f\u514d\u963b\u585e\u5176\u4ed6\u8bf7\u6c42\u3002FLUSHALL/FLUSHDB \u52a0\u4e86\u4e00\u4e2a `ASYNC` \u53c2\u6570\uff0c\u540c\u65f6\u65b0\u589e `UNLINK` \u6765\u8868\u793a\u5f02\u6b65\u5316\u7684\u5220\u9664\u547d\u4ee4\u3002\\n\\n***\u4e3a\u4ec0\u4e48 DEL \u4e5f\u4e0d\u4f7f\u7528\u7c7b\u4f3c FLUSHALL/FLUSHDB  \u547d\u4ee4\u52a0\u4e2a\u53c2\u6570\u7684\u65b9\u5f0f\uff1f***\\n\\n\u8c03\u76ae\u7684\u4f5c\u8005\u662f\u8fd9\u4e48\u8bf4\u7684:\\n\\n> There are reasons why UNLINK is not the default for DEL. I know things\u2026 I can\u2019t talk (**).\\n\\n\u610f\u601d\u5927\u6982\u5c31\u662f: \u300c\u539f\u56e0\u6211\u77e5\u9053\u4f46\u4e0d\u544a\u8bc9\u4f60...\u300d\\n\\n\u4e0d\u8fc7\u6211\u731c\u4e3b\u8981\u539f\u56e0\u662f\u56e0\u4e3a DEL \u547d\u4ee4\u662f\u652f\u6301\u4e0d\u5b9a\u53c2\u6570\uff0c\u5982\u679c\u52a0\u4e2a ASYNC \u53c2\u6570\u6ca1\u529e\u6cd5\u5224\u65ad\u5230\u5e95\u8fd9\u4e2a\u662f key \u8fd8\u662f\u5f02\u6b65\u5220\u9664\u7684\u9009\u9879\u3002\\n\\n\\n### 2) DEL \u5f02\u6b65\u5316\u7684\u5b9e\u73b0\\n\\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6765\u770b `UNLINK` \u547d\u4ee4\u7684\u5b9e\u73b0:\\n\\n```c\\nvoid unlinkCommand(client *c) {\\n\\t// lazy \u53c2\u6570\u8bbe\u7f6e 1\uff0c\u8868\u793a\u5f02\u6b65\u5220\u9664\\n    delGenericCommand(c,1);\\n}\\n\\nvoid delGenericCommand(client *c, int lazy) {\\n    int numdel = 0, j;\\n\\n    for (j = 1; j < c->argc; j++) {\\n        expireIfNeeded(c->db,c->argv[j]);\\n        // \u5982\u679c\u662f\u5f02\u6b65\u5220\u9664\u8c03\u7528 dbAsyncDelete\\n        int deleted  = lazy ? dbAsyncDelete(c->db,c->argv[j]) :\\n                              dbSyncDelete(c->db,c->argv[j]);\\n\\t    ...\\n    }    \\n    addReplyLongLong(c,numdel);\\n}\\n```\\n\\n\u6211\u4eec\u53ef\u770b\u5230 unlink \u547d\u4ee4\u4f1a\u8c03\u7528 `dbAsyncDelete` \u6765\u5b9e\u73b0\u5f02\u6b65\u8c03\u7528\u3002\\n\\n```c\\n#define LAZYFREE_THRESHOLD 64\\nint dbAsyncDelete(redisDb *db, robj *key) {\\n\\t// \u5148\u628a key \u4ece\u8fc7\u671f\u65f6\u95f4\u5b57\u5178\u91cc\u9762\u5220\u9664\\n\\tif (dictSize(db->expires) > 0) dictDelete(db->expires,key->ptr);\\n\\t// \u628a kv \u4ece\u5b57\u5178\u91cc\u9762\u6458\u9664\u4f46\u4e0d\u662f\u5220\u9664 value\uff0c\u540e\u7eed\u547d\u4ee4\u5c31\u67e5\u8be2\u4e0d\u5230\\n\\tdictEntry *de = dictUnlink(db->dict,key->ptr);\\n    if (de) {\\n        robj *val = dictGetVal(de);\\n        // \u4e0d\u662f\u6240\u6709\u7684 key \u90fd\u4f1a\u8d70\u5f02\u6b65\u5316\u5220\u9664\uff0c\u5982\u679c value \u6bd4\u8f83\u5c0f\u4f1a\u76f4\u63a5\u5220\u9664\\n        // \u5982\u679c value \u662f\u5b57\u5178/\u94fe\u8868/\u96c6\u5408\u4e14\u4e0d\u80fd\u662f\u538b\u7f29\u7684\u8fd4\u56de\u5bf9\u5e94\u7684\u5143\u7d20\u6570\u76ee\uff0c\u5176\u4ed6\u90fd\u8fd4\u56de 1\\n        size_t free_effort = lazyfreeGetFreeEffort(val);\\n\\n\\t    // \u53ea\u6709\u8ba1\u7b97\u51fa\u6765\u7684 free_effort \u5927\u4e8e LAZYFREE_THRESHOLD(64) \u624d\u4f1a\u8fdb\u5165\u5f02\u6b65\u5904\u7406\\n        if (free_effort > LAZYFREE_THRESHOLD) {\\n            atomicIncr(lazyfree_objects,1,lazyfree_objects_mutex);\\n            // \u521b\u5efa BIO_LAZY_FREE \u4efb\u52a1\uff0c\u653e\u5230\u5f02\u6b65\u961f\u5217\\n            bioCreateBackgroundJob(BIO_LAZY_FREE,val,NULL,NULL);\\n            dictSetVal(db->dict,de,NULL);\\n        }\\n    }\\n\\n\\tif (de) {// \u5982\u679c key \u5b58\u5728\uff0c\u91ca\u653e\u5b57\u5178\u91cc\u9762\u7ed3\u6784\\n        dictFreeUnlinkedEntry(db->dict,de);\\n        if (server.cluster_enabled) slotToKeyDel(key);\\n        return 1;\\n    } else {\\n        return 0;\\n    }\\n}\\n```\\n\\n`unlink` \u547d\u4ee4\u5904\u7406\u4e0a\u5e76\u4e0d\u662f\u6240\u6709\u7684 kv \u90fd\u4f1a\u8d70\u5f02\u6b65\u5316\u5220\u9664\uff0c\u800c\u662f\u4f1a\u6839\u636e value \u7684\u5927\u5c0f\u8fdb\u884c\u8bc4\u5206\u540e\u7b5b\u9009\uff0c\u8d85\u8fc7\u9600\u503c\u7684\u624d\u4f1a\u8d70\u5f02\u6b65\u5316\u5220\u9664\u3002\u8fd9\u4e2a\u8ba1\u7b97\u51fd\u6570\u662f `lazyfreeGetFreeEffort`\u3002\\n\\n\u540c\u65f6 Redis 4.0 \u4e13\u95e8\u591a\u5f00\u4e86\u4e00\u4e2a\u540e\u53f0\u7ebf\u7a0b\u4e13\u95e8\u6765\u5f02\u6b65\u5904\u7406 DEL, FLUSHALL \u548c FLUSHDB \u8fd9\u4e09\u4e2a\u547d\u4ee4\u3002\\n\\n```c\\n        } else if (type == BIO_LAZY_FREE) {\\n            if (job->arg1) // \u5904\u7406 DEL \u8fc7\u6765\u7684 key\\n                lazyfreeFreeObjectFromBioThread(job->arg1);\\n            else if (job->arg2 && job->arg3) //  \u5904\u7406 flush \u547d\u4ee4 \\n                lazyfreeFreeDatabaseFromBioThread(job->arg2,job->arg3);\\n            else if (job->arg3)\\n                lazyfreeFreeSlotsMapFromBioThread(job->arg3);\\n        }\\n```\\n\\n### 3) FLUSHALL/FLUSHDB\\n\\n\u8fd9\u4e24\u4e2a\u547d\u4ee4\u4e5f\u662f\u6bd4\u8f83\u7c7b\u4f3c\uff0cRedis \u4f1a\u5148\u68c0\u67e5\u8fd9\u4e24\u4e2a\u547d\u4ee4\u662f\u5426\u6709\u5e26 `async`:\\n\\n```c\\nint getFlushCommandFlags(client *c, int *flags) {\\n    if (c->argc > 1) { \\n\\t    // \u5224\u65ad\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5426\u4e3a async\\n        if (c->argc > 2 || strcasecmp(c->argv[1]->ptr,\\"async\\")) {\\n            addReply(c,shared.syntaxerr);\\n            return C_ERR;\\n        }    \\n        *flags = EMPTYDB_ASYNC;\\n    } else {\\n        *flags = EMPTYDB_NO_FLAGS;\\n    }    \\n    return C_OK;\\n}\\n```\\n\\n\u63a5\u7740\u5728 `emptyDb` \u5224\u65ad\u662f\u5f02\u6b65\u6e05\u6570\u636e\uff0c\u5982\u679c\u662f\u5f02\u6b65\u6e05\u9664\u5219\u4f1a\u8c03\u7528 `emptyDbAsync`:\\n\\n```c\\nvoid emptyDbAsync(redisDb *db) {\\n\\t// \u4fdd\u7559\u8001\u7684\u6570\u636e\u5e93\u6307\u9488\u5e76\u91cd\u65b0\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93\\n    dict *oldht1 = db->dict, *oldht2 = db->expires;\\n    db->dict = dictCreate(&dbDictType,NULL);\\n    db->expires = dictCreate(&keyptrDictType,NULL);\\n    atomicIncr(lazyfree_objects,dictSize(oldht1),\\n        lazyfree_objects_mutex);\\n    // \u628a\u8981\u6e05\u7a7a\u7684 db \u4f5c\u4e3a\u4e00\u4e2a job \u6dfb\u52a0\u5230\u540e\u53f0\u7684\u5904\u7406\u961f\u5217\\n    bioCreateBackgroundJob(BIO_LAZY_FREE,NULL,oldht1,oldht2);\\n}\\n```\\n\\n### 4) \u603b\u7ed3\\n\\nFLUSHALL/FLUSHDB \u8fd9\u79cd\u547d\u4ee4\u7ebf\u4e0a\u73af\u5883\u57fa\u672c\u90fd\u4f1a\u7981\u7528\uff0c\u5927\u5bb6\u72af\u9519\u7684\u6982\u7387\u6bd4\u8f83\u5c0f\u3002\u800c\u50cf DEL \u8fd9\u79cd\u547d\u4ee4\u5c5e\u4e8e\u9ad8\u9891\u7684\u64cd\u4f5c\uff0c\u5220\u9664\u5927 value \u5bfc\u81f4\u7684\u963b\u585e\u95ee\u9898\u5bb9\u6613\u88ab\u5ffd\u89c6\uff0c\u5f02\u6b65\u5316\u5220\u9664\u53ef\u4ee5\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u89c4\u907f\u8fd9\u79cd\u95ee\u9898\u3002\\n\\n\u53c2\u8003\u8fde\u63a5: [http://antirez.com/news/110](http://antirez.com/news/110)"},{"id":"posts-redis-mixed-format","metadata":{"permalink":"/posts-redis-mixed-format","source":"@site/blog/2017-01-23-redis-mixed-format.md","title":"Redis 4.0 RDB \u548c AOF \u6df7\u5408\u5b58\u50a8","description":"Redis \u5f53\u524d\u652f\u6301 aof \u548c rdb \u8fd9\u4e24\u79cd\u6301\u4e45\u5316\u65b9\u5f0f\u3002 \u6709\u4e9b\u5bf9 Redis \u4e0d\u662f\u7279\u522b\u7684\u4e86\u89e3\u540c\u5b66\u8bef\u89e3\u6301\u4e45\u5316\u662f\u8bfb\u5199\u6570\u636e\u4e5f\u4f1a\u5230\u78c1\u76d8\u3002\u8fd9\u91cc\u8f9f\u8c23\u4e00\u4e0b:","date":"2017-01-23T00:00:00.000Z","formattedDate":"January 23, 2017","tags":[{"label":"Redis","permalink":"/tags/redis"}],"readingTime":5.41,"truncated":true,"authors":[],"frontMatter":{"title":"Redis 4.0 RDB \u548c AOF \u6df7\u5408\u5b58\u50a8","slug":"posts-redis-mixed-format","tags":["Redis"]},"prevItem":{"title":"Redis 4.0 \u975e\u963b\u585e\u5220\u9664","permalink":"/posts-redis-async-delete"},"nextItem":{"title":"Redis 4.0 psync \u4f18\u5316","permalink":"/posts-redis-new-sync"}},"content":"Redis \u5f53\u524d\u652f\u6301 aof \u548c rdb \u8fd9\u4e24\u79cd\u6301\u4e45\u5316\u65b9\u5f0f\u3002 \u6709\u4e9b\u5bf9 Redis \u4e0d\u662f\u7279\u522b\u7684\u4e86\u89e3\u540c\u5b66\u8bef\u89e3\u6301\u4e45\u5316\u662f\u8bfb\u5199\u6570\u636e\u4e5f\u4f1a\u5230\u78c1\u76d8\u3002\u8fd9\u91cc\u8f9f\u8c23\u4e00\u4e0b:\\n\\n> Redis \u8bfb\u5199\u90fd\u662f\u5168\u5185\u5b58\u7684, \u6301\u4e45\u5316\u6570\u636e\u53ea\u662f\u4f5c\u4e3a\u78c1\u76d8\u5907\u4efd, \u5b9e\u4f8b\u91cd\u542f\u6216\u8005\u673a\u5668\u65ad\u7535\u7684\u65f6\u5019\u53ef\u4ee5\u4ece\u78c1\u76d8\u52a0\u8f7d\u5230\u5185\u5b58\\n\\n\u7531\u4e8e\u672c\u7bc7\u535a\u5ba2\u4e3b\u8981\u662f\u4e3a\u4e86\u5206\u6790 4.0 \u7248\u672c\u7684 rdb \u548c aof \u6df7\u5408\u5b58\u50a8\u7684\u5b9e\u73b0\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8be6\u7ec6\u4ecb\u7ecd rdb \u548c aof\u3002\u5982\u679c\u6709\u60f3\u8fdb\u4e00\u6b65\u4e86\u89e3\u53ef\u53c2\u8003 \u300aRedis \u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u300b \u4e00\u4e66\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\\n### 1) aof \u548c rdb\\n\\n#### 1.1) rdb \u7b80\u4ecb\\n\\nrdb \u662f\u67d0\u4e00\u4e2a\u65f6\u523b\u7684\u5185\u5b58\u955c\u50cf\u6570\u636e\u5199\u5165\u5230\u78c1\u76d8\u6587\u4ef6\uff0c\u4e4b\u540e\u7684\u5199\u5165\u6570\u636e\u4f1a\u4e22\u5931\u3002 rdb \u6301\u4e45\u5316\u65b9\u5f0f\u7684\u4f18\u70b9\u662f\u6301\u4e45\u5316\u540e\u7684\u6587\u4ef6\u6bd4\u8f83\u5c0f(\u53ea\u6709\u67d0\u4e00\u4e2a\u65f6\u523b\u7684\u6570\u636e\u4e14\u4f1a\u538b\u7f29)\uff0c\u5b9e\u4f8b\u91cd\u542f\u65f6\u52a0\u8f7d\u4f1a\u66f4\u5feb\u3002\u7f3a\u70b9\u662f\u5982\u679c\u5b9e\u4f8b\u91cd\u542f\uff0c\u5907\u4efd\u65f6\u523b\u4e4b\u540e\u7684\u5199\u5165\u6570\u636e\u4f1a\u4e22\u5931\u3002\\n\\n#### 1.2) aof \u7b80\u4ecb\\n\\naof \u662f\u5c06 Redis \u5199\u5165\u547d\u4ee4\u5199\u5165\u8ffd\u52a0\u5230\u78c1\u76d8\u6587\u4ef6\u3002\u6839\u636e\u914d\u7f6e\u7684\u5237\u76d8\u7b56\u7565\u4e0d\u540c\uff0c\u5b9e\u4f8b\u91cd\u542f\u4e22\u6389\u7684\u6570\u636e\u91cf\u4e5f\u4e0d\u4e00\u6837\u3002\u73b0\u5728\u6709\u4e0b\u9762\u4e09\u79cd\u65b9\u5f0f:\\n\\n* appendfsync = always \u6bcf\u6761\u5199\u5165\u90fd\u4f1a\u5237\u76d8, \u6700\u591a\u53ea\u4f1a\u4e22\u5931\u5f53\u524d\u6b63\u5728\u5199\u5165\u7684\u547d\u4ee4\\n* appendfsync = everysec \u6bcf\u79d2\u5237\u4e00\u6b21\u76d8, \u6700\u591a\u4e22\u5931\u4e00\u79d2\u7684\u6570\u636e\\n* appendfsync = no \u4e0d\u663e\u5f0f\u5237\u76d8\u3002\u6ce8\u610f\u4e0d\u662f\u4e0d\u5237\u76d8\u800c\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u6765\u51b3\u5b9a\u4f55\u65f6\u5237\u76d8(linux \u8c8c\u4f3c\u5927\u90e8\u5206\u9ed8\u8ba4\u662f 30s)\u3002\u53ef\u80fd\u4f1a\u4e22\u5931\u5237\u76d8\u4e4b\u524d\u7684\u5199\u5165\u6570\u636e\u3002\\n\\naof \u6301\u4e45\u5316\u65b9\u5f0f\u7684\u4f18\u70b9\u5c31\u662f\u91cd\u542f\u4e22\u5931\u7684\u6570\u636e\u4f1a\u6bd4 rdb \u5c11\u3002\u7f3a\u70b9\u56e0\u4e3a\u5199\u5165\u547d\u4ee4\u8ffd\u52a0\u5199\u5165\u7684\u65b9\u5f0f\uff0c\u5728\u5199\u5165\u6bd4\u8f83\u591a\u7684\u573a\u666f\u4e0b\u4f1a\u5bfc\u81f4\u91cd\u542f\u52a0\u8f7d\u6570\u636e\u592a\u6162\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u5bf9 key \u505a 1000 \u6b21 incr, \u5219 aof \u6587\u4ef6\u5219\u4f1a\u8bb0\u5f55 1000 \u6b21 incr\uff0c\u800c rdb \u53ea\u5b58\u50a8 1000 \u8fd9\u4e2a\u503c\u5373\u53ef\u3002\u4e0d\u8fc7 aof \u5141\u8bb8 rewrite, \u6bd4\u5982\u628a\u4f8b\u5b50\u91cc\u9762\u7684 1000 \u6b21 incr a \u53d8\u6210\u4e00\u6b21 incr a 1000 \u547d\u4ee4\uff0c\u8fd9\u4e2a\u662f\u53e6\u5916\u4e00\u4e2a\u8bdd\u9898\u4e86\u3002\\n\\n### 2) \u6df7\u5408\u5199\u5165\\n\\n\u4e0a\u9762\u5df2\u7ecf\u8bf4\u660e\u4e86 rdb \u548c aof \u5404\u81ea\u7684\u4f18\u7f3a\u70b9\uff0cRedis 4.0 \u5f00\u59cb\u652f\u6301 rdb \u548c aof \u7684\u6df7\u5408\u6301\u4e45\u5316(\u9ed8\u8ba4\u5173\u95ed)\u3002\u5982\u679c\u628a\u6df7\u5408\u6301\u4e45\u5316\u6253\u5f00\uff0caof rewrite \u7684\u65f6\u5019\u5c31\u76f4\u63a5\u628a rdb \u7684\u5185\u5bb9\u5199\u5230 aof \u6587\u4ef6\u5f00\u5934\u3002aof \u6587\u4ef6\u5185\u5bb9\u4f1a\u53d8\u6210\u5982\u4e0b:\\n\\n\\n```\\n             +------------------------+\\n             |                        |   \\n             |                        |   \\n             |          RDB           |   \\n             |         FORMAT         |   \\n             |                        |   \\n             |                        |   \\n             |                        |   \\n             +------------------------+\\n             |                        |   \\n             |        AOF             |   \\n             |       FORMAT           |   \\n             +------------------------+\\n```\\n\\n\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u53ef\u4ee5\u7ed3\u5408 rdb \u548c aof \u7684\u4f18\u70b9, \u5feb\u901f\u52a0\u8f7d\u540c\u65f6\u907f\u514d\u4e22\u5931\u8fc7\u591a\u7684\u6570\u636e\u3002\u5f53\u7136\u7f3a\u70b9\u4e5f\u662f\u6709\u7684\uff0c aof \u91cc\u9762\u7684 rdb \u90e8\u5206\u5c31\u662f\u538b\u7f29\u683c\u5f0f\u4e0d\u518d\u662f aof \u683c\u5f0f\uff0c\u53ef\u8bfb\u6027\u5dee\u3002\\n\\n#### 2.1) \u6df7\u5408\u6301\u4e45\u5316\u5b9e\u73b0\\n\\n\u4e0b\u9762\u662f aof.c \u91cc\u9762\u5728\u505a aof \u6587\u4ef6\u5199\u5165\u7684\u4ee3\u7801\uff0c\u5177\u4f53\u51fd\u6570 `rewriteAppendOnlyFile` :\\n\\n```c\\n\\t// aof_use_rdb_preamble = 1 \u8868\u793a\u6253\u5f00\u6df7\u5408\u5b58\u50a8\u6a21\u5f0f\\n    if (server.aof_use_rdb_preamble) {\\n        int error;\\n        // aof \u6587\u4ef6\u524d\u9762\u90e8\u5206\u5c31\u662f\u76f4\u63a5\u5199\u5165 rdb \u6587\u4ef6\\n        if (rdbSaveRio(&aof,&error,RDB_SAVE_AOF_PREAMBLE,NULL) == C_ERR) {\\n            errno = error;\\n            goto werr;\\n        }    \\n    } else {\\n    \\t    // \u5982\u679c\u662f\u5173\u95ed\u6df7\u5408\u5b58\u50a8\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u4fdd\u6301 aof \u683c\u5f0f\\n        if (rewriteAppendOnlyFileRio(&aof) == C_ERR) goto werr;\\n    } \\n```\\n\\n\\n#### 2.2) \u6df7\u5408 aof \u52a0\u8f7d\\n\\n\u5f00\u542f\u6df7\u5408\u5b58\u50a8\u6a21\u5f0f\u540e aof \u6587\u4ef6\u52a0\u8f7d\u7684\u6d41\u7a0b\u5982\u4e0b:\\n\\n1. aof \u6587\u4ef6\u5f00\u5934\u662f rdb \u7684\u683c\u5f0f, \u5148\u52a0\u8f7d rdb \u5185\u5bb9\u518d\u52a0\u8f7d\u5269\u4f59\u7684 aof\\n2. aof \u6587\u4ef6\u5f00\u5934\u4e0d\u662f rdb \u7684\u683c\u5f0f\uff0c\u76f4\u63a5\u4ee5 aof \u683c\u5f0f\u52a0\u8f7d\u6574\u4e2a\u6587\u4ef6\\n\\n```c\\n    char sig[5]; /* \\"REDIS\\" */\\n    if (fread(sig,1,5,fp) != 5 || memcmp(sig,\\"REDIS\\",5) != 0) { \\n    \\t    // \u524d\u90e8\u5206\u5185\u5bb9\u4e0d\u662f rdb \u683c\u5f0f\uff0c\u4e0d\u662f\u6df7\u5408\u6301\u4e45\u5316\u7684\u65b9\u5f0f\\n        if (fseek(fp,0,SEEK_SET) == -1) goto readerr;\\n    } else {\\n        rio rdb; \\n\\n        serverLog(LL_NOTICE,\\"Reading RDB preamble from AOF file...\\");\\n        if (fseek(fp,0,SEEK_SET) == -1) goto readerr;\\n        rioInitWithFile(&rdb,fp);\\n        // \u524d\u9762\u90e8\u5206\u662f rdb \u683c\u5f0f\u8bf4\u660e\u662f\u6df7\u5408\u6301\u4e45\u5316\uff0c\u5148\u52a0\u8f7d rdb \u540e\u9762\u903b\u8f91\u518d\u52a0\u8f7d aof\\n        if (rdbLoadRio(&rdb,NULL) != C_OK) {\\n            serverLog(LL_WARNING,\\"Error reading the RDB preamble of the AOF file, AOF loading aborted\\");\\n            goto readerr;\\n        } else {\\n            serverLog(LL_NOTICE,\\"Reading the remaining AOF tail...\\");\\n        }    \\n    } \\n    ...\\n    // \u52a0\u8f7d aof \u683c\u5f0f\u7684\u6570\u636e\\n    \\n```\\n\\n\u5224\u65ad aof \u6587\u4ef6\u7684\u524d\u9762\u90e8\u5206\u662f\u5426\u4e3a rdb \u683c\u5f0f\uff0c\u53ea\u9700\u8981\u5224\u65ad\u524d 5 \u4e2a\u5b57\u7b26\u662f\u5426\u662f `REDIS`\u3002\u8fd9\u4e2a\u662f\u56e0\u4e3a rdb \u6301\u4e45\u5316\u5f00\u5934\u5c31\u662f `REDIS`, \u540c\u65f6 aof \u547d\u4ee4\u5f00\u5934\u4e00\u5b9a\u4e0d\u4f1a\u662f REDIS\uff08\u547d\u4ee4\u5f00\u5934\u90fd\u662f `*`\uff09\u3002"},{"id":"posts-redis-new-sync","metadata":{"permalink":"/posts-redis-new-sync","source":"@site/blog/2017-01-21-redis-new-psync.md","title":"Redis 4.0 psync \u4f18\u5316","description":"\u4e0a\u4e00\u7bc7\u4ecb\u7ecd\u4e86 \uff0c\u540c\u65f6\u4e5f\u63d0\u5230 redis 4.0 \u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u6539\u52a8\u5c31\u662f psync \u4f18\u5316, \u672c\u7bc7\u4f1a\u4ecb\u7ecd\u8fd9\u4e2a\u4f18\u5316\u7684\u90e8\u5206\u3002","date":"2017-01-21T00:00:00.000Z","formattedDate":"January 21, 2017","tags":[{"label":"Redis","permalink":"/tags/redis"}],"readingTime":7.73,"truncated":true,"authors":[],"frontMatter":{"title":"Redis 4.0 psync \u4f18\u5316","slug":"posts-redis-new-sync","tags":["Redis"]},"prevItem":{"title":"Redis 4.0 RDB \u548c AOF \u6df7\u5408\u5b58\u50a8","permalink":"/posts-redis-mixed-format"},"nextItem":{"title":"Redis 4.0 \u6a21\u5757\u529f\u80fd","permalink":"/posts-redis-module"}},"content":"\u4e0a\u4e00\u7bc7\u4ecb\u7ecd\u4e86 [<Redis-4.0 module\u5b9e\u73b0>](http://www.hulkdev.com/posts/redis-module)\uff0c\u540c\u65f6\u4e5f\u63d0\u5230 redis 4.0 \u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u6539\u52a8\u5c31\u662f psync \u4f18\u5316, \u672c\u7bc7\u4f1a\u4ecb\u7ecd\u8fd9\u4e2a\u4f18\u5316\u7684\u90e8\u5206\u3002\\n\\n\u5728 2.8 \u7248\u672c\u4e4b\u524d redis \u6ca1\u6709\u589e\u91cf\u540c\u6b65\u7684\u529f\u80fd\uff0c\u4e3b\u4ece\u53ea\u8981\u91cd\u8fde\u5c31\u5fc5\u987b\u5168\u91cf\u540c\u6b65\u6570\u636e\u3002\u5982\u679c\u5b9e\u4f8b\u6570\u636e\u91cf\u6bd4\u8f83\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u7f51\u7edc\u8f7b\u8f7b\u4e00\u6296\u5c31\u4f1a\u628a\u4e3b\u4ece\u7684\u7f51\u5361\u8dd1\u6ee1\u4ece\u800c\u5f71\u54cd\u6b63\u5e38\u670d\u52a1\uff0c\u8fd9\u662f\u4e00\u4e2a\u86cb\u75bc\u7684\u95ee\u9898\u30022.8 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5f15\u5165\u4e86 psync (partial sync)\u529f\u80fd\uff0c\u987e\u540d\u601d\u4e49\u5c31\u662f\u589e\u91cf\u540c\u6b65\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n### 1) 2.8 \u7248\u672c\u7684 psync \u673a\u5236\\n\\n2.8 \u5f15\u5165 psync \u4e4b\u540e\u7684\u540c\u6b65\u673a\u5236:\\n\\n* \u4ece\u5e93\u5c1d\u8bd5\u53d1\u9001 psync \u547d\u4ee4\u5230\u4e3b\u5e93\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528 sync \u547d\u4ee4\u8fdb\u884c\u5168\u91cf\u540c\u6b65\\n* \u4e3b\u5e93\u5224\u65ad\u662f\u5426\u6ee1\u8db3 psync \u6761\u4ef6, \u6ee1\u8db3\u5c31\u8fd4\u56de `+CONTINUE` \u8fdb\u884c\u589e\u91cf\u540c\u6b65, \u5426\u5219\u8fd4\u56de `+FULLRESYNC runid offfset`\\n\\n\\n***redis \u5224\u65ad\u662f\u5426\u5141\u8bb8 psync \u6709\u4e24\u4e2a\u6761\u4ef6:***\\n\\n* \u6761\u4ef6\u4e00: psync \u547d\u4ee4\u643a\u5e26\u7684 runid \u9700\u8981\u548c\u4e3b\u5e93\u7684 runid \u4e00\u81f4\u624d\u53ef\u4ee5\u8fdb\u884c\u589e\u91cf\u540c\u6b65\uff0c\u5426\u5219\u9700\u8981\u5168\u91cf\u540c\u6b65\u3002\\n\\n> NOTE: \u4e3b\u5e93\u7684 runid \u662f\u5728\u4e3b\u5e93\u8fdb\u7a0b\u542f\u52a8\u4e4b\u540e\u751f\u6210\u7684\u552f\u4e00\u6807\u8bc6(\u7531\u8fdb\u7a0bid\u52a0\u4e0a\u968f\u673a\u6570\u7ec4\u6210), \u5728\u7b2c\u4e00\u6b21\u5168\u91cf\u540c\u6b65\u7684\u65f6\u5019\u53d1\u9001\u7ed9\u4ece\u5e93\uff0c\u4e0a\u9762\u6709\u770b\u5230 FULLSYNC \u8fd4\u56de\u5e26\u6709 runid \u548c offset, \u4ece\u5e93\u4f1a\u5728\u5185\u5b58\u7f13\u5b58\u8fd9\u4e2a runid \u548c offset \u4fe1\u606f\\n\\n\\n```c\\n    if (strcasecmp(master_runid, server.runid)) {\\n        if (master_runid[0] != \'?\') {\\n            redisLog(REDIS_NOTICE,\\"Partial resynchronization not accepted: \\"\\n                \\"Runid mismatch (Client asked for \'%s\', I\'m \'%s\')\\",\\n                master_runid, server.runid);\\n        } else {\\n            redisLog(REDIS_NOTICE,\\"Full resync requested by slave %s\\",\\n                replicationGetSlaveName(c));\\n        }    \\n        goto need_full_resync;\\n    } \\n```\\n\\n* \u6761\u4ef6\u4e8c:  psync \u547d\u4ee4\u643a\u5e26\u7684 offset \u662f\u5426\u8d85\u8fc7\u7f13\u51b2\u533a\u3002\u5982\u679c\u8d85\u8fc7\u5219\u9700\u8981\u5168\u91cf\u540c\u6b65\uff0c\u5426\u5219\u5c31\u8fdb\u884c\u589e\u91cf\u540c\u6b65\u3002\\n\\n> NOTE: backlog \u662f\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f(\u9ed8\u8ba41M)\u7684\u73af\u5f62\u7f13\u51b2\u533a\uff0c\u7528\u6765\u7f13\u5b58\u4e3b\u4ece\u540c\u6b65\u7684\u6570\u636e\u3002\u5982\u679c offset \u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\u8bf4\u660e\u4e2d\u95f4\u6709\u4e00\u6bb5\u6570\u636e\u5df2\u7ecf\u4e22\u5931\uff0c\u9700\u8981\u5168\u91cf\u540c\u6b65\u3002\\n\\n```c\\n    if (!server.repl_backlog ||\\n        psync_offset < server.repl_backlog_off ||\\n        psync_offset > (server.repl_backlog_off + server.repl_backlog_histlen))\\n    {    \\n        redisLog(REDIS_NOTICE,\\n            \\"Unable to partial resync with slave %s for lack of backlog (Slave request was: %lld).\\", replicationGetSlaveName(c), psync_offset);\\n        if (psync_offset > server.master_repl_offset) {\\n            redisLog(REDIS_WARNING,\\n                \\"Warning: slave %s tried to PSYNC with an offset that is greater than the master replication offset.\\", replicationGetSlaveName(c));\\n        }\\n        goto need_full_resync;\\n    }\\n```\\n\\n\u6709\u4e86 psync \u4e4b\u540e\u4e3b\u4ece\u77ed\u65f6\u95f4\u65ad\u6389\u91cd\u8fde\u5c31\u53ef\u4ee5\u4e0d\u7528\u5168\u91cf\u540c\u6b65\u6570\u636e\u3002\u524d\u63d0\u4e5f\u662f\u8fd9\u6bb5\u65f6\u95f4\u7684\u5199\u5165\u4e0d\u80fd\u8d85\u8fc7\u7f13\u51b2\u533a\u3002\u5982\u679c\u5199\u5165\u91cf\u6bd4\u8f83\u5927\u7684\uff0c\u4e5f\u5efa\u8bae\u7a0d\u5fae\u8c03\u5927\u8fd9\u4e2a\u7f13\u51b2\u533a\u3002\\n\\n\\n### 2) \u95ee\u9898\\n\\n\u867d\u7136 2.8 \u5f15\u5165\u7684 psync \u53ef\u4ee5\u89e3\u51b3\u77ed\u65f6\u95f4\u4e3b\u4ece\u540c\u6b65\u65ad\u6389\u91cd\u8fde\u95ee\u9898\uff0c\u4f46\u4ee5\u4e0b\u51e0\u4e2a\u573a\u666f\u4ecd\u7136\u662f\u9700\u8981\u5168\u91cf\u540c\u6b65:\\n\\n1. \u4e3b\u5e93/\u4ece\u5e93\u6709\u91cd\u542f\u8fc7\u3002\u56e0\u4e3a runnid \u91cd\u542f\u540e\u5c31\u4f1a\u4e22\u5931\uff0c\u6240\u4ee5\u5f53\u524d\u673a\u5236\u65e0\u6cd5\u505a\u589e\u91cf\u540c\u6b65\u3002\\n2. \u4ece\u5e93\u63d0\u5347\u4e3a\u4e3b\u5e93\u3002\u5176\u4ed6\u4ece\u5e93\u5207\u5230\u65b0\u4e3b\u5e93\u5168\u90e8\u8981\u5168\u91cf\u4e0d\u540c\u6570\u636e\uff0c\u56e0\u4e3a\u65b0\u4e3b\u5e93\u7684 runnid \u8ddf\u8001\u7684\u4e3b\u5e93\u662f\u4e0d\u4e00\u6837\u7684\u3002\\n\\n\u8fd9\u4e24\u4e2a\u5e94\u8be5\u662f\u6211\u4eec\u6bd4\u8f83\u5e38\u89c1\u7684\u573a\u666f\u3002\u4e3b\u5e93\u5207\u6362\u6216\u8005\u91cd\u542f\u90fd\u9700\u8981\u5168\u91cf\u540c\u6b65\u6570\u636e\u5728\u4ece\u5e93\u5b9e\u4f8b\u6bd4\u8f83\u5927\u6216\u8005\u591a\u7684\u573a\u666f\u4e0b\uff0c\u90a3\u5185\u7f51\u7f51\u7edc\u5e26\u5bbd\u548c\u670d\u52a1\u90fd\u4f1a\u6709\u5f88\u5927\u7684\u5f71\u54cd\u3002\u6240\u4ee5 redis 4.0 \u5bf9 psync \u4f18\u5316\u4e4b\u540e\u53ef\u4ee5\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u89c4\u907f\u8fd9\u4e9b\u95ee\u9898\u3002\\n\\n### 3\uff09\u65b0\u7248 psync \u673a\u5236\\n\\n\u4e3a\u4e86\u89e3\u51b3\u4e3b\u4ece\u89d2\u8272\u5207\u6362\u5bfc\u81f4\u7684\u91cd\u65b0\u5168\u91cf\u540c\u6b65\uff0credis 4.0 \u5f15\u5165\u591a\u53e6\u5916\u4e00\u4e2a\u53d8\u91cf replid2 \u6765\u5b58\u653e\u540c\u6b65\u8fc7\u7684\u4e3b\u5e93\u7684 replid\uff0c\u540c\u65f6 replid \u5728\u4e0d\u540c\u89d2\u8272\u610f\u4e49\u4e5f\u6709\u5199\u53d8\u5316\u3002replid \u5728\u4e3b\u5e93\u7684\u610f\u4e49\u548c\u4e4b\u524d replid \u4ecd\u7136\u662f\u4e00\u6837\u7684\uff0c\u4f46\u5bf9\u4e8e\u4ece\u5e93\u6765\u8bf4\uff0creplid \u8868\u793a\u5f53\u524d\u6b63\u5728\u540c\u6b65\u7684\u4e3b\u5e93\u7684 replid \u800c\u4e0d\u518d\u662f\u672c\u8eab\u7684 replid\u3002replid2 \u5219\u8868\u793a\u524d\u4e00\u4e2a\u4e3b\u5e93\u7684 replid\uff0c\u8fd9\u4e2a\u5728\u4e3b\u4ece\u89d2\u8272\u5207\u6362\u7684\u65f6\u5019\u4f1a\u7528\u5230\u3002\\n\\n```c\\nstruct redisServer {\\n\\t...\\n    /* Replication (master) */                                        \\n    char replid[CONFIG_RUN_ID_SIZE+1];  /* My current replication ID. */\\n    char replid2[CONFIG_RUN_ID_SIZE+1]; /* replid inherited from master*/ \\n```\\n\\n\u5728\u4e3b\u5e93\u5224\u65ad\u662f\u5426\u5141\u8bb8 psync \u7684\u5224\u65ad\u6761\u4ef6\u4e5f\u6709\u4e86\u4e00\u4e9b\u53d8\u5316\uff1a\\n\\n```c\\n\\t// \u4ece\u5e93\u53d1\u9001\u8fc7\u6765\u7684 replid \u662f\u5f53\u524d\u5b9e\u4f8b\u7684 replid, \u8bf4\u660e\u4e4b\u524d\u5c31\u662f\u8fd9\u4e2a\u5b9e\u4f8b\u7684\u4ece\u5e93\\n\\t// \u6216\u8005\u548c\u8be5\u4e3b\u5e93\u66fe\u7ecf\u5c5e\u4e8e\u540c\u4e00\u4e3b\u5e93\u53ef\u4ee5\u4f46\u540c\u6b65\u8fdb\u5ea6\u4e0d\u80fd\u6bd4\u5f53\u524d\u4e3b\u5e93\u8fd8\u5feb\\n    if (strcasecmp(master_replid, server.replid) &&                        \\n        (strcasecmp(master_replid, server.replid2) ||                           \\n         psync_offset > server.second_replid_offset))                                {\\n     \\t...\\n    \\t\\tgoto need_full_resync;\\n    \uff5d\\n    \\n    // \u5224\u65ad\u540c\u6b65\u8fdb\u5ea6\u662f\u5426\u5df2\u7ecf\u8d85\u8fc7\u8303\u56f4\\n    if (!server.repl_backlog ||                                                        \\n        psync_offset < server.repl_backlog_off ||                                      \\n        psync_offset > (server.repl_backlog_off + server.repl_backlog_histlen))        \\n    {                                                                                  \\n        serverLog(LL_NOTICE,                                                           \\n            \\"Unable to partial resync with slave %s for lack of backlog (Slave request was: %lld).\\", replicationGetSlaveName(c), psync_offset);\\n        if (psync_offset > server.master_repl_offset) {\\n            serverLog(LL_WARNING,\\n                \\"Warning: slave %s tried to PSYNC with an offset that is greater than the master replication offset.\\", replicationGetSlaveName(c));\\n        }       \\n        goto need_full_resync;\\n    }  \\n```\\n\\n\u4ece\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u4e3b\u5e93\u5224\u65ad\u6761\u4ef6\u76f8\u6bd4\u4e4b\u524d\u7248\u672c\u591a\u4e86\u4e00\u4e2a replid2 \u7684\u5224\u65ad\u3002\u5982\u679c\u4e4b\u524d\u8fd9\u4e24\u4e2a\u66fe\u7ecf\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4e3b\u5e93(\u591a\u7ea7\u4e5f\u5141\u8bb8)\uff0c \u90a3\u4e48\u65b0\u4e3b\u5e93\u7684 replid2 \u5c31\u662f\u4e4b\u524d\u4e3b\u5e93\u7684 replid\u3002\u53ea\u8981\u4e4b\u524d\u662f\u540c\u4e00\u4e3b\u5e93\u4e14\u65b0\u4e3b\u5e93\u7684\u540c\u6b65\u8fdb\u5ea6\u6bd4\u8fd9\u4e2a\u4ece\u5e93\u8fd8\u5feb\u5c31\u5141\u8bb8\u589e\u91cf\u540c\u6b65\u3002\u5f53\u7136\u524d\u63d0\u4e5f\u662f\u65b0\u4e3b\u4ece\u7684\u5199\u5165\u843d\u540e\u4e0d\u80fd\u8d85\u8fc7 backlog \u5927\u5c0f\u3002\\n\\n\u4e3e\u4e2a\u6817\u5b50\uff0c\u5047\u8bbe A <- B <- C \u8fd9\u79cd\u90e8\u7f72\u7ed3\u6784\u6765\u8bf4\uff0c A \u662f B \u7684\u4e3b\u5e93\uff0cB \u662f C \u7684\u4e3b\u5e93\u3002\u5982\u679c\u628a C \u63d0\u6210\u65b0\u7684\u4e3b\u5e93\uff0cC <- A \u4ee5\u53ca C <- B \u90fd\u53ef\u4ee5\u589e\u91cf\u540c\u6b65\uff0c\u56e0\u4e3a\u5207\u6362\u540e C \u7684 replid2 \u5176\u5b9e\u5c31\u662f A\u3002\\n\\n\u53e6\u5916\u4e00\u65b9\u9762\uff0c\u5728\u505a rdb \u5907\u4efd\u7684\u65f6\u5019 replid \u548c offset \u4f1a\u88ab\u6301\u4e45\u5316\u5230 rdb \u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u8bf4\u751a\u81f3\u662f\u670d\u52a1\u91cd\u542f\u4e86\u4e5f\u53ef\u4ee5\u8fdb\u884c\u589e\u91cf\u540c\u6b65\uff0c\u5177\u4f53\u89c1 `rdbSaveInfoAuxFields` \u51fd\u6570\u5b9e\u73b0\u3002\\n\\n### 4\uff09\u603b\u7ed3\\n\\n\u5728\u4e3b\u5e93\u6709\u95ee\u9898\u7684\u65f6\u5019\u60f3\u8981\u628a\u5176\u4e2d\u7684\u4e00\u4e2a\u4ece\u5e93\u63d0\u4e3a\u4e3b\u5e93\uff0c\u53ea\u8981\u8fd9\u4e2a\u4ece\u5e93\u662f\u8fd9\u6279\u4ece\u5e93\u4e4b\u4e2d\u540c\u6b65\u6700\u5feb\u7684\u5c31\u5176\u4ed6\u4ece\u5e93\u5207\u8fc7\u6765\u4e0d\u9700\u8981\u5168\u91cf\u540c\u6b65\u6570\u636e\u3002\u540c\u65f6 rdb \u91cc\u9762\u8fd8\u5bf9 replid \u548c offset \u8fdb\u884c\u6301\u4e45\u5316\uff0c\u5373\u4f7f\u5b9e\u4f8b\u91cd\u542f\u4e5f\u53ef\u4ee5\u505a\u589e\u91cf\u540c\u6b65\u3002\u6709\u4e86\u8fd9\u4e2a\u4f18\u5316\u4e4b\u540e\u4e4b\u540e\u5207\u6362\u7684\u6210\u672c\u5c31\u5927\u5927\u964d\u4f4e\u4e86\uff0c\u670d\u52a1\u4e5f\u4f1a\u66f4\u52a0\u5e73\u6ed1\u3002\\n\\n> NOTE: \u535a\u5ba2\u8fd9\u662f\u8bb0\u5f55\u81ea\u5df1\u5f53\u524d\u9636\u6bb5\u4e00\u4e9b\u60f3\u6cd5, \u4e0d\u4fdd\u8bc1\u5b8c\u5168\u6b63\u786e\u3002\u5982\u679c\u6709\u8bef\u7684\u5730\u65b9\uff0c\u4f60\u5012\u662f\u6765\u6253\u6211\u554a?"},{"id":"posts-redis-module","metadata":{"permalink":"/posts-redis-module","source":"@site/blog/2017-01-19-redis-module.md","title":"Redis 4.0 \u6a21\u5757\u529f\u80fd","description":"\u76f4\u5230\u4eca\u5929\u4e3a\u6b62 (2017-01-17) Redis 4.0 \u5df2\u7ecf\u53d1\u5e03\u4e86\u4e24\u4e2a rc \u7248\u672c, \u76f8\u6bd4\u4e8e\u4e0a\u4e2a\u7248\u672c(3.2)\uff0c\u8fd9\u4e2a\u7248\u672c\u7684\u6539\u52a8\u5e94\u8be5\u8bf4\u662f\u5de8\u5927\u7684\u3002\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u70b9:","date":"2017-01-19T00:00:00.000Z","formattedDate":"January 19, 2017","tags":[{"label":"Redis","permalink":"/tags/redis"}],"readingTime":7.06,"truncated":true,"authors":[],"frontMatter":{"title":"Redis 4.0 \u6a21\u5757\u529f\u80fd","slug":"posts-redis-module","tags":["Redis"]},"prevItem":{"title":"Redis 4.0 psync \u4f18\u5316","permalink":"/posts-redis-new-sync"},"nextItem":{"title":"php consumergroup \u4ecb\u7ecd","permalink":"/posts-opensource-intro-consumergroup"}},"content":"\u76f4\u5230\u4eca\u5929\u4e3a\u6b62 (2017-01-17) Redis 4.0 \u5df2\u7ecf\u53d1\u5e03\u4e86\u4e24\u4e2a rc \u7248\u672c, \u76f8\u6bd4\u4e8e\u4e0a\u4e2a\u7248\u672c(3.2)\uff0c\u8fd9\u4e2a\u7248\u672c\u7684\u6539\u52a8\u5e94\u8be5\u8bf4\u662f\u5de8\u5927\u7684\u3002\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u70b9:\\n\\n* \u589e\u52a0\u4e86\u6a21\u5757\u7684\u529f\u80fd, \u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6269\u5c55\u547d\u4ee4\u548c\u6570\u636e\u7ed3\u6784\\n* psync \u4f18\u5316\uff0c\u907f\u514d\u4e3b\u4ece\u5207\u6362\u8fc7\u7a0b\u9700\u8981\u91cd\u65b0\u5168\u91cf\u540c\u6b65\\n* DEL, FLUSHALL/FLUSHDB\u5f02\u6b65\u5316\uff0c\u4e0d\u4f1a\u963b\u585e\u4e3b\u7ebf\u7a0b\\n* RDB-AOF \u6df7\u5408\u6301\u4e45\u5316\\n* \u65b0\u589e MEMORY \u547d\u4ee4\\n* \u96c6\u7fa4\u517c\u5bb9  NAT / Docker\\n\\n\u6bcf\u4e2a\u529f\u80fd\u90fd\u5f88\u503c\u5f97\u671f\u5f85\uff0c\u672c\u7bc7\u535a\u5ba2\u4f1a\u91cd\u70b9\u6765\u4ecb\u7ecd Redis \u7684\u6a21\u5757\u529f\u80fd\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n### 1) \u4e3a\u4ec0\u4e48\u5f15\u5165\u6a21\u5757\\n\\n\u4e0b\u9762\u662f\u5f15\u7528 Redis \u4f5c\u8005\u7684\u4e00\u6bb5\u8bf4\u660e:\\n\\n> \u300cAt the same time, years of experience with scripting, demonstrated that scripting is a way to \u201ccompose\u201d existing features, but not a way to extend the capabilities of a system towards use cases it was not designed to cover.\u300d\\n\\n\u5f53\u524d\u867d\u7136\u652f\u6301 lua \u811a\u672c\u6765\u4f5c\u4e3a\u6269\u5c55\u4f46\u66f4\u591a\u7684\u53ea\u662f\u529f\u80fd\u7684\u7ec4\u5408\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ece\u8bbe\u8ba1\u4e0a lua \u811a\u672c\u7684\u65b9\u5f0f\u5e76\u4e0d\u80fd\u6ee1\u8db3\u6269\u5c55\u7684\u9700\u6c42\uff0c\u5982\u6211\u4eec\u60f3\u52a0\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u547d\u4ee4\u4e4b\u7c7b\u3002\\n\\n### 2) \u6a21\u5757\u5185\u90e8\u5b9e\u73b0\\n\\n#### 2.1\uff09\u6a21\u5757\u52a0\u8f7d\\nRedis \u901a\u8fc7 `module load` \u547d\u4ee4\u6765\u52a0\u8f7d\u6a21\u5757\uff0c \u683c\u5f0f\u5982\u4e0b:\\n\\n```shell\\nMODULE LOAD <path> [args...]\\n```\\n\\n\u52a0\u8f7d\u65f6\u6307\u5b9a\u6a21\u5757(so\u6587\u4ef6)\u7684\u8def\u5f84\u4ee5\u53ca\u52a0\u8f7d\u7684\u53c2\u6570\u5217\u8868, \u6ca1\u6709\u53c2\u6570\u53ef\u4ee5\u5ffd\u7565\u3002\\n\\n\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e2a\u547d\u4ee4\u5185\u90e8\u7684\u5b9e\u73b0\u6a21\u5757\u52a0\u8f7d\u7684\u529f\u80fd(module.c):\\n\\n```c\\nint moduleLoad(const char *path, void **module_argv, int module_argc) {\\n    int (*onload)(void *, void **, int);\\n    void *handle;\\n    RedisModuleCtx ctx = REDISMODULE_CTX_INIT;\\n\\n\\t// \u52a0\u8f7d\u6307\u5b9a\u8def\u5f84\u7684\u52a8\u6001\u5e93\\n    handle = dlopen(path,RTLD_NOW|RTLD_LOCAL);\\n    if (handle == NULL) {\\n        serverLog(LL_WARNING, \\"Module %s failed to load: %s\\", path, dlerror());\\n        return C_ERR;\\n    }\\n    // \u68c0\u67e5\u662f\u5426\u6709\u5b9e\u73b0 RedisModule_OnLoad \u51fd\u6570\\n    onload = (int (*)(void *, void **, int))(unsigned long) dlsym(handle,\\"RedisModule_OnLoad\\");\\n    if (onload == NULL) {\\n        serverLog(LL_WARNING,\\n            \\"Module %s does not export RedisModule_OnLoad() \\"\\n            \\"symbol. Module not loaded.\\",path);\\n        return C_ERR;\\n    }\\n    // \u56de\u8c03\u7528\u6237\u81ea\u5b9a\u4e49\u7684 RedisModule_OnLoad \u51fd\u6570\\n    if (onload((void*)&ctx,module_argv,module_argc) == REDISMODULE_ERR) {\\n        if (ctx.module) moduleFreeModuleStructure(ctx.module);\\n        dlclose(handle);\\n        serverLog(LL_WARNING,\\n            \\"Module %s initialization failed. Module not loaded\\",path);\\n        return C_ERR;\\n    }    \\n\\n    // \u628a\u6a21\u5757\u6ce8\u518c\u5230\u6a21\u5757\u5217\u8868\uff0c\u4e3b\u8981\u662f\u65b9\u4fbf\u540e\u9762\u5378\u8f7d\\n    dictAdd(modules,ctx.module->name,ctx.module);\\n    ctx.module->handle = handle;\\n    serverLog(LL_NOTICE,\\"Module \'%s\' loaded from %s\\",ctx.module->name,path);\\n    moduleFreeContext(&ctx);\\n    return C_OK;\\n}\\n```\\n\\n\u6a21\u5757\u52a0\u8f7d\u7684\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u4e3b\u8981\u903b\u8f91\u5c31\u662f\u52a0\u8f7d\u52a8\u6001\u5e93\u5e76\u56de\u8c03\u6307\u5b9a\u7684\u51fd\u6570\u3002\u5176\u4ed6\u6bd4\u5982\u6dfb\u52a0\u6570\u636e\u7ed3\u6784\u548c\u547d\u4ee4\u4e4b\u7c7b\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u91cc\u9762\u6765\u5b9e\u73b0\u3002\u6700\u540e\u518d\u628a\u6a21\u5757\u6dfb\u52a0\u5230\u5df2\u52a0\u8f7d\u7684\u6a21\u5757\u5217\u8868\u4e2d\u3002\\n\\n#### 2.2\uff09 \u81ea\u5b9a\u4e49\u547d\u4ee4\\n\\n\u63a5\u7740\u770b\u4e00\u4e0b\u5982\u4f55\u5f80 Redis \u65b0\u589e\u7528\u6237\u547d\u4ee4\u6216\u8005\u6570\u636e\u7ed3\u6784\u3002\\n\\n\u6211\u4eec\u4ee5 `modules/helloblock.c` \u6a21\u5757\u4e3a\u4f8b\uff0c\u4e0a\u9762\u5df2\u7ecf\u8bf4\u5230\u6a21\u5757\u52a0\u8f7d\u7684\u65f6\u5019\u4f1a\u56de\u8c03\u7528\u6237\u5b9e\u73b0\u7684 `RedisModule_OnLoad`, \u4e0b\u9762\u662f\u8be5\u6a21\u5757\u7684\u5b9e\u73b0:\\n\\n```c\\nint RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\\n    REDISMODULE_NOT_USED(argv);\\n    REDISMODULE_NOT_USED(argc);\\n\\n\\t// \u6a21\u5757\u521d\u59cb\u5316\u51fd\u6570\uff0c\u6bcf\u4e2a\u6a21\u5757\u90fd\u5fc5\u987b\u8c03\u7528\\n    if (RedisModule_Init(ctx,\\"helloblock\\",1,REDISMODULE_APIVER_1)\\n        == REDISMODULE_ERR) return REDISMODULE_ERR;\\n\\n\\t// \u6dfb\u52a0\u4e00\u4e2a hello.block \u547d\u4ee4\\n    if (RedisModule_CreateCommand(ctx,\\"hello.block\\",\\n        HelloBlock_RedisCommand,\\"\\",0,0,0) == REDISMODULE_ERR)\\n        return REDISMODULE_ERR;\\n\\n    return REDISMODULE_OK;\\n}\\n```\\n\\n\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u4e3b\u8981\u505a\u4e86\u4e24\u4e2a\u4e8b\u60c5\uff0c\u4e00\u4e2a\u662f\u8c03\u7528\u6a21\u5757\u521d\u59cb\u5316\u51fd\u6570, \u8fd9\u4e2a\u51fd\u6570\u4f1a\u5c06 Redis \u5bf9\u5916\u63d0\u4f9b\u7684\u63a5\u53e3\u66b4\u9732\u7ed9\u6a21\u5757\u6765\u8c03\u7528\uff0c\u6bcf\u4e2a\u6a21\u5757\u52a0\u8f7d\u65f6\u90fd\u5fc5\u987b\u8c03\u7528\u3002\u53e6\u5916\u505a\u4e00\u4e2a\u4e8b\u60c5\u5c31\u662f\u6211\u4eec\u8fd9\u91cc\u8981\u5173\u5fc3\u7684\uff0c\u5982\u4f55\u6dfb\u52a0\u547d\u4ee4\u5230 Redis\u3002\\n\\n```c\\nint RM_CreateCommand(RedisModuleCtx *ctx, const char *name, RedisModuleCmdFunc cmdfunc, const char *strflags, int firstkey, int lastkey, int keystep) {\\n    struct redisCommand *rediscmd;\\n    RedisModuleCommandProxy *cp;\\n\\t...\\n\\t// \u5ffd\u7565\u6b21\u8981\u7684\u4ee3\u7801\u8def\u5f84\\n\\n    cp = zmalloc(sizeof(*cp));\\n    cp->module = ctx->module;\\n    // \u771f\u6b63\u7684\u5904\u7406\u51fd\u6570\\n    cp->func = cmdfunc;\\n    cp->rediscmd = zmalloc(sizeof(*rediscmd));\\n    cp->rediscmd->name = cmdname;\\n    // \u547d\u4ee4\u5904\u7406\u51fd\u6570\u8bbe\u7f6e\u4e3a RedisModuleCommandDispatcher\\n    cp->rediscmd->proc = RedisModuleCommandDispatcher;\\n    cp->rediscmd->arity = -1;\\n    cp->rediscmd->flags = flags | CMD_MODULE;\\n    cp->rediscmd->getkeys_proc = (redisGetKeysProc*)(unsigned long)cp;\\n    cp->rediscmd->firstkey = firstkey;\\n    cp->rediscmd->lastkey = lastkey;\\n    cp->rediscmd->keystep = keystep;\\n    cp->rediscmd->microseconds = 0;\\n    cp->rediscmd->calls = 0;\\n    dictAdd(server.commands,sdsdup(cmdname),cp->rediscmd);\\n    dictAdd(server.orig_commands,sdsdup(cmdname),cp->rediscmd);\\n    return REDISMODULE_OK;\\n    \\n```\\n\\n\u8fd9\u4e2a\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u521b\u5efa\u4e00\u4e2a `RedisModuleCommandProxy` \u5e76\u628a\u5b83\u7684 `rediscmd` \u4f5c\u4e3a\u547d\u4ee4\u7684\u5904\u7406\u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u5f53\u6709\u547d\u4ee4\u8fc7\u6765\u7684\u65f6\u5019\u4f1a\u8c03\u7528 `RedisModuleCommandDispatcher`, \u7136\u540e\u5b83\u518d\u6765\u8c03\u7528\u6211\u4eec\u771f\u6b63\u7684\u5904\u7406\u51fd\u6570\u3002\\n\\n```c\\nvoid RedisModuleCommandDispatcher(client *c) {\\n    RedisModuleCommandProxy *cp = (void*)(unsigned long)c->cmd->getkeys_proc;\\n    RedisModuleCtx ctx = REDISMODULE_CTX_INIT;\\n\\n    ctx.module = cp->module;\\n    ctx.client = c;\\n    // \u8c03\u7528\u771f\u6b63\u7684\u5904\u7406\u51fd\u6570\\n    cp->func(&ctx,(void**)c->argv,c->argc);\\n    moduleHandlePropagationAfterCommandCallback(&ctx);\\n    moduleFreeContext(&ctx);\\n}\\n```\\n\\n\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u56de\u8c03\u5904\u7406\u51fd\u6570\u800c\u8981\u52a0\u4e00\u5c42\u4ee3\u7406? \u8fd9\u4e2a\u7559\u7ed9\u4f60\u4eec\u81ea\u5df1\u601d\u8003\u5427...\\n\u53e6\u5916\u773c\u5c16\u7684\u5c0f\u4f19\u4f34\u4e5f\u53ef\u80fd\u6ce8\u610f\u5230\u6211\u4eec\u8c03\u7528\u7684\u662f `RedisModule_CreateCommand`, \u4e3a\u4ec0\u4e48\u53d8\u6210 `RM_CreateCommand`? \u8fd9\u662f\u56e0\u4e3a Redis \u505a\u4e86\u4e00\u5c42\u91cd\u547d\u540d\u3002\u5185\u90e8\u5b9e\u73b0\u4e0a\u662f `RM_` \u5f00\u5934, \u5bf9\u5916\u66b4\u9732\u4f7f\u7528 `RedisModule_`, \u8fd9\u4e2a\u662f\u5728 RedisModule_Init \u91cc\u9762\u505a\u7684\u3002\\n\\n### 2.3) \u81ea\u5b9a\u4e49\u6570\u636e\u7ed3\u6784\\n\\n\u6211\u4eec\u4e5f\u4ee5\u5177\u4f53\u6a21\u5757(modules/hellotype.c)\u4e3a\u4f8b,\\n\\n```c\\nint RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\\n    REDISMODULE_NOT_USED(argv);\\n    REDISMODULE_NOT_USED(argc);\\n\\n    if (RedisModule_Init(ctx,\\"hellotype\\",1,REDISMODULE_APIVER_1)\\n        == REDISMODULE_ERR) return REDISMODULE_ERR;\\n\\n    RedisModuleTypeMethods tm = { \\n        .version = REDISMODULE_TYPE_METHOD_VERSION,\\n        .rdb_load = HelloTypeRdbLoad,\\n        .rdb_save = HelloTypeRdbSave,\\n        .aof_rewrite = HelloTypeAofRewrite,\\n        .free = HelloTypeFree\\n    };  \\n    HelloType = RedisModule_CreateDataType(ctx,\\"hellotype\\",0,&tm);\\n    if (HelloType == NULL) return REDISMODULE_ERR\\n}\\n```\\n\\n\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u5b9a\u4e49\u597d\u51e0\u4e2a\u56de\u8c03\u51fd\u6570\u5373\u53ef\u3002Redis \u5e76\u4e0d\u5173\u5fc3\u5916\u90e8\u7684\u6570\u636e\u662f\u5982\u4f55\u64cd\u4f5c\u7684(\u7531\u547d\u4ee4\u51b3\u5b9a)\uff0c \u53ea\u9700\u8981\u5173\u5fc3\u6570\u636e\u8981\u600e\u4e48\u6765\u6301\u4e45\u5316\u4ee5\u53ca\u91ca\u653e\u5373\u53ef\u3002\\n\\n\u66f4\u52a0\u8be6\u7ec6\u7684\u8bf4\u660e\u53ef\u4ee5\u53c2\u7167:\\n\\n[https://github.com/antirez/redis/blob/unstable/src/modules/TYPES.md](https://github.com/antirez/redis/blob/unstable/src/modules/TYPES.md)\\n\\n#### 2.4) \u5176\u4ed6\\n\\n\u5176\u4ed6\u4e00\u4e9b\u4e1c\u897f\u7531\u4e8e\u7bc7\u5e45\u6ca1\u6709\u7ec6\u8bf4\u3002\u63a5\u53e3\u8be6\u7ec6\u8bf4\u660e\u89c1:\\n\\n[https://github.com/antirez/redis/blob/unstable/src/modules/INTRO.md](https://github.com/antirez/redis/blob/unstable/src/modules/INTRO.md)\\n\\n### 3\uff09\u603b\u7ed3\\n\\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230 Redis 4.0 \u5f88\u7b80\u5355\u5c31\u53ef\u4ee5\u8fdb\u884c\u529f\u80fd\u6269\u5c55\uff0c\u5bf9 Redis \u4e5f\u6ca1\u6709\u4fb5\u5165\u6027\u3002 \u540c\u65f6\u6a21\u5757\u662f\u5426\u7a33\u5b9a\u4e5f\u76f4\u63a5\u5f71\u54cd\u5230\u670d\u52a1\u7684\u8d28\u91cf\u3002\u6709\u4e86\u8fd9\u4e2a\u6a21\u5757\u529f\u80fd\u4e4b\u540e\u5c31\u53ef\u4ee5\u652f\u6301\u5f88\u591a\u4e0d\u540c\u4e1a\u52a1\u7684\u5b9a\u5236\u5316\u6570\u636e\u7ed3\u6784\uff0c\u540e\u9762 Redis \u7684\u73a9\u6cd5\u4e5f\u4f1a\u8d8a\u6765\u8d8a\u591a\u3002\\n\\n\u53e6\u5916\u9664\u4e86\u6a21\u5757\u529f\u80fd\u4e4b\u5916\uff0cpsync \u4f18\u5316\uff0cRDB-AOF \u6df7\u5408\u6301\u4e45\u5316\u4ee5\u53ca\u4e00\u4e9b\u547d\u4ee4\u7684\u5f02\u6b65\u5316\u8fd8\u662f\u5f88\u503c\u5f97\u671f\u5f85\uff0c\u63a5\u7740\u4e5f\u4f1a\u6765\u5206\u6790\u8fd9\u51e0\u4e2a\u65b0\u529f\u80fd\u7684\u5b9e\u73b0\u3002\\n\\n\\n\u53c2\u8003\u94fe\u63a5:\\n[http://antirez.com/news/110](http://antirez.com/news/110)\\n[http://antirez.com/news/106](http://antirez.com/news/106)"},{"id":"posts-opensource-intro-consumergroup","metadata":{"permalink":"/posts-opensource-intro-consumergroup","source":"@site/blog/2016-12-27-intro-php-conusmergroup.md","title":"php consumergroup \u4ecb\u7ecd","description":"\u77e5\u9053\u6216\u8005\u719f\u6089 kafka(\u4e0d\u662f\u5199\u5c0f\u8bf4\u7684\u90a3\u4e2a\u5361\u592b\u5361)\uff0c \u90a3\u4e48\u4e00\u5b9a\u77e5\u9053\u5b83\u6709 producer \u548c consumer \u8fd9\u4e24\u79cd\u89d2\u8272\u3002producer \u7528\u6765\u751f\u4ea7\u6d88\u606f\uff0cconsumer \u7528\u6765\u6d88\u8d39\u6d88\u606f\u3002","date":"2016-12-27T00:00:00.000Z","formattedDate":"December 27, 2016","tags":[{"label":"PHP","permalink":"/tags/php"},{"label":"Kafka","permalink":"/tags/kafka"}],"readingTime":4.82,"truncated":false,"authors":[],"frontMatter":{"title":"php consumergroup \u4ecb\u7ecd","slug":"posts-opensource-intro-consumergroup","tags":["PHP","Kafka"]},"prevItem":{"title":"Redis 4.0 \u6a21\u5757\u529f\u80fd","permalink":"/posts-redis-module"},"nextItem":{"title":"tcpkit \u4ecb\u7ecd","permalink":"/posts-intro-tcpkit"}},"content":"\u77e5\u9053\u6216\u8005\u719f\u6089 kafka(\u4e0d\u662f\u5199\u5c0f\u8bf4\u7684\u90a3\u4e2a\u5361\u592b\u5361)\uff0c \u90a3\u4e48\u4e00\u5b9a\u77e5\u9053\u5b83\u6709 producer \u548c consumer \u8fd9\u4e24\u79cd\u89d2\u8272\u3002producer \u7528\u6765\u751f\u4ea7\u6d88\u606f\uff0cconsumer \u7528\u6765\u6d88\u8d39\u6d88\u606f\u3002\\n\\n### 1) \u53ef\u7528\u6027\\n\\n\u4e0b\u9762\u662f\u6765\u81ea\u7ef4\u57fa\u767e\u79d1\u7684\u89e3\u91ca:\\n\\n> \u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u5185\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u529f\u80fd\u4e2a\u4f53\u6765\u8bb2\uff0c\u603b\u7684\u53ef\u7528\u65f6\u95f4\u6240\u5360\u7684\u6bd4\u4f8b\\n\\n\u6bd4\u5982\u6211\u4eec\u4ee5\u5e74\u4e3a\u5355\u4f4d\u6765\u91cf\u5316\u4e00\u4e2a\u670d\u52a1\u7684\u53ef\u7528\u6027\u3002\u5047\u8bbe\u4e00\u5e74 365 \u5929\u5f53\u4e2d\u6709 364 \u5929\u670d\u52a1\u662f\u6b63\u5e38\u670d\u52a1\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8bf4\u8fd9\u4e2a\u670d\u52a1\u7684\u53ef\u7528\u6027\u662f 364/365(\u7528\u8ba1\u7b97\u5668\u53e3\u7b97\u4e86\u4e00\u4e0b\u7ea6 99.72%)\u3002\\n\\n\u6211\u4eec\u5e38\u7528\u51e0\u4e2a 9 \u6765\u8861\u91cf\u4e00\u4e2a\u670d\u52a1\u7684\u53ef\u7528\u6027\uff0c\u4e24\u4e2a 9 \u5c31\u662f 99.99%\uff0c\u4e09\u4e2a 9 \u5373 99.999%, \u56db\u4e2a 9 \u5373 99.9999% ... \u4ee5\u6b64\u7c7b\u63a8\u3002\\n\\n\u53ef\u7528\u6027 | \u6bcf\u5e74\u5b95\u673a\u65f6\u95f4 \\n------------ | -------------\\n99.9% | 8 \u4e2a\u5c0f\u65f6\\n99.99%| 1 \u4e2a\u5c0f\u65f6 \\n99.999%|  5 \u5206\u949f\\n99.9999% | 30 \u79d2\\n\\n\\n### 2\uff09\u6d88\u8d39\u8005\u7684\u53ef\u7528\u6027\\n\\n\u4e00\u822c\u6765\u8bf4 producer \u662f\u5d4c\u5165\u5230\u4e1a\u52a1\u7a0b\u5e8f\uff0c\u90a3\u4e48\u53ef\u7528\u6027\u5c31\u7531\u4e1a\u52a1\u7a0b\u5e8f\u6765\u4fdd\u8bc1\u3002\u800c consumer \u4e00\u822c\u5c31\u662f\u4ee5\u72ec\u7acb\u7684\u7a0b\u5e8f\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u8981\u81ea\u5df1\u6765\u4fdd\u8bc1\u3002\\n\\n\u6240\u4ee5\u60f3\u8ba9 consumer \u505a\u5230 99.99% \u4ee5\u4e0a\u7684\u53ef\u7528\u6027\uff0c\u610f\u5473\u7740\u4e00\u5e74\u5185\u670d\u52a1\u6302\u6389\u7684\u65f6\u95f4\u4e0d\u80fd\u8d85\u8fc7\u4e00\u4e2a\u5c0f\u65f6\u3002\u5047\u8bbe\u6211\u4eec\u6ca1\u6709\u5b9e\u73b0\u4e00\u4e9b\u9ad8\u53ef\u7528\u7684\u673a\u5236\uff0c\u90e8\u5206 consumer \u5728\u534a\u591c\u6302\u4e86\uff0c\u800c\u4f60(\u6216\u8005\u8fd0\u7ef4)\u521a\u597d\u5e72\u5b8c\u4e00\u4e9b\u4e0d\u53ef\u63cf\u8ff0\u7684\u4e8b\u60c5\u4e4b\u540e\u5012\u5934\u5927\u7761\u800c\u6ca1\u6709\u6ce8\u610f\u5230\u62a5\u8b66\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u7684\u53ef\u7528\u6027\u5c31\u8fbe\u4e0d\u5230\u8981\u6c42\u3002\\n\\n\u5f53\u524d scala, java, golang, c \u7248\u672c\u7684\u505a\u6cd5\u90fd\u662f\u76d1\u542c group \u7684 consumer \u5217\u8868\uff0c\u5982\u679c\u6709 consumer \u8fdb\u5165\u6216\u8005\u9000\u51fa\u90fd\u4f1a\u89e6\u53d1\u91cd\u65b0\u5206\u914d\u5206\u533a\uff0c\u628a\u5206\u533a\u5747\u8861\u5230\u5404\u4e2a consumer\u3002\u6240\u4ee5\u7406\u8bba\u4e0a\u6211\u4eec php \u7248\u672c\u4e5f\u53ef\u4ee5\u8fd9\u6837\u505a\u3002\u73b0\u5728\u5df2\u6709\u7684\u5f00\u6e90\u91cc\u9762\u6709 kafka \u548c zookeeper \u7684\u5ba2\u6237\u7aef\u6269\u5c55\u548c\u4f9d\u8d56\u5e93\uff0c\u4f46\u6ca1\u6709\u5b9e\u73b0\u81ea\u52a8\u5e73\u8861\u7684\u903b\u8f91\uff08\u4e5f\u53ef\u80fd\u662f\u6211\u6ca1\u770b\u5230), \u6240\u4ee5\u8fd9\u90e8\u5206\u9700\u8981\u81ea\u5df1\u6765\u505a\u3002\\n\\n### 3) \u5c34\u5c2c\u7684 php\\n\\n\u8fd9\u91cc\u5fc5\u987b\u5148\u627f\u8ba4 php \u662f\u4e16\u754c\u4e0a\u6700\u597d\u7684\u8bed\u8a00\u3002\\n\\nphp \u8981\u5b9e\u73b0 consumer \u7684\u9ad8\u53ef\u7528\u6709\u4e09\u4e2d\u9009\u62e9:\\n\\n* \u5f00\u542f php \u7ebf\u7a0b\u6269\u5c55\\n* c \u5b9e\u73b0 group \u903b\u8f91\\n* \u4e0d\u4f7f\u7528\u591a\u7ebf\u7a0b\uff0c\u8fb9\u6d88\u8d39\u8fb9\u76d1\u63a7\\n\\n\u7b2c\u4e00\u79cd\u65b9\u6848\uff0c\u56e0\u4e3a\u6211\u4eec\u7ebf\u4e0a php \u73af\u5883\u90fd\u662f\u6ca1\u6709\u6253\u5f00\u7ebf\u7a0b\u5b89\u5168, \u6240\u4ee5\u5982\u679c\u8981\u4f7f\u7528\u8fd9\u4e2a\u6269\u5c55\u9700\u8981\u91cd\u65b0\u7f16\u8bd1 php \u6838\u5fc3\u4ee3\u7801\u5e76\u91cd\u542f\u6240\u6709\u670d\u52a1\uff0c\u8fd9\u4e2a\u57fa\u672c\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\u3002\\n\\n\u7b2c\u4e8c\u79cd\u65b9\u6848\uff0c\u53ef\u4ee5\u4e0d\u7528\u91cd\u65b0\u7f16\u8bd1 php, \u6027\u80fd\u597d\u3002\u4f46\u5f00\u53d1\u6210\u672c\u6bd4\u8f83\u9ad8\uff0c\u98ce\u9669\u5927\u3002\\n\\n\u7b2c\u4e09\u79cd\u65b9\u6848, \u7eaf php \u5b9e\u73b0\uff0c\u4ee3\u7801\u7b80\u5355\u53ef\u63a7\uff0c\u4f46\u6027\u80fd\u4f1a\u6bd4\u8f83\u5dee\u4e00\u4e9b\u3002\\n\\n\u6700\u540e\u6211\u4eec\u9009\u62e9\u4e86\u7b2c\u4e09\u79cd\u65b9\u6848\uff0c\u5355\u8fdb\u7a0b\u7a7a\u8dd1(\u53ea\u62c9\u6d88\u606f\u4e0d\u5904\u7406)\u7684\u6027\u80fd\u662f 7w+/s\uff0c \u8fd9\u4e2a\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\\n\\n\\n### 4) \u529f\u80fd\u548c\u4ee3\u7801\u8bf4\u660e\\n\\n* \u5206\u533a\u53d8\u5316\u65f6\u53ef\u81ea\u52a8\u91cd\u65b0\u5206\u914d\u5206\u533a\\n* \u6d88\u8d39\u8fdb\u7a0b\u9000\u51fa\u6216\u8005\u52a0\u5165\u65f6\u53ef\u81ea\u52a8\u91cd\u65b0\u5206\u914d\u5206\u533a\\n* \u81ea\u52a8\u7ba1\u7406 offset\\n* \u517c\u5bb9\u6807\u51c6\u7684 consumer group \u8def\u5f84\uff0c\u65b9\u4fbf\u5df2\u6709\u7684\u5de5\u5177\u76d1\u63a7\\n* \u63a5\u6536\u7528\u6237\u4fe1\u53f7\uff0c\u5e73\u6ed1\u8fdb\u5165\u548c\u9000\u51fa group\\n* \u5141\u8bb8\u5197\u4f59\u7684\u6d88\u8d39\u8fdb\u7a0b\u4f5c\u4e3a\u5907\u4efd\\n\\n\\ngithub \u5730\u5740: [https://github.com/meitu/php-kafka-consumer](https://github.com/meitu/php-kafka-consumer)\\n\\n\u5f53\u524d\u6211\u4eec\u516c\u53f8(\u7f8e\u56fe)\u5185\u90e8\u5df2\u7ecf\u6709\u4e0d\u5c11\u4e1a\u52a1\u5df2\u7ecf\u5728\u7ebf\u4e0a\u4f7f\u7528\uff0c\u5f53\u524d\u7248\u672c\u5df2\u7ecf\u6bd4\u8f83\u7a33\u5b9a\u3002\\n\\n\\n### 5\uff09\u6700\u540e\\n\\n\u524d\u4e00\u6bb5\u65f6\u95f4\u53d1\u73b0\u7ebf\u4e0a consumer \u5185\u5b58\u4e0d\u65ad\u4e0a\u5347\u7684\u60c5\u51b5\uff0c\u7ecf\u6392\u67e5\uff0c\u6700\u7ec8\u5b9a\u4f4d\u5e76\u9a8c\u8bc1\u662f\u4f9d\u8d56\u5e93\u7684 php-zookeeper \u6709\u5185\u5b58\u6cc4\u6f0f\u3002\u73b0\u5728\u5df2\u7ecf\u53cd\u9988\u4ee5\u53ca\u5408\u5e76\u5230\u793e\u533a\u7684 master, \u5177\u4f53\u89c1 [pr](https://github.com/php-zookeeper/php-zookeeper/pull/5)\u3002\\n\\n\u5982\u679c\u4f7f\u7528 release(\u5efa\u8bae) \u7248\u672c\u7684 php-zookeeper, \u9700\u8981\u624b\u52a8 patch \u8fd9\u4e2a bug\uff0c\u5426\u5219\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\u3002\\n\\n\u5982\u679c\u6709\u95ee\u9898\u6216\u8005\u4efb\u4f55\u610f\u89c1\uff0c\u6b22\u8fce issue \u6216\u8005 pr\u3002"},{"id":"posts-intro-tcpkit","metadata":{"permalink":"/posts-intro-tcpkit","source":"@site/blog/2016-11-17-intro-tcpkit.md","title":"tcpkit \u4ecb\u7ecd","description":"\u4e00\u5e74\u5373\u5c06\u8fc7\u53bb\uff0c\u7ffb\u4e86\u4e00\u4e0b\u535a\u5ba2\u53d1\u73b0\u66f4\u65b0\u9891\u7387\u6bd4\u6708\u7ecf\u8fd8\u6765\u5f97\u7a00\u758f\uff0c\u5185\u759a\u5230\u524d\u5217\u817a\u90fd\u840e\u7f29\u4e86\u3002","date":"2016-11-17T00:00:00.000Z","formattedDate":"November 17, 2016","tags":[{"label":"linux","permalink":"/tags/linux"},{"label":"tool","permalink":"/tags/tool"},{"label":"tcpkit","permalink":"/tags/tcpkit"}],"readingTime":6.03,"truncated":true,"authors":[],"frontMatter":{"title":"tcpkit \u4ecb\u7ecd","slug":"posts-intro-tcpkit","tags":["linux","tool","tcpkit"]},"prevItem":{"title":"php consumergroup \u4ecb\u7ecd","permalink":"/posts-opensource-intro-consumergroup"},"nextItem":{"title":"beanstalkd \u8bbe\u8ba1\u4e0e\u5b9e\u73b0","permalink":"/posts-thinking-in-beanstalkd"}},"content":"\u4e00\u5e74\u5373\u5c06\u8fc7\u53bb\uff0c\u7ffb\u4e86\u4e00\u4e0b\u535a\u5ba2\u53d1\u73b0\u66f4\u65b0\u9891\u7387\u6bd4\u6708\u7ecf\u8fd8\u6765\u5f97\u7a00\u758f\uff0c\u5185\u759a\u5230\u524d\u5217\u817a\u90fd\u840e\u7f29\u4e86\u3002\\n\\n\u8f6c\u5165\u6b63\u9898\uff0c\u672c\u7bc7\u535a\u5ba2\u4e3b\u8981\u662f\u5206\u4eab\u4e00\u4e2a\u81ea\u5df1\u65e5\u5e38\u7528\u7684\u6bd4\u8f83\u591a\u5de5\u5177 tcpkit\uff0c \u8be5\u5de5\u5177\u7528\u9014\u4e3b\u8981\u662f\u7528\u6765\u6293\u5305\u548c\u5feb\u901f\u7684\u5206\u6790\u6570\u636e\u5305\u3002\\n\\n\u4ee3\u7801\u5730\u5740: [git-hulk/tcpkit](https://github.com/git-hulk/tcpkit)\\n\\n\x3c!--truncate--\x3e\\n\\n\\n### 1) \u4e3a\u4ec0\u4e48\u8981\u7528\u5b83\\n\\n\u73b0\u5728\u6293\u5305\u4e0d\u6709 tcpdump \u4e48? \u5206\u6790\u5305\u4e0d\u662f\u6709\u5f88\u725b\u903c\u548c\u65b9\u4fbf\u7684 wireshark \u4e48? \u5f53\u7136\u6211\u4e5f\u4e0d\u662f\u95f2\u5230\u524d\u5217\u817a\u53d1\u708e\uff0c\u6d6a\u8d39\u65f6\u95f4\u9020\u51fa\u8fd9\u4e48\u4e2a\u6b63\u65b9\u5f62\u7684\u8f6e\u5b50\u3002\\n\\n\u9020\u8fd9\u4e2a\u8f6e\u5b50\u7684\u539f\u56e0\u662f\u8fd9\u6837\uff0c\u6211\u4eec\u5076\u5c14\u4f1a\u9047\u5230\u7ebf\u4e0a\u8bbf\u95ee\u8d44\u6e90(redis, mc..) \u51fa\u73b0\u8017\u65f6\u6bd4\u8f83\u957f\u7684\u60c5\u51b5\u3002\u5982\u679c\u662f tcpdump \u53ef\u4ee5\u7528\u6765\u6293\u5305\uff0c\u4f46\u5982\u679c\u8bf7\u6c42\u91cf\u5f88\u5927\u53c8\u662f\u5076\u53d1\uff0c\u6211\u8981\u8fd9\u4e48\u77e5\u9053\u54ea\u4e2a\u8fde\u63a5\u6162\u4e86? \u8fd9\u4e2a\u65f6\u5019 wireshark \u4e5f\u662f\u5e2e\u4e0d\u4e0a\u5fd9\u7684(\u56e0\u4e3a\u5b83\u4e0d\u77e5\u9053\u54ea\u4e2a\u6570\u636e\u662f\u8bf7\u6c42\uff0c\u90a3\u4e2a\u6570\u636e\u5305\u662f\u54cd\u5e94\uff0c\u4e5f\u5c31\u6ca1\u529e\u6cd5\u7edf\u8ba1\u5ef6\u65f6)\u3002\\n\\n\u8fd9\u65f6\u5019 tcpkit \u5c31\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u4e86\u3002\\n\\n### 2) \u521d\u89c1\\n\\ntcpkit \u7684\u521d\u8877:\u300c \u8ba9\u4f7f\u7528\u8005\u53ef\u4ee5\u60f3\u5206\u6790\u666e\u901a\u5185\u5b58\u6570\u636e\u4e00\u6837\uff0c\u53ef\u4ee5\u5199\u4ee3\u7801\u8f7b\u677e\u7684\u5206\u6790 udp/tcp \u5305 \u300d\\n\\n\u6bd4\u5982\uff0c\u6211\u4eec\u9ed8\u8ba4\u7684\u811a\u672c\u5c31\u662f 1 \u884c lua \u4ee3\u7801\u5c31\u53ef\u4ee5\u6253\u5370\u6570\u636e\u5305\u5185\u5bb9\uff0c\u5177\u4f53\u89c1 [example.lua](https://github.com/git-hulk/tcpkit/blob/master/scripts/example.lua):\\n\\n```lua\\nfunction process_packet(item)\\n\\t-- sync,ack \u8fd9\u79cd\u5305\u957f\u5ea6\u4e3a 0\uff0c \u6211\u4eec\u5ffd\u7565\u6389\\n    if item.len > 0 then\\n        print(item.payload)\\n    end\\nend\\n```\\n\\n\u6bcf\u6293\u5230\u4e00\u4e2a\u6570\u636e\u5305\u90fd\u4f1a\u56de\u8c03 `process_packet`, \u7136\u540e\u628a\u6570\u636e\u5305\u5185\u5bb9\u4f20\u9012\u8fdb\u6765\uff0c\u8fd9\u6837\u7528\u6237\u4f7f\u7528 lua \u4ee3\u7801\u6765\u5b9a\u5236\u5206\u6790\u7684\u9700\u6c42\u4e86\u3002\u50cf\u4e0a\u9762\u7684\u56de\u8c03\u51fd\u6570\uff0c\u5c31\u662f\u4ec0\u4e48\u90fd\u4e0d\u5206\u6790\u5c31\u770b\u770b\u5185\u5bb9\u3002\\n\\n### 3) \u4e0a\u624b\\n\\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u6211\u8981\u600e\u4e48\u73a9\u8fd9\u4e2a\u4e1c\u897f\u5462\u3002\u6309\u7167\u4e0b\u9762\u6765\u5c31\u53ef\u4ee5\u4e86...\\n\\n```shell\\n$ git clone https://github.com/git-hulk/tcpkit.git /* \u9996\u5148... \u6211\u5f97\u5148\u62ff\u5230\u4ee3\u7801*/\\n$ cd tcpkit/src\\n$ make /* make install \u662f\u53ef\u9009\uff0c\u8981\u4e0d\u8981\u5b89\u88c5\u5230\u6807\u51c6\u7684\u8def\u5f84  */\\n```\\n\\n\u672c\u76ee\u5f55\u5c31\u751f\u6210\u4e86\u4e00\u4e2a tcpkit \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u90a3\u4e48\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u73a9\u5b83\u4e86\uff0c\u59ff\u52bf\u53ef\u4ee5\u53c2\u8003 [README](https://github.com/git-hulk/tcpkit)\\n\\n\u4e3b\u8981\u7684\u51e0\u4e2a\u53c2\u6570\u8bf4\u660e:\\n\\n> -i \u6307\u5b9a\u6293\u5305\u7684\u7f51\u5361\uff0c\u9ed8\u8ba4\u662f any\uff0c\u5c31\u662f\u6240\u6709\u7f51\u5361\uff0c\u4f46\u6709\u4e9b\u7cfb\u7edf\u4e0d\u652f\u6301\\n\\n> -p \u6307\u5b9a\u6293\u5305\u7684\u7aef\u53e3\\n\\n> -s \u5982\u679c\u662f\u5728\u5ba2\u6237\u7aef\u6293\u5305\uff0c\u53ef\u4ee5\u5b9a\u5411\u6293\u5230\u67d0\u4e2a\u670d\u52a1\u7684\u5305\\n\\n> -S \u6307\u5b9a\u5904\u7406\u811a\u672c\u8def\u5f84\uff0c\u56fa\u5b9a\u56de\u8c03 process_packet \u8fd9\u4e2a\u51fd\u6570\\n\\n\u6211\u4eec\u7528 redis/mc \u5ef6\u65f6\u7edf\u8ba1\u7684\u811a\u672c\u4f5c\u4e3a\u4f8b\u5b50\uff0c\u8981\u5ba2\u6237\u7aef\u770b\u770b\u8bf7\u6c42 Redis \u5230\u8fd4\u56de\u8017\u65f6\u591a\u957f\u65f6\u95f4\u3002\\n\\n\u5047\u8bbe redis ip: 192.168.1.1, \u7aef\u53e3: 6379, \u5ba2\u6237\u7aef: 192.168.1.2\uff0c \u90a3\u4e48\u5c31\u5c31\u4e0b\u9762\u8fd9\u6837\u542f\u52a8:\\n\\n```\\nsudo ./tcpkit -s 192.168.1.1 -p 6379 -S ../scripts/redis_mc_monitor.lua\\n```\\n\\n\u7ed3\u679c\u5927\u6982\u5982\u4e0b(ip\u7aef\u53e3\u662f\u4e0d\u5bf9\u5e94\u7684):\\n\\n```shell\\n2020-02-06 23:01:39.706782 127.0.0.1:54484 => 127.0.0.1:6379 | 0.270 ms | GET test_key \\n2020-02-06 23:01:39.712727 127.0.0.1:54540 => 127.0.0.1:6379 | 0.012 ms | PING \\n2020-02-06 23:01:40.004345 127.0.0.1:54554 => 127.0.0.1:6379 | 0.187 ms | SET a b \\n```\\n\\n\u7b2c\u4e00\u5217\u662f\u54cd\u5e94\u7684\u65f6\u523b\uff0c\u7b2c\u4e8c\u5217\u548c\u7b2c\u4e09\u5217\u5206\u522b\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u8fde\u63a5\u7684 ip \u548c\u7aef\u53e3\uff0c\u7b2c\u4e09\u5217\u662f\u5ef6\u65f6\uff0c\u6700\u540e\u4e00\u5217\u662f\u8bf7\u6c42\\n\\n\u5982\u679c\u8dd1\u5728\u670d\u52a1\u7aef\uff0c\u7edf\u8ba1\u5c31\u662f\u670d\u52a1\u7aef\u5904\u7406\u7684\u65f6\u95f4\uff0c\u8017\u65f6\u662f\u5305\u8fdb\u6765\u5230\u51fa\u53bb\u7684\u65f6\u95f4\u5dee\u3002\\n\\nNOTE: \u5728\u670d\u52a1\u7aef\uff0c\u4e0d\u9700\u8981\u6307\u5b9a -s \u8fd9\u4e2a server ip, \u53ea\u9700\u8981\u6307\u5b9a\u7aef\u53e3\u548c\u811a\u672c\\n\\n### 4) \u7b80\u5355\u7edf\u8ba1\u539f\u7406\\n\\n> Q: \u8bf7\u6c42\u548c\u54cd\u5e94\u8981\u600e\u4e48\u5bf9\u5e94\u8d77\u6765? \\n\\nA: \u8fd9\u4e2a\u95ee\u9898\u5982\u679c\u662f\u53d8\u6210\u600e\u4e48\u77e5\u9053\u4e24\u4e2a\u6570\u636e\u5305\u662f\u6765\u81ea\u540c\u4e00\u4e2a\u8fde\u63a5\u5c31\u7b80\u5355\u591a\u4e86\u3002\\n\\n\u300c \u6839\u636e tcp/ip \u7684ip\u548c\u7aef\u53e3\u56db\u5143\u7ec4\u5c31\u53ef\u4ee5\u786e\u5b9a\u6570\u636e\u5305\u662f\u5426\u540c\u4e00\u4e2a\u8fde\u63a5\u4e86 \u300d\\n\\n> Q: \u8bf7\u6c42\u548c\u54cd\u5e94\u600e\u4e48\u5bf9\u5e94?\\n\\n\u5bf9\u4e8e Redis/mc \u8fd9\u79cd\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u8fde\u63a5\u90fd\u662f\u53d1\u51fa\u8bf7\u6c42\uff0c\u7136\u540e\u5fc5\u987b\u7b49\u5f85\u54cd\u5e94\u624d\u80fd\u4e0b\u4e00\u4e2a\u8bf7\u6c42(\u4e0d\u8003\u8651 redis \u7684 pipeline)\uff0c\u90a3\u8fd9\u4e2a\u5c31\u597d\u529e\u4e86\u3002\\n\\n\u7b2c\u4e00\u79cd\u60c5\u51b5: \u5728\u5ba2\u6237\u7aef\u6293\u5305\uff0c\u5982\u679c\u6e90 ip \u4e3a\u672c\u5730ip, \u90a3\u4e48\u8bf4\u660e\u8fd9\u4e2a\u6570\u636e\u5305\u662f\u53d1\u51fa\u53bb\u7684\uff0c\u4e5f\u5c31\u662f\u8bf7\u6c42\u6570\u636e\u5305\u3002\u53cd\u8fc7\u6765\u5c31\u662f\u54cd\u5e94\u5305\u3002\\n\\n\u7b2c\u4e8c\u79cd\u60c5\u51b5: \u5728\u670d\u52a1\u7aef\u6293\u5305\uff0c\u8ddf\u4e0a\u9762\u521a\u597d\u76f8\u53cd\uff0c\u5982\u679c\u662f\u6e90 ip \u662f\u672c\u5730 ip, \u8bf4\u660e\u6570\u636e\u662f\u51fa\u53bb\u7684\uff0c\u4e5f\u5c31\u662f\u54cd\u5e94\u5305\u3002\\n\\n\u90a3\u4e48\u53ea\u8981\u77e5\u9053\u662f\u540c\u4e00\u4e2a\u8fde\u63a5\uff0c\u800c\u4e14\u77e5\u9053\u8bf7\u6c42\u8fd8\u662f\u54cd\u5e94\u90a3\u4e48\u5c31\u53ef\u4ee5\u7edf\u8ba1\u5ef6\u65f6\u4e86\u3002\u4e0a\u9762\u8bf4\u5230\u5982\u679c\u662f redis pipeline \u8fd9\u79cd\u4e00\u6765\u4e00\u5f80\u7684\u6570\u636e\u5305\u5c31\u8981\u60f3\u5176\u4ed6\u65b9\u6cd5\u4e86\u3002\\n\\n### 5) \u811a\u672c\\n\\n\u8fd9\u4e2a\u4e0d\u9700\u8981\u6df1\u5165\u4e86\u89e3 lua, \u53ea\u8981\u7b80\u5355\u4f1a\u5e94\u7528\u5c31\u53ef\u4ee5\u3002`tcpkit/scripts` \u76ee\u5f55\u63d0\u4f9b\u4e86 `rdis/mc/dns/kafka` \u7684\u5ef6\u65f6\u7edf\u8ba1\u811a\u672c\uff0ckafka \u8fd8\u6709\u4e9b\u95ee\u9898\uff0c\u5f85\u4fee\u6539\u3002\\n\\n\u5982\u679c\u662f\u79c1\u6709\u534f\u8bae\u6216\u8005\u5176\u4ed6\u66f4\u591a\u590d\u6742\u7684\u534f\u8bae\uff0c\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\u3002\\n\\n### 6) END\\n\\n\u662f\u5426\u8fd8\u6709\u5176\u4ed6\u59ff\u52bf\uff1f \u6b22\u8fce\u5206\u4eab\u3002\\n\\n\u6700\u540e\u795d\u73a9\u5f97\u5f00\u5fc3\u3002\\n\\n\u4ee3\u7801\u5730\u5740: [git-hulk/tcpkit](https://github.com/git-hulk/tcpkit)"},{"id":"posts-thinking-in-beanstalkd","metadata":{"permalink":"/posts-thinking-in-beanstalkd","source":"@site/blog/2016-04-16-thinking-in-beanstalkd.md","title":"beanstalkd \u8bbe\u8ba1\u4e0e\u5b9e\u73b0","description":"beanstalkd \u662f\u5355\u673a\u7248\u672c\u7684\u4efb\u52a1\u961f\u5217\u670d\u52a1, \u4efb\u52a1\u961f\u5217\u8ddf\u6d88\u606f\u961f\u5217\u5728\u4f7f\u7528\u573a\u666f\u4e0a\u6700\u5927\u7684\u533a\u522b\u662f\uff1a \u4efb\u52a1\u4e4b\u95f4\u662f\u6ca1\u6709\u987a\u5e8f\u7ea6\u675f\u800c\u6d88\u606f\u8981\u6c42\u987a\u5e8f(FIFO)\uff0c\u4e14\u53ef\u80fd\u4f1a\u5bf9\u4efb\u52a1\u7684\u72b6\u6001\u66f4\u65b0\u800c\u6d88\u606f\u4e00\u822c\u53ea\u4f1a\u6d88\u8d39\u4e0d\u4f1a\u66f4\u65b0\u3002 \u7c7b\u4f3c Kafka \u5229\u7528\u6d88\u606f FIFO \u548c\u4e0d\u9700\u8981\u66f4\u65b0(\u4e0d\u9700\u8981\u5bf9\u6d88\u606f\u505a\u7d22\u5f15)\u7684\u7279\u6027\u6765\u8bbe\u8ba1\u6d88\u606f\u5b58\u50a8\uff0c\u5c06\u6d88\u606f\u8bfb\u5199\u53d8\u6210\u78c1\u76d8\u7684\u987a\u5e8f\u8bfb\u5199\u6765\u5b9e\u73b0\u6bd4\u8f83\u597d\u7684\u6027\u80fd\u3002\u800c\u4efb\u52a1\u961f\u5217\u9700\u8981\u80fd\u591f\u4efb\u52a1\u72b6\u6001\u8fdb\u884c\u66f4\u65b0\u5219\u9700\u8981\u5bf9\u6bcf\u4e2a\u6d88\u606f\u8fdb\u884c\u7d22\u5f15\uff0c\u5982\u679c\u628a\u4e24\u8005\u653e\u5230\u4e00\u8d77\u5b9e\u73b0\u5219\u5f88\u96be\u5b9e\u73b0\u5728\u529f\u80fd\u548c\u6027\u80fd\u4e0a\u517c\u5f97\u3002\u5728\u7f8e\u56fe\u5185\u90e8\u9009\u578b\u4e0a\uff0c\u5982\u679c\u662f\u5f02\u6b65\u6d88\u606f\u6a21\u578b\u4e00\u822c\u4f1a\u9009\u62e9\u6d88\u606f\u961f\u5217\uff0c\u6bd4\u5982\u7c7b\u4f3c\u65e5\u5fd7\u4e0a\u62a5\uff0c\u62a2\u8d2d\u7b49\u3002\u800c\u5bf9\u4e8e\u9700\u8981\u5ef6\u65f6/\u5b9a\u65f6\u4e0b\u53d1\u6216\u8005\u4fee\u6539\u72b6\u6001\u4efb\u52a1\u5219\u662f\u4f7f\u7528\u4efb\u52a1\u961f\u5217\u3002","date":"2016-04-16T00:00:00.000Z","formattedDate":"April 16, 2016","tags":[{"label":"Queue","permalink":"/tags/queue"},{"label":"Beanstalkd","permalink":"/tags/beanstalkd"}],"readingTime":11.775,"truncated":true,"authors":[],"frontMatter":{"title":"beanstalkd \u8bbe\u8ba1\u4e0e\u5b9e\u73b0","slug":"posts-thinking-in-beanstalkd","tags":["Queue","Beanstalkd"]},"prevItem":{"title":"tcpkit \u4ecb\u7ecd","permalink":"/posts-intro-tcpkit"},"nextItem":{"title":"getaddressinfo \u5f15\u53d1\u7684\u8840\u6848","permalink":"/posts-getaddressinfo-cause-unbalance"}},"content":"beanstalkd \u662f\u5355\u673a\u7248\u672c\u7684\u4efb\u52a1\u961f\u5217\u670d\u52a1, \u4efb\u52a1\u961f\u5217\u8ddf\u6d88\u606f\u961f\u5217\u5728\u4f7f\u7528\u573a\u666f\u4e0a\u6700\u5927\u7684\u533a\u522b\u662f\uff1a \u4efb\u52a1\u4e4b\u95f4\u662f\u6ca1\u6709\u987a\u5e8f\u7ea6\u675f\u800c\u6d88\u606f\u8981\u6c42\u987a\u5e8f(FIFO)\uff0c\u4e14\u53ef\u80fd\u4f1a\u5bf9\u4efb\u52a1\u7684\u72b6\u6001\u66f4\u65b0\u800c\u6d88\u606f\u4e00\u822c\u53ea\u4f1a\u6d88\u8d39\u4e0d\u4f1a\u66f4\u65b0\u3002 \u7c7b\u4f3c Kafka \u5229\u7528\u6d88\u606f FIFO \u548c\u4e0d\u9700\u8981\u66f4\u65b0(\u4e0d\u9700\u8981\u5bf9\u6d88\u606f\u505a\u7d22\u5f15)\u7684\u7279\u6027\u6765\u8bbe\u8ba1\u6d88\u606f\u5b58\u50a8\uff0c\u5c06\u6d88\u606f\u8bfb\u5199\u53d8\u6210\u78c1\u76d8\u7684\u987a\u5e8f\u8bfb\u5199\u6765\u5b9e\u73b0\u6bd4\u8f83\u597d\u7684\u6027\u80fd\u3002\u800c\u4efb\u52a1\u961f\u5217\u9700\u8981\u80fd\u591f\u4efb\u52a1\u72b6\u6001\u8fdb\u884c\u66f4\u65b0\u5219\u9700\u8981\u5bf9\u6bcf\u4e2a\u6d88\u606f\u8fdb\u884c\u7d22\u5f15\uff0c\u5982\u679c\u628a\u4e24\u8005\u653e\u5230\u4e00\u8d77\u5b9e\u73b0\u5219\u5f88\u96be\u5b9e\u73b0\u5728\u529f\u80fd\u548c\u6027\u80fd\u4e0a\u517c\u5f97\u3002\u5728\u7f8e\u56fe\u5185\u90e8\u9009\u578b\u4e0a\uff0c\u5982\u679c\u662f\u5f02\u6b65\u6d88\u606f\u6a21\u578b\u4e00\u822c\u4f1a\u9009\u62e9\u6d88\u606f\u961f\u5217\uff0c\u6bd4\u5982\u7c7b\u4f3c\u65e5\u5fd7\u4e0a\u62a5\uff0c\u62a2\u8d2d\u7b49\u3002\u800c\u5bf9\u4e8e\u9700\u8981\u5ef6\u65f6/\u5b9a\u65f6\u4e0b\u53d1\u6216\u8005\u4fee\u6539\u72b6\u6001\u4efb\u52a1\u5219\u662f\u4f7f\u7528\u4efb\u52a1\u961f\u5217\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\u6bd4\u5982\u5728\u4ee5\u4e0b\u51e0\u79cd\u573a\u666f\u4f1a\u4f7f\u7528\u4efb\u52a1\u961f\u5217:\\n\u5b9a\u65f6\u4efb\u52a1\uff0c\u5982\u6bcf\u5929\u65e9\u4e0a 8 \u70b9\u5f00\u59cb\u63a8\u9001\u6d88\u606f\uff0c\u5b9a\u671f\u5220\u9664\u8fc7\u671f\u6570\u636e\u7b49\\n\u4efb\u52a1\u6d41\uff0c\u5982\u81ea\u52a8\u521b\u5efa Redis \u6d41\u7a0b\u7531\u8d44\u6e90\u521b\u5efa\uff0c\u8d44\u6e90\u914d\u7f6e\uff0cDNS \u4fee\u6539\u7b49\u90e8\u5206\u7ec4\u6210\uff0c\u4f7f\u7528\u4efb\u52a1\u961f\u5217\u53ef\u4ee5\u7b80\u5316\u6574\u4f53\u7684\u8bbe\u8ba1\u548c\u91cd\u8bd5\u6d41\u7a0b\\n\u91cd\u8bd5\u4efb\u52a1\uff0c\u5178\u578b\u573a\u666f\u5982\u79bb\u7ebf\u56fe\u7247\u5904\u7406\\n\\n\u76ee\u524d\u5f00\u6e90\u4efb\u52a1\u961f\u5217\u5e76\u4e0d\u591a, \u6bd4\u5982\u539f\u751f\u652f\u6301\u4efb\u52a1\u961f\u5217\u8bed\u4e49\u6bd4\u8f83\u77e5\u540d\u53ea\u6709\u7c7b\u4f3c disque, beanstalkd\u3002 \u516c\u53f8\u90e8\u5206\u573a\u666f\u6bd4\u8f83\u9002\u5408\u5f15\u5165\u4efb\u52a1\u961f\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u6574\u4f53\u4e0a\u6765\u770b\u5f53\u524d\u5df2\u6709\u7684\u4e00\u4e9b\u5f00\u6e90\u4ea7\u54c1\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u3002\\n\\n### 1) \u521d\u8bc6\\n\\n\u5148\u4ece\u51e0\u4e2a\u5927\u7684\u5c42\u9762\u6765\u770b\u4e00\u4e0b beanstalkd\uff0c\u518d\u6765\u770b\u5185\u90e8\u7684\u5b9e\u73b0\u7ec6\u8282:\\n\\n1. \u534f\u8bae\uff0c\u7c7b Memcached \u534f\u8bae, \u975e\u4e8c\u8fdb\u5236\u5b89\u5168\\n2. \u5168\u5185\u5b58, \u53ef\u5f00\u542f binlog, \u65ad\u7535\u4ece binlog \u6062\u590d\u6570\u636e\\n3. \u5355\u7ebf\u7a0b, \u4f7f\u7528 epoll/kqueue \u6765\u5b9e\u73b0\u4e8b\u4ef6\u673a\u5236\\n\\n### 2) \u51e0\u4e2a\u6982\u5ff5\\n\\n* tube - \u6d88\u606f\u901a\u9053\uff0c\u7c7b\u4f3c\u4e8e kafka \u91cc\u9762\u7684 topic, \u7528\u6765\u5b58\u50a8\u67d0\u4e00\u7c7b\u6216\u8005\u4e1a\u52a1\u7684\u4efb\u52a1\\n* job  - \u751f\u4ea7\u548c\u6d88\u8d39\u7684\u57fa\u672c\u5355\u5143\uff0c\u6bcf\u4e2a job \u90fd\u4f1a\u6709\u4e00\u4e2a id \u548c \u4f18\u5148\u7ea7\\n\\n### 3) \u72b6\u6001\u8fc1\u79fb\\n\\n\u4e00\u4e2a job \u7684\u72b6\u6001\u53ef\u80fd\u662f DELAYED, READY, RESERVED, BURIED \u5176\u4e2d\u4e4b\u4e00\uff0c\u72b6\u6001\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u8fc1\u79fb\u3002\\n\\n```\\n   //------------------- \u72b6\u6001\u56fe\u6765\u81ea\u5b98\u65b9\u6587\u6863 -------------------//\\n   \\n   put with delay               release with delay\\n  ----------------\x3e [DELAYED] <------------.\\n                        |                   |\\n                 kick   | (time passes)     |\\n                        |                   |\\n   put                  v     reserve       |       delete\\n  -----------------\x3e [READY] ---------\x3e [RESERVED] --------\x3e *poof*\\n                       ^  ^                |  |\\n                       |   \\\\  release      |  |\\n                       |    `-------------\'   |\\n                       |                      |\\n                       | kick                 |\\n                       |                      |\\n                       |       bury           |\\n                    [BURIED] <---------------\'\\n                       |\\n                       |  delete\\n                        `--------\x3e *poof*\\n```\\n\\n\\n#### 3.1 \u751f\u4ea7\\n\\n\u751f\u4ea7\u8005\u901a\u8fc7 `PUT` \u547d\u4ee4\u6765\u4ea7\u751f\u4e00\u6761\u6d88\u606f, \u547d\u4ee4\u683c\u5f0f\u5982\u4e0b:\\n\\n```shell\\nput <pri> <delay> <ttr> <bytes>\\\\r\\\\n\\n<data>\\\\r\\\\n\\n```\\n\\n1. delay = 0\uff0c\u8fdb\u5165\u5c31\u7eea(READY)\u961f\u5217, \u53ef\u4ee5\u76f4\u63a5\u88ab\u6d88\u8d39\u3002\\n2. dealy > 0, \u8fdb\u5165\u5ef6\u65f6\u961f\u5217(DELAYED), \u7b49\u5230\u5ef6\u65f6\u65f6\u95f4\u5230\u4e86\u4e4b\u540e\u81ea\u52a8\u8fc1\u79fb\u5c31\u7eea\u961f\u5217\u3002\\n\\n#### 3.2 \u6d88\u8d39\\n\\n\u6d88\u8d39\u8005\u901a\u8fc7 `RESERVE` \u547d\u4ee4\u4ece\u5c31\u7eea\u961f\u5217\u53d6\u51fa\u4e00\u4e2a\u4efb\u52a1, \u683c\u5f0f\u5982\u4e0b:\\n\\n```shell\\nreserve\\\\r\\\\n\\n```\\n\\n\u4efb\u52a1\u72b6\u6001\u4f1a\u4ece READY \u53d8\u4e3a RESERVED(\u9884\u5b9a)\uff0c\u5176\u4ed6\u4eba\u5c31\u65e0\u6cd5\u83b7\u53d6\u3002 PUT \u4ea7\u751f\u6d88\u606f\u7684\u65f6\u5019\uff0c\u643a\u5e26\u4e86 ttr(time to run)\uff0c\u5982\u679c\u8fd9\u4e2a\u65f6\u95f4\u5185\uff0c\u6d88\u8d39\u8005\u6ca1\u6709\u53d1\u9001 delete, release \u6216\u8005 buried \u547d\u4ee4\u3002 \u4efb\u52a1\u4f1a\u81ea\u52a8\u56de\u5230 READY \u72b6\u6001\uff0c\u5176\u4ed6\u4eba\u53ef\u4ee5\u7ee7\u7eed\u83b7\u53d6\u3002\\n\\n\u6211\u4eec\u4ece\u72b6\u6001\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230\uff1a\\n\\n1. \u6d88\u8d39\u8005\u8fd4\u56de delete \u547d\u4ee4\uff0c\u8fd9\u4e2a\u4efb\u52a1\u5c31\u4ece\u6b64\u6d88\u5931\\n2. \u6d88\u8d39\u8005\u8fd4\u56de buried \u547d\u4ee4, \u8fd9\u4e2a\u4efb\u52a1\u5c31\u8fdb\u5165\u4f11\u7720\u72b6\u6001\\n3. \u6d88\u8d39\u8005\u8fd4\u56de release \u547d\u4ee4\u6216\u8005\u4e0d\u8fd4\u56de\uff0c\u5c31\u56de\u5230 READY/DELAYED \u72b6\u6001\uff0c\u53ef\u4ee5\u91cd\u65b0\u88ab\u6d88\u8d39\\n\\n\u4f11\u7720(BURIED)\u72b6\u6001\u7684\u4efb\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7 kick \u547d\u4ee4\u8ba9\u4efb\u52a1\u56de\u5230 READY \u961f\u5217\u4e2d\u53bb\u3002\\n\\n\u5177\u4f53\u7684\u534f\u8bae\u8bf7\u79fb\u6b65\u5b98\u65b9\u6587\u6863: [https://github.com/kr/beanstalkd/blob/master/doc/protocol.txt](https://github.com/kr/beanstalkd/blob/master/doc/protocol.txt)\\n\\n### 4) \u5185\u90e8\u5b9e\u73b0\\n\\n#### 4.1) tube\\n\u4e0a\u9762\u8bf4\u5230 beanstalkd \u53ef\u4ee5\u6839\u636e\u6d88\u606f\u7c7b\u578b\u6216\u8005\u4e1a\u52a1\u62c6\u5206\u6210\u591a\u4e2a\u901a\u9053(tube), \u7528\u6237\u53ef\u4ee5\u4f7f\u7528 `use tube_name` \u6765\u8fdb\u884c\u5207\u6362\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a tube \u5c31\u76f4\u63a5\u521b\u5efa\u3002beanstalkd \u5185\u90e8\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u4fdd\u5b58\u6240\u6709\u7684 tubes, \u7ed3\u6784\u89c1 `struct ms`\u3002\\n\\n\u6211\u4eec\u4e0b\u9762\u6765\u770b\u4e00\u4e0b tube \u7ed3\u6784\u91cc\u9762\u6709\u54ea\u4e9b\u4e1c\u897f:\\n\\n```c\\nstruct tube {\\n    uint refs;  // tube \u5f53\u524d\u88ab\u5f15\u7528\u7684\u6b21\u6570                        \\n    char name[MAX_TUBE_NAME_LEN]; // tube \u540d\u79f0, \u6700\u957f 200byte\\n    Heap ready; // \u4fdd\u5b58\u5c31\u7eea\u961f\u5217\u7684\u6700\u5c0f\u5806                        \\n    Heap delay; // \u4fdd\u5b58\u5ef6\u65f6\u961f\u5217\u7684\u6700\u5c0f\u5806                       \\n    struct ms waiting; // \u6b63\u5728\u4f7f\u7528 tube \u7684\u8fde\u63a5    \\n    struct stats stat; // tube \u5bf9\u5e94\u7684\u7edf\u8ba1\u9879\\n    uint using_ct; // tube using \u4f7f\u7528\u6b21\u6570   \\n    uint watching_ct; // \u88abwatch\u7684\u6b21\u6570\\n    int64 pause; // tube \u662f\u5426\u6574\u4e2a\u88ab\u5ef6\u65f6  \\n    int64 deadline_at; // tube \u5ef6\u65f6\u622a\u6b62\u65f6\u95f4 \\n    struct job buried; // buried \u961f\u5217\\n};\\n```\\n\\n\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a tube \u91cc\u9762\u90fd\u5305\u542b\u4e86\u5c31\u7eea, \u5ef6\u65f6\u548c\u4f11\u7720\u4e09\u79cd\u961f\u5217\u3002\u6211\u4eec\u4e0a\u9762\u8bf4\u4e86\u6bcf\u4e2a job \u7684\u72b6\u6001\u53ef\u80fd\u662f DELAYED/READY/RESERVED/BURIED\uff0c \u90a3\u4e48 RESERVED \u72b6\u6001\u7684 job \u662f\u4fdd\u5b58\u5728\u90a3\u91cc\u5462\uff1f \u6bcf\u4e2a\u8fde\u63a5\u7ed3\u6784\u91cc\u9762\u4f1a\u6709\u4e00\u4e2a RESERVED \u94fe\u8868\u7528\u6765\u4fdd\u5b58\u5f53\u524d\u8fde\u63a5\u9884\u53d6\u7684\u6240\u6709 job\u3002\\n\\n\u5176\u4e2d READY/DELAYED \u961f\u5217\u5b9e\u73b0\u90fd\u662f\u6700\u5c0f\u5806\uff0c\u800c BURIED/RESERVED \u662f\u666e\u901a\u7684\u94fe\u8868\uff0cjob \u6839\u636e\u4e0d\u540c\u7684\u72b6\u6001\u4f1a\u5728\u8fd9\u56db\u4e2a\u961f\u5217\u4e2d\u8fc1\u79fb\u3002\\n\\n#### 4.2) \u6700\u5c0f\u5806\\n\\nREADY/DELAYED \u961f\u5217\u91c7\u7528\u6700\u5c0f\u5806\uff0c\u4e0b\u9762\u5206\u522b\u662f\u4e24\u4e2a\u961f\u5217\u7684\u6bd4\u8f83\u65b9\u6cd5:\\n\\n* \u5c31\u7eea\u961f\u5217\u6700\u5c0f\u5806\u6bd4\u8f83\u65b9\u6cd5:\\n\\n```c\\nint\\njob_pri_less(void *ax, void *bx)\\n{\\n    job a = ax, b = bx; \\n    // \u6700\u5c0f\u5806\u6bd4\u8f83\u65b9\u6cd5, \u5148\u6bd4\u8f83\u4f18\u5148\u7ea7\u518d\u6bd4\u8f83 id\\n    if (a->r.pri < b->r.pri) return 1;\\n    if (a->r.pri > b->r.pri) return 0;\\n    return a->r.id < b->r.id;\\n}\\n```\\n\\n> \u5148\u6bd4\u8f83\u4f18\u5148\u7ea7\uff0c\u518d\u6bd4\u8f83 job id\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u60f3\u5b9e\u73b0\u4f18\u5148\u7ea7\u961f\u5217\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u8bbe\u7f6e\u4f18\u5148\u7ea7\u3002pri \u503c\u8d8a\u5c0f\u4f18\u5148\u7ea7\u8d8a\u9ad8\u3002\u5982\u679c\u6211\u4eec\u60f3\u5229\u7528 beanstalkd \u4f5c\u4e3a\u666e\u901a\u7684\u5148\u8fdb\u5148\u51fa\u961f\u5217\uff0c\u628a\u4f18\u5148\u7ea7\u90fd\u8bbe\u7f6e\u4e3a\u4e00\u6837\u5373\u53ef\uff0c\u6d88\u8d39\u7684\u65f6\u5019\u5c31\u4f1a\u6839\u636e job id \u51fa\u961f\u3002\\n\\n* \u5ef6\u65f6\u961f\u5217\u7684\u6700\u5c0f\u5806\u6bd4\u8f83\u65b9\u6cd5\\n\\n```c\\nint\\njob_delay_less(void *ax, void *bx)\\n{\\n    job a = ax, b = bx; \\n    if (a->r.deadline_at < b->r.deadline_at) return 1;\\n    if (a->r.deadline_at > b->r.deadline_at) return 0;\\n    return a->r.id < b->r.id;\\n}\\n```\\n> \u5148\u6bd4\u8f83\u5ef6\u65f6\u622a\u6b62\u65f6\u95f4\uff0c\u518d\u6bd4\u8f83 job id\u3002\\n\\n#### 4.3) \u72b6\u6001\u8fc1\u79fb\\n\\n\u518d\u83b7\u53d6\u7f51\u7edc\u4e8b\u4ef6\u4e4b\u524d\uff0c\u90fd\u4f1a\u8c03\u7528 `prottick` \u65b9\u6cd5\u6765\u505a\u4e00\u4e9b\u5e38\u89c4\u7684\u7684\u72b6\u6001\u8fc1\u79fb\u3002\\n\\n```c\\nvoid\\nsrvserve(Server *s)\\n{\\n\\t...\\n    for (;;) {\\n        // \u5b9e\u73b0\u4e00\u4e9b\u72b6\u6001\u8fc1\u79fb\u68c0\u67e5\\n        period = prottick(s);\\n\\n        // \u83b7\u53d6\u4e0b\u4e00\u4e2a\u5904\u7406\u7684\u4e8b\u4ef6\\n        int rw = socknext(&sock, period);\\n        if (rw == -1) {\\n            twarnx(\\"socknext\\");\\n            exit(1);\\n        }\\n\\n        // \u56de\u8c03\u5904\u7406\\n        if (rw) {\\n            sock->f(sock->x, rw);\\n        }\\n    }\\n\\t...\\n}\\n\\nint64\\nprottick(Server *s)\\n{\\n\\t...\\n\\t// \u8fd9\u4e2a\u5faa\u73af\u68c0\u67e5\u5ef6\u65f6\u961f\u5217\u662f\u5426\u6709 job \u622a\u6b62\u65f6\u95f4\u5230\u4e86\uff0c\u662f\u7684\u8bdd\u8fc1\u79fb\u5230\u5c31\u7eea\u961f\u5217\\n    // \u5982\u679c\u5927\u91cf\u7684 delay \u53d8\u6210ready \u4f1a\u5bfc\u81f4\u5176\u4ed6\u8bf7\u6c42\u5f97\u4e0d\u5230\u54cd\u5e94\u800c\u8d85\u65f6\\n    now = nanoseconds();\\n    while ((j = delay_q_peek())) {\\n        d = j->r.deadline_at - now;\\n        if (d > 0) {\\n            period = min(period, d);\\n            break;\\n        }\\n        // \u8fd4\u56de\u5ef6\u65f6\u961f\u5217\u7b2c\u4e00\u4e2a\\n        j = delay_q_take();\\n        // job \u8fdb\u5165\u5c31\u7eea\u5904\u7406\\n        r = enqueue_job(s, j, 0, 0);\\n        // OOM?\\n        if (r < 1) bury_job(s, j, 0); /* out of memory, so bury it */\\n    }\\n    ...\\n}\\n```\\n\\nprottick \u91cc\u9762\u9664\u4e86\u68c0\u67e5\u5ef6\u65f6\u961f\u5217\uff0c\u8fd8\u68c0\u67e5\u6574\u4e2a tube \u7684\u5ef6\u65f6\u622a\u6b62\u65f6\u95f4\u662f\u5426\u5df2\u7ecf\u5230\u4ee5\u53ca\u8fde\u63a5\u662f\u5426\u7b49\u5f85\u8d85\u65f6\u7b49\u7b49\u3002\\n\\n#### 4.3) job \u67e5\u627e\\n\\n\u4e3a\u4e86\u5feb\u901f\u67e5\u627e\u4e00\u4e2a job, \u5185\u90e8\u91c7\u7528 hashtable \u6765\u5b58\u653e job\u3002\\n\\n```c\\n// \u6839\u636e id \u67e5\u627e\u5bf9\u5e94\u7684\u4efb\u52a1\\njob\\njob_find(uint64 job_id)\\n{\\n    job jh = NULL;\\n    // \u6839\u636ejob id \u53d6\u6a21\u83b7\u53d6 bucket \u4e0b\u6807\\n    int index = _get_job_hash_index(job_id);\\n\\n    // \u94fe\u8868\u67e5\u627e\\n    for (jh = all_jobs[index]; jh && jh->r.id != job_id; jh = jh->ht_next);\\n\\n    return jh; \\n}\\n```\\n\\n\u5f53 hashtable \u5143\u7d20\u8d85\u8fc7 bucket \u7684 4\u500d\u7684\u65f6\u5019\uff0c\u4f1a\u8fdb\u884c Rehash \u6765\u6269\u5bb9\u3002\\n\\n```c\\nstatic void\\nstore_job(job j)\\n{\\n\\t...\\n    /* accept a load factor of 4 */\\n    // \u4e00\u6b21\u6027 rehash \u53ef\u80fd\u5bfc\u81f4\u8bbf\u95ee\u6bdb\u523a\u70b9\\n    if (all_jobs_used > (all_jobs_cap << 2)) rehash();\\n}\\n```\\n\\n\u8fd9\u91cc\u6709\u4e24\u4e2a\u95ee\u9898:\\n\\n1. \u5f53\u524d\u53ea\u5b9e\u73b0\u4e86\u6269\u5bb9\u6ca1\u6709\u7f29\u5bb9\uff0c\u8fd9\u4e2a\u6709\u4eba\u63d0\u4e86 pr, \u540e\u7eed\u7248\u672c\u5e94\u8be5\u4f1a\u89e3\u51b3\\n2. \u4e00\u6b21\u6027 rehash, hashtable \u6570\u636e\u6bd4\u8f83\u591a\u7684\u65f6\u5019\uff0c\u8fc1\u79fb\u65f6\u95f4\u4f1a\u6bd4\u8f83\u4e45\uff0c\u4ea7\u751f\u8bbf\u95ee\u6bdb\u523a\u70b9\\n\\n### 5) \u4e00\u4e9b\u95ee\u9898\\n\\n\u4ece\u4ee3\u7801\u5c42\u9762\u6765\u770b\uff0cbeanstalkd \u901a\u8fc7\u51e0\u5343\u884c C \u4ee3\u7801\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4f18\u5148\u7ea7/\u5ef6\u65f6\u961f\u5217\uff0c\u8fd9\u4e2a\u5b9e\u5728\u662f\u5f88 cool\uff0c\u4f46\u95ee\u9898\u8fd8\u662f\u6709\u4e0d\u5c11\u3002\\n\\n1. \u65e0\u6700\u5927\u5185\u5b58\u63a7\u5236, \u5982\u679c\u6709\u6d88\u606f\u5806\u79ef\u6216\u8005\u4e1a\u52a1\u4f7f\u7528\u65b9\u5f0f\u6709\u8bef\uff0c\u800c\u5bfc\u81f4\u5185\u5b58\u66b4\u6da8\u62d6\u57ae\u673a\u5668\\n2. \u4e0a\u9762\u8bf4\u7684 Rehash \u5bfc\u81f4\u8bbf\u95ee\u53d8\u957f\uff0c\u751a\u81f3\u4ea7\u751f\u5927\u91cf\u8fde\u63a5\u8d85\u65f6\\n3. \u90e8\u5206\u64cd\u4f5c\u65e0\u65f6\u957f\u63a7\u5236\uff0c\u53ef\u80fd\u5bfc\u81f4\u5927\u91cf\u8fde\u63a5\u8d85\u65f6\u3002 \u5982\u4e8b\u4ef6\u67e5\u8be2\u4e4b\u524d\u7684\u5e38\u89c4\u68c0\u67e5\u65b9\u6cd5 `prottick`\uff0c \u4ee5\u53ca `kicked` \u547d\u4ee4\u65e0\u63a7\u5236 count \u5927\u5c0f\u3002\\n4. \u4e0d\u5c11\u4ee3\u7801\u4e0d\u591f\u7cbe\u7b80\uff0c \u6bd4\u5982\u56de\u653e\u65f6\u8bfb\u53d6 job \u7684\u65b9\u6cd5\uff0c\u4e24\u4e2a\u4e0d\u540c\u7248\u672c\u8bfb\u53d6\u65b9\u6cd5\u5b9e\u9645\u4e0a\u5dee\u522b\u4e0d\u5927\\n5. \u8ddf mc \u7c7b\u4f3c\uff0c\u6ca1\u6709 master-slave \u65b9\u5f0f\uff0c\u9700\u8981\u81ea\u5df1\u89e3\u51b3\u5355\u70b9\u95ee\u9898\\n\\n\\n### 6) END\\n\\n\u5982\u679c\u662f\u6709\u4f18\u5148\u7ea7/\u5ef6\u65f6\u4efb\u52a1\u7684\u9700\u6c42\u7684\u8bdd, beanstalkd \u662f\u4e2a\u4e0d\u9519\u9009\u62e9\u3002\u5982\u679c\u4f5c\u4e3a\u5e38\u89c4\u7684\u5148\u8fdb\u5148\u51fa\u961f\u5217\u6765\u8bf4\uff0c\u4ee5\u6027\u80fd\u548c\u7a33\u5b9a\u6765\u8bf4 kafka/redis \u4f1a\u662f\u66f4\u597d\u7684\u9009\u62e9\uff0credis \u672c\u8eab\u4e5f\u662f\u5168\u5185\u5b58\uff0c\u961f\u5217\u64cd\u4f5c O(1), \u800c benastalkd \u662f log(n)\u3002redis \u4e5f\u66f4\u52a0\u6210\u719f\u548c\u7a33\u5b9a\uff0c\u540c\u65f6\u652f\u6301\u672c\u5730\u6301\u4e45\u5316\u548c\u4e3b\u4ece\u3002\\n\\n\u53e6\u5916\u6709\u4e00\u4e2a\u52a0\u5206\u9879\u662f beanstalkd \u4f5c\u8005\u672c\u8eab\u6bd4\u8f83\u6d3b\u8dc3\uff0c\u4e4b\u524d\u63d0\u4e86\u4e00\u4e2a pr, \u5f53\u5929\u5c31\u5f97\u5230\u56de\u9988\uff0c\u8fd9\u4e5f\u662f\u4f5c\u4e3a\u5f00\u6e90\u9879\u76ee\u9009\u62e9\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u56e0\u7d20\u3002"},{"id":"posts-getaddressinfo-cause-unbalance","metadata":{"permalink":"/posts-getaddressinfo-cause-unbalance","source":"@site/blog/2016-03-27-getaddressinfo-cause-problem.md","title":"getaddressinfo \u5f15\u53d1\u7684\u8840\u6848","description":"DBA \u53d1\u73b0\u540c\u4e00\u7ec4 Redis \u4ece\u5e93\u4e2d\u6709\u5b9e\u4f8b QPS \u6bd4\u8f83\u9ad8\uff0c\u5bf9\u6bd4\u53d1\u73b0\u53ea\u662f\u5176\u4e2d\u4e00\u4e2a\u4ece\u5e93\u504f\u9ad8\u800c\u5176\u4ed6\u4ece\u5e93\u662f\u6b63\u5e38\u7684\uff0c\u5206\u5e03\u5982\u4e0b:","date":"2016-03-27T00:00:00.000Z","formattedDate":"March 27, 2016","tags":[{"label":"linux","permalink":"/tags/linux"},{"label":"glibc","permalink":"/tags/glibc"}],"readingTime":8.415,"truncated":true,"authors":[],"frontMatter":{"title":"getaddressinfo \u5f15\u53d1\u7684\u8840\u6848","slug":"posts-getaddressinfo-cause-unbalance","tags":["linux","glibc"]},"prevItem":{"title":"beanstalkd \u8bbe\u8ba1\u4e0e\u5b9e\u73b0","permalink":"/posts-thinking-in-beanstalkd"},"nextItem":{"title":"oom killer \u5b9e\u73b0","permalink":"/posts-how-oom-killer-works"}},"content":"DBA \u53d1\u73b0\u540c\u4e00\u7ec4 Redis \u4ece\u5e93\u4e2d\u6709\u5b9e\u4f8b QPS \u6bd4\u8f83\u9ad8\uff0c\u5bf9\u6bd4\u53d1\u73b0\u53ea\u662f\u5176\u4e2d\u4e00\u4e2a\u4ece\u5e93\u504f\u9ad8\u800c\u5176\u4ed6\u4ece\u5e93\u662f\u6b63\u5e38\u7684\uff0c\u5206\u5e03\u5982\u4e0b:\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/getaddressinfo-redis-unbalance.jpeg)\\n\\n\u90a3\u4e48\u95ee\u9898\u5c31\u662f: \u300c\u4e3a\u4ec0\u4e48\u4f1a QPS \u4e0d\u5747\u5300?\u300d, \u7531\u4e8e\u6211\u4eec\u5148\u4e0a php \u4e1a\u52a1\u90fd\u662f\u957f\u8fde\u63a5\uff0cQPS \u4e0d\u5747\u5300\u5e94\u8be5\u662f\u8fde\u63a5\u6570\u4e0d\u5747\u5e26\u6765\u7684\u3002\u7136\u540e\u8ba9\u8fd0\u7ef4\u5927\u4fa0\u7edf\u8ba1\u4e86\u4e00\u4e0b\u56db\u4e2a\u5b9e\u4f8b\u7684\u8fde\u63a5\u6570\uff0c\u53d1\u73b0\u786e\u5b9e\u8bf7\u6c42\u91cf\u8ddf\u8fde\u63a5\u6570\u662f\u6210\u7ebf\u6027\u6b63\u76f8\u5173\u7684\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n### 2) \u8fde\u63a5\u6570\u4e3a\u4f55\u4e0d\u5747\u5300?\\n\\n\u56e0\u4e3a\u8fd9\u56db\u4e2a\u5b9e\u4f8b\u662f\u901a\u8fc7\u57df\u540d\u6765\u8bbf\u95ee\uff0c\u7406\u8bba\u4e0a\u8fde\u63a5\u6570\u5e94\u8be5\u662f\u8981\u6bd4\u8f83\u5747\u5300(DNS ip \u8f6e\u5faa)\u3002\\n\u63a5\u7740\u5f53\u7136\u662f\u7edf\u8ba1\u591a\u51fa\u6765\u7684\u8fde\u63a5\u6570\u662f\u6765\u81ea\u54ea\u4e9b ip\u3002\u4f7f\u7528 `lsof` \u6216\u8005 redis \u7684 `client list` \u90fd\u53ef\u4ee5\u5f97\u5230\u3002\\n\\n#### \u4e3a\u4ec0\u4e48\u8981\u7edf\u8ba1 ip \u5462\\n1. \u786e\u5b9a\u662f\u4e0d\u662f\u6709\u4e1a\u52a1\u6709\u56fa\u5b9a ip \u76f4\u8fde\u5bfc\u81f4\\n2. \u786e\u5b9a\u662f\u4e0d\u662f\u6240\u6709\u4e1a\u52a1\u673a\u5668\u8fde\u63a5\u8d44\u6e90\u4e0d\u5747\u5300\u8fd8\u662f\u4e2a\u522b\u673a\u5668\\n\\n\u7edf\u8ba1\u5b8c\u53d1\u73b0\uff0c\u7b2c\u4e00\u4e2a\u5b9e\u4f8b\u6bd4\u5176\u4ed6\u5b9e\u4f8b\u591a\u51fa\u6765\u7684 ip, \u662f\u6765\u81ea\u90e8\u5206\u4e1a\u52a1\u673a\u5668\u3002\\n\\n```shell\\n192.168.7.213\\n192.168.7.218\\n192.168.7.217\\n192.168.7.216\\n```\\n\u800c\u4e14\u53d1\u73b0\u8fd9\u51e0\u4e2a ip \u53ea\u8fde\u7b2c\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u8fd9\u8bf4\u660e\u8fde\u63a5\u6570\u4e0d\u5747\u5300\u662f\u8fd9\u51e0\u4e2a ip \u56fa\u5b9a\u8fde\u63a5\u7b2c\u4e00\u4e2a\u5b9e\u4f8b\u5bfc\u81f4\u7684\u3002\\n\\n***\u540e\u9762\u5c31\u56f4\u7ed5 DNS \u548c php \u8fde\u63a5\u673a\u5236\u5c55\u5f00\u6392\u67e5***\\n\\n### 3) \u6392\u67e5\\n\\n#### 3.1) DNS \u8fd4\u56de\u95ee\u9898\uff1f\\n\\n\u7b2c\u4e00\u4ef6\u4e8b\u60c5\u5148\u6392\u9664\u662f\u4e0d\u662f DNS \u8fd4\u56de\u7ed3\u679c\u4e0d\u6b63\u786e\u5bfc\u81f4\u3002\u4f7f\u7528 `nslookup` \u67e5\u770b\uff0c\u53d1\u73b0\u7ed3\u679c\u5217\u8868\u6bcf\u6b21\u90fd\u4f1a\u8fdb\u884c ip \u8f6e\u5faa\uff0c\u6240\u4ee5\u6392\u9664 DNS \u8fd4\u56de\u4e0d\u6b63\u786e\u5bfc\u81f4\u3002\u90a3\u4e48\u5c31\u56de\u5230\u662f\u4e0d\u662f php \u4f7f\u7528\u59ff\u52bf\u7684\u95ee\u9898\u3002\\n\\n#### 3.2) gethostbyname \u5bfc\u81f4\u7684?\\n\\n\u65e2\u7136 DNS \u8fd4\u56de\u7ed3\u679c\u6ca1\u6709\u95ee\u9898\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u5c31\u662f php \u5185\u90e8\u901a\u8fc7\u57df\u540d\u8f6c\u6362 ip \u65f6\u56fa\u5b9a\u8fd4\u56de\u67d0\u4e00\u4e2a ip\u3002\u56e0\u4e3a\u6ca1\u6709\u53bb\u770b phpredis \u7684\u5b9e\u73b0\uff0c\u6240\u4ee5\u5148\u5047\u8bbe\u662f\u901a\u8fc7 `gethostbyname` \u6765\u83b7\u53d6ip, \u8fd9\u4e2a\u5f88\u5bb9\u6613\u9a8c\u8bc1\u3002 \u901a\u8fc7\u6267\u884c\u4e0b\u9762\u4ee3\u7801\uff0c\u53d1\u73b0\u7ed3\u679c\u662f\u4f1a\u8fdb\u884c ip \u8f6e\u5faa\u3002\\n\\n```php\\nphp -r \'var_dump(gethostbyname(\\"\\"s2000.redis.com.cn.xxx\\"))\'\\n```\\n\\n\u5230\u8fd9\u91cc\u56e0\u4e3a `gethostbyname` \u6ca1\u6709\u95ee\u9898\uff0c\u90a3\u4e48\u5c31\u731c\u6d4b\u662f\u4e0d\u662f\u4f7f\u7528\u5176\u4ed6\u7684\u65b9\u5f0f\u83b7\u53d6ip? \\n\\n\u56e0\u4e3a\u4e1a\u52a1\u65b9\u5728 `phpredis` \u8fde\u63a5\u8d44\u6e90\u65f6\uff0c\u662f\u76f4\u63a5\u4f7f\u7528\u57df\u540d\u3002\u800c phpredis \u4f1a\u4f7f\u7528 php \u6e90\u7801\u7684 `php_stream_xport_create` \u8fdb\u884c\u5efa\u7acb\u8fde\u63a5\u3002\u800c\u8fd9\u4e2a\u51fd\u6570\u5728\u5efa\u7acb\u8fde\u63a5\uff0c\u662f\u901a\u8fc7 `php_network_getaddresses` \u6765\u83b7\u53d6\u5230 ip \u5217\u8868, \u7136\u540e\u62ff\u5230\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u8fdb\u884c\u8fde\u63a5\u3002\\n\\n\u8fd9\u4e2a\u8ddf\u89c2\u5bdf\u5230\u7684\u53ea\u4f1a\u8fde\u63a5\u5230\u540c\u4e00\u4e2aip\u7684\u89c4\u5f8b\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u6765\u770b\u4ed6\u662f\u901a\u8fc7\u4ec0\u4e48\u65b9\u6cd5\u83b7\u53d6 ip \u5217\u8868\u3002\\n\\n#### 3.3) getaddrinfo \u7684\u9505?\\n\\n\u6211\u4eec\u770b\u5230 php_network_getaddresses \u5b9e\u73b0\u662f\u8fd9\u6837\u7684(\u89c1php-src/main/network.c):\\n\\n```c\\n PHPAPI int php_network_getaddresses(const char *host, int socktype, struct sockaddr ***sal, char **error_string TSRMLS_DC)\\n ...\\n  #if HAVE_GETADDRINFO\\n    if ((n = getaddrinfo(host, NULL, &hints, &res))) {  \\n        ...\\n    }\\n  #else\\n    host_info = gethostbyname(host); \\n    ...\\n  #endif\\n```\\n\\n\u4f7f\u7528 `HAVE_GETADDRINFO` \u6765\u51b3\u5b9a\u4f7f\u7528 getaddrinfo \u8fd8\u662f gethostbyname \u6765\u83b7\u53d6ip, \u8fd9\u4e2a\u9009\u9879\u662f\u5728 configure \u9636\u6bb5\uff0c\u901a\u8fc7\u5224\u65ad\u64cd\u4f5c\u7cfb\u7edf\u662f\u5426\u652f\u6301 getaddrinfo \u6765\u81ea\u52a8\u5f00\u542f\u3002\u56e0\u4e3a\u6211\u4eec\u7ebf\u4e0a\u673a\u5668\u90fd\u652f\u6301\u8fd9\u4e2a\u51fd\u6570\uff0c\u800c\u6211\u4eec\u4e5f\u9a8c\u8bc1\u8fc7 gethostbyname \u8fd4\u56de\u7ed3\u679c\u662f\u6b63\u5e38\u7684\u3002\\n\\n***\u5230\u4e86\u8fd9\u91cc\u5c31\u662f getaddrinfo \u80cc\u4e0a\u4e86\u8fd9\u4e2a\u9505***\\n\\n\u8fd9\u4e2a\u9a8c\u8bc1\u4e5f\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u8c03\u7528 getaddrinfo \u770b\u8fd4\u56de\u7ed3\u679c, \u4ee3\u7801\u5982\u4e0b:\\n\\n```c\\n    n = getaddrinfo(\\"s2000.zw.rediscounter.m.com\\", NULL, &hints, &res);\\n    if (!res) return;\\n    \\n    do {\\n        if (res->ai_family == AF_INET)  {\\n            sinp = (struct sockaddr_in *)res->ai_addr;\\n            addr = inet_ntop(AF_INET, &(sinp->sin_addr), abuf,INET_ADDRSTRLEN);\\n            printf(\\"%s\\\\n\\", addr);\\n        }\\n    } while((res = res->ai_next) != NULL);\\n```\\n\\n\u7136\u540e\u62ff\u5230\u6709\u95ee\u9898\u7684\u673a\u5668\u8dd1\u4e86\u4e00\u4e0b\uff0c\u679c\u7136\u53d6\u5230\u7684 ip \u5217\u8868\u662f\u56fa\u5b9a\u7684\uff0c\u7136\u800c\u5728\u90a3\u6279\u6ca1\u95ee\u9898\u7684\u673a\u5668\u4e0a\u62ff\u5230 ip \u5217\u8868\u662f\u4f1a\u8fdb\u884c\u8f6e\u5faa\u3002\u6240\u4ee5\u5df2\u7ecf\u786e\u5b9a\u662f getaddrinfo \u51fd\u6570\u5bfc\u81f4\u3002\\n\\n--------\\n\\n### 4) \u5c1d\u8bd5\u89e3\u51b3\\n\\n#### 4.1) glibc \u7248\u672c\u95ee\u9898\uff1f\\n\\n\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u4e3a\u4ec0\u4e48\u540c\u4e00\u51fd\u6570\u5728\u4e0d\u540c\u673a\u5668\u4e0a\u9762\u8868\u73b0\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u5148\u68c0\u67e5\u5185\u6838\u7248\u672c\u548c glibc \u7248\u672c\u662f\u5426\u4e00\u81f4\u3002\u53d1\u73b0\u6709\u95ee\u9898\u7684\u8fd9\u6279\u673a\u5668 glibc \u7248\u672c\u6bd4\u8f83\u4f4e\uff0c\u6240\u4ee5\u6709\u7406\u7531\u6000\u7591\u662f\u5426\u4e3a\u8001\u7248\u672c\u7684 bug (\u540e\u9762\u4e07\u4e07\u6ca1\u60f3\u5230\u662f\u5426 feature..)\u3002 \u6240\u4ee5\u5c31\u6253\u7b97\u5148\u5347\u7ea7\u4e00\u53f0\u6709\u95ee\u9898\u7684\u673a\u5668\u6765\u770b\u770b\uff0c\u7136\u540e\u518d\u6765\u4ed4\u7ec6\u5bf9\u6bd4\u5b9e\u73b0\u3002\\n\\n\u4e0d\u5e78\u7684\u662f\u5347\u7ea7\u540e\u53d1\u73b0\u95ee\u9898\u4ecd\u7136\u5b58\u5728\u3002\\n\\n![image](http://hulkdev-hulkimgs.stor.sinaapp.com/imgs/getaddrinfo/mengbi.jpg)\\n\\n#### 4.2) rfc3484_sort \u60f9\u7684\u7978\\n\\n\u5b9e\u5728\u6ca1\u529e\u6cd5\u53ea\u80fd\u53bb\u7ffb glibc \u7684\u4ee3\u7801, \u53d1\u73b0\u8fd9\u4e2a\u51fd\u6570\u786e\u5b9e\u662f\u4f1a\u5bf9\u8fd4\u56de\u7684 ip \u5217\u8868\u8fdb\u884c\u6392\u5e8f\uff0c\u5177\u4f53\u5b9e\u73b0\u89c1 `glibc-2.20/sysdeps/posix/getaddrinfo.c`\u3002\\n\\n```\\nqsort_r (order, nresults, sizeof (order[0]), rfc3484_sort, &src);\\n```\\n\\n\u6392\u5e8f\u7b97\u4f7f\u7528\u7684\u662f `rfc3484_sort`, \u5185\u90e8\u6bd4\u8f83\u65b9\u6cd5\u5e94\u8be5\u662f\u6839\u636e rfc3484 \u7684\u7279\u5b9a\u89c4\u5219\u505a\u6bd4\u8f83\uff0c\u76f4\u63a5\u770b\u4f1a\u6d6a\u8d39\u65f6\u95f4\uff0c\u76f4\u63a5\u641c\u7d22\u627e\u5230\u5bf9\u5e94 rfc \u8bf4\u660e( [http://www.ietf.org/rfc/rfc3484.txt](http://www.ietf.org/rfc/rfc3484.txt))\u3002\\n\\n\u8fd9\u4e2a\u51fd\u6570\u662f\u4e3a\u4e86\u89e3\u51b3 ipv6 \u591a\u64ad\u5730\u5740\u7ed1\u5b9a\u5230\u5355\u7f51\u5361\u7684\u95ee\u9898\uff0c\u51fd\u6570\u4f1a\u4ece rules 1-10 \u9010\u6761\u6bd4\u8f83\u3002rules 10 \u662f\u4fdd\u6301 DNS \u8fd4\u56de\u987a\u5e8f\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e0c\u671b\u7684\u3002 \u7bc7\u5e45\u95ee\u9898\u8fd9\u91cc\u4e0d\u5728\u7ec6\u8bf4\u89c4\u5219\uff0c\u8fd4\u56de\u7ed3\u679c\u56e0\u4e3a\u7b97\u6cd5\u56fa\u5b9a\uff0c\u6240\u4ee5\u987a\u5e8f\u4e5f\u4e0d\u4f1a\u6539\u53d8\u3002\\n\\n\\n### 5) \u771f\u6b63\u89e3\u51b3\\n\\n1. \u4e1a\u52a1\u8fde\u63a5\u8d44\u6e90\u4f7f\u7528 gethostbyname \u83b7\u53d6ip, \u800c\u4e0d\u662f\u4f7f\u7528 php \u6e90\u7801\u5b9e\u73b0\u7684\u89c4\u5219\u3002\\n2. \u5173\u95ed getaddrinfo \u6392\u5e8f\u7b97\u6cd5\\n\\n\u56e0\u4e3a\u7b2c\u4e00\u79cd\u65b9\u6848\u9700\u8981\u4e1a\u52a1\u65b9\u4fee\u6539\u4ee3\u7801(\u5c3d\u7ba1\u53ea\u6709\u4e00\u4e24\u884c)\uff0c \u6240\u4ee5\u6211\u4eec\u9009\u62e9\u7b2c\u4e8c\u79cd\u65b9\u6848\u3002\u56e0\u4e3a\u4ece\u4ee3\u7801\u5c42\u9762\u5f88\u96be\u770b\u51fa\u6765\u54ea\u4e2a\u53c2\u6570\u53ef\u4ee5\u5173\u95ed\u3002\u540e\u9762\u641c\u7d22\u627e\u5230\u76f8\u5e94\u7684\u8ba8\u8bba(\u95ee\u9898\u7f29\u5c0f\u5c31\u80fd\u5feb\u901f\u627e\u5230\u89e3\u51b3\u65b9\u6cd5)\uff0c\u5feb\u901f\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u5173\u95ed ipv6, \u5f53\u7136\u524d\u63d0\u662f\u7ebf\u4e0a\u670d\u52a1\u4e0d\u80fd\u6709\u4f7f\u7528\u5230\u8fd9\u4e2a\u7279\u6027\u3002\\n\\n[https://groups.google.com/forum/#!topic/consul-tool/AGgPjrrkw3g](https://groups.google.com/forum/#!topic/consul-tool/AGgPjrrkw3g)\\n\\n\u5230\u8fd9\u91cc\u5c31\u56de\u60f3\u5230\uff0c\u4e3a\u4ec0\u4e48\u90e8\u5206\u673a\u5668\u6709\u95ee\u9898\u800c\u4e00\u90e8\u5206\u6ca1\u6709\u95ee\u9898\uff0c\u7acb\u5373\u5bf9\u6bd4 ipv6 \u7684\u914d\u7f6e\u3002\u53d1\u73b0\u6709\u95ee\u9898\u7684\u673a\u5668\u6ca1\u6709\u5173\u95ed ipv6\uff0c\u800c\u6ca1\u6709\u95ee\u9898\u7684\u673a\u5668\u662f\u5173\u95ed\u7684\u3002\u901a\u8fc7\u8ddf\u8fd0\u7ef4\u4e5f\u4e86\u89e3\u5230\uff0c\u7ebf\u4e0a\u5e94\u8be5\u9ed8\u8ba4\u4f1a\u5173\u95ed ipv6, \u800c\u8fd9\u6279\u8001\u673a\u5668\u6f0f\u4e86\u5173\u95ed\u3002\\n\\n\\n### 6) \u9a8c\u8bc1\\n\\n\u76f4\u63a5\u5173\u95ed\u8fd9\u6279\u673a\u5668\u7684 ipv6 \u914d\u7f6e:\\n\\n```shell\\nroot$ echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6\\n```\\n\\n\u89c2\u5bdf\u8fd9\u6279\u673a\u5668\u7684 redis \u8d44\u6e90\u8fde\u63a5\uff0c\u5f00\u59cb\u6709\u8fde\u5230\u5176\u4ed6 redis \u8d44\u6e90\u3002\u56e0\u4e3a\u7ebf\u4e0a php-fpm \u4f7f\u7528\u957f\u8fde\u63a5\uff0c\u6240\u4ee5\u9700\u8981\u7b49\u5230\u8fdb\u7a0b\u91cd\u542f\u624d\u4f1a\u91cd\u65b0\u8fde\u63a5\uff0c\u6240\u4ee5\u9700\u8981\u7b49\u4e00\u6bb5\u65f6\u95f4\u624d\u4f1a\u5b8c\u5168\u5747\u5300\u3002\\n\\n\u8fc7\u4e86\u4e00\u4f1a\uff0c\u591a\u4e2a Redis \u8bbf\u95ee\u91cf\u548c\u8fde\u63a5\u6570\u7ec8\u4e8e\u6062\u590d\u5747\u5300\uff0c\u95ee\u9898\u521d\u6b65\u89e3\u51b3\u3002\\n\\n![image](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/getaddressinfo-redis-balance.jpeg)\\n\\n\\n### 7\uff09END \\n\\n\u73b0\u5728\u867d\u7136\u901a\u8fc7\u5173\u95ed ipv6 \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u540e\u7eed\u53ef\u80fd\u4e5f\u4f1a\u4f7f\u7528\u5230 ipv6 \u800c\u518d\u6b21\u8e29\u5751\u3002\u5efa\u8bae\u540e\u7eed php \u8fde\u63a5\u8d44\u6e90\u91c7\u7528 `gethostbyname` \u624b\u52a8\u83b7\u53d6ip\u3002\\n\\n\u53e6\u5916\u8fd8\u6709\u4e00\u4e2a\u7ec6\u8282\u8fd8\u6ca1\u5b8c\u5168\u6df1\u5165\u7684\u662f ipv6 \u9009\u9879\u5982\u4f55\u5f71\u54cd `rfc3483_sort` \u7b97\u6cd5\u7684\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u8ddf\u8fdb\uff0c\u5f7b\u5e95\u641e\u5b9a\u3002"},{"id":"posts-how-oom-killer-works","metadata":{"permalink":"/posts-how-oom-killer-works","source":"@site/blog/2016-03-26-how-oom-killer-works.md","title":"oom killer \u5b9e\u73b0","description":"\u4f5c\u4e3a\u4e00\u4e2a\u4e0d\u5408\u683c\u7684\u5f00\u53d1\u4eba\u5458\u591a\u591a\u5c11\u5c11\u90fd\u88ab OOM(Out of memory) x \u8fc7\uff0c\u53ea\u662f\u4e00\u822c\u5927\u5bb6\u5bf9\u4e8e\u4e3a\u4ec0\u4e48\u88ab\u9009\u4e2d\uff0c\u53ef\u80fd\u6ca1\u592a\u8003\u7a76\u3002","date":"2016-03-26T00:00:00.000Z","formattedDate":"March 26, 2016","tags":[{"label":"linux","permalink":"/tags/linux"},{"label":"mmeory","permalink":"/tags/mmeory"}],"readingTime":4.01,"truncated":true,"authors":[],"frontMatter":{"title":"oom killer \u5b9e\u73b0","slug":"posts-how-oom-killer-works","tags":["linux","mmeory"]},"prevItem":{"title":"getaddressinfo \u5f15\u53d1\u7684\u8840\u6848","permalink":"/posts-getaddressinfo-cause-unbalance"},"nextItem":{"title":"\u8c08\u8c08 overcommit memory","permalink":"/posts-overcommit-memory"}},"content":"\u4f5c\u4e3a\u4e00\u4e2a\u4e0d\u5408\u683c\u7684\u5f00\u53d1\u4eba\u5458\u591a\u591a\u5c11\u5c11\u90fd\u88ab OOM(Out of memory) x \u8fc7\uff0c\u53ea\u662f\u4e00\u822c\u5927\u5bb6\u5bf9\u4e8e\u4e3a\u4ec0\u4e48\u88ab\u9009\u4e2d\uff0c\u53ef\u80fd\u6ca1\u592a\u8003\u7a76\u3002\\n\\n\u7b80\u5355\u6765\u8bf4\u4e4b\u6240\u4ee5\u4f1a\u51fa\u73b0 OOM, \u5c31\u662f\u5df2\u5206\u914d\u7684\u865a\u62df\u5185\u5b58\u5927\u4e8e\u7269\u7406\u5185\u5b58\u548c Swap \u5206\u533a\u5927\u5c0f\uff0c\u5bfc\u81f4\u9700\u8981\u5185\u5b58\u65e0\u6cd5\u5206\u914d\u3002\u5982\u679c overcommit = 2, \u5728\u7533\u8bf7\u865a\u62df\u5185\u5b58\u65f6\uff0c\u5982\u679c\u8d85\u8fc7\u9650\u5236\u7684\u5185\u5b58\u6bd4\u4f8b + Swap \u7a7a\u95f4\u4f1a\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\uff0c\u53ea\u8981\u5206\u914d\u865a\u62df\u5185\u5b58\u4e0d\u8d85\u8fc7\u7269\u7406\u5185\u5b58\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u6709 OOM\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n### 2) \u8fdb\u7a0b\u9009\u62e9\\n\\n\u65e2\u7136\u65e0\u6cd5\u5206\u914d\u5185\u5b58\uff0c\u5c31\u6709\u4e24\u79cd\u4e0b\u9762\u7684\u4e24\u79cd\u9009\u62e9:\\n\\n1. \u5411\u7533\u8bf7\u5185\u5b58\u62a5\u544a\u7533\u8bf7\u5185\u5b58\u5931\u8d25\\n2. \u9009\u62e9\u4e00\u4e2a\u6740\u6389\u5176\u4ed6\u7684\u8fdb\u7a0b\u6765\u91ca\u653e\u5185\u5b58\\n\\n\\n\u5185\u6838 2.4 \u7248\u672c\u4e4b\u524d\u662f\u7b2c\u4e00\u79cd\u505a\u6cd5(\u8d70\u5728\u8def\u4e0a\u542c\u522b\u4eba\u8bf4\u7684), \u540e\u9762\u7684\u5185\u6838\u7248\u672c\u624d\u91c7\u7528\u7b2c\u4e8c\u79cd\u3002\u6211\u4eec\u8fd9\u91cc\u8981\u6765\u770b\u7684\u662f\u7b2c\u4e8c\u79cd\uff0c\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u7b2c\u4e00\u79cd\u505a\u6cd5\u6ca1\u4ec0\u4e48\u597d\u770b\u7684...\\n\\n\u4e0b\u9762\u7684\u4ee3\u7801\u57fa\u4e8e\u5185\u6838 2.6.32, \u4ee3\u7801\u5728 `arch/\u4e0d\u540c\u578b\u53f7/mm/fault.c` \u548c `mm/oom_kill.c`: \\n\\n\u6211\u4eec\u5206\u914d\u7269\u7406\u5185\u5b58\u7684\u65f6\u5019\u662f\u901a\u8fc7\u7f3a\u9875\u4e2d\u65ad\u6765\u5b9e\u73b0\u7684\uff0c\u7136\u540e\u4f1a\u8c03\u7528 `do_page_fault` \uff0c\u5982\u679c\u5185\u5b58\u4e0d\u8db3\u5c31\u4f1a\u901a\u8fc7 `mm_fault_error` \u6765\u5904\u7406\uff0c\u8c03\u7528\u94fe\u5982\u4e0b:\\n\\n```c\\nout_of_memory->pagefault_out_of_memory->__out_of_memory\\n->select_bad_process->badness\\n```\\n\\n`select_bad_process` \u8c03\u7528 `badness` \u6765\u8ba1\u7b97\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5f97\u5206\uff08\u8303\u56f4 0-1000\uff09\uff0c\u7136\u540e\u5e72\u6389 score \u6700\u9ad8\u7684\u8fdb\u7a0b\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u7684 score \u6211\u4eec\u901a\u8fc7 `/proc/pid/oom_score` \u6765\u67e5\u770b\u3002\u6211\u4eec\u4e0b\u9762\u6765\u770b\u8fd9\u4e2a score \u662f\u5982\u4f55\u8ba1\u7b97\uff0c\u4e3b\u8981\u662f\u4e0b\u9762\u51e0\u4e2a\u7eac\u5ea6:\\n\\n* \u5b50\u8fdb\u7a0b\u5185\u5b58\u6d88\u8017\uff0c\u8d8a\u591a\u8d8a\u5bb9\u6613\u88ab\u9009\u4e2d\\n* CPU \u5bc6\u96c6\u578b\u4ee5\u53ca\u8001\u8fdb\u7a0b\uff0c\u6bd4\u521a\u542f\u52a8\u7684\u8fdb\u7a0b\u66f4\u4e0d\u5bb9\u6613\u88ab\u9009\u4e2d\\n* root \u542f\u52a8\u7684\u8fdb\u7a0b\u66f4\u4e0d\u5bb9\u6613\u88ab\u9009\u4e2d\\n* \u7528\u6237\u901a\u8fc7\u63a7\u5236 oom_adj \u6765\u63a7\u5236\u8fdb\u7a0b\u9009\u4e2d\u4f18\u5148\u7ea7(\u8303\u56f4\u662f-17\u523015)\\n\\n```c\\nunsigned long badness(struct task_struct *p, unsigned long uptime)\\n{\\n\\t...\\n\\t// \u8fd9\u4e2a oom_adj \u503c\u662f\u4ece /proc/pid/oom_adj \u83b7\u53d6\\n\\t// \u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 oom_adj \u6765\u63a7\u5236 score\\n\\tint oom_adj = p->signal->oom_adj;\\n\\t...\\n\\t\\n\\t// \u7cfb\u7edf\u603b\u5185\u5b58\u5927\u5c0f\u4f5c\u4e3a\u57fa\u7840\u5206\u6570\\n\\tpoints = mm->total_vm;\\n\\t\\n\\tif (p->flags & PF_OOM_ORIGIN)\\n\\t\\treturn ULONG_MAX;\\n\\t\\n\\t// \u5982\u679c fork \u7684\u8fdb\u7a0b\u5b50\u8fdb\u7a0b\u4e5f\u592a\u591a\u5b50\u8fdb\u7a0b\u88ab\u9009\u5230\u7684\u6982\u7387\u4e5f\u6bd4\u8f83\u5927\u3002\\n\\tlist_for_each_entry(child, &p->children, sibling) {\\n        task_lock(child);\\n        if (child->mm != mm && child->mm)\\n            points += child->mm->total_vm/2 + 1;\\n        task_unlock(child);\\n    }\\n    \\n    thread_group_cputime(p, &task_time);\\n    // \u8fdb\u7a0b\u7528\u6237\u7a7a\u95f4\u6d88\u8017\u7684 cpu \u5206\u7247\u6570\\n    utime = cputime_to_jiffies(task_time.utime);\\n    // \u8fdb\u7a0b\u7cfb\u7edf\u6d88\u8017\u7684 cpu \u5206\u7247\u6570\\n    stime = cputime_to_jiffies(task_time.stime);\\n    cpu_time = (utime + stime) >> (SHIFT_HZ + 3);\\n    \\n    // \u8ba1\u7b97\u542f\u52a8\u65f6\u95f4\\n    if (uptime >= p->start_time.tv_sec)\\n        run_time = (uptime - p->start_time.tv_sec) >> 10;\\n    else\\n        run_time = 0;\\n    \\n    // \u6d88\u8017 CPU \u8d8a\u591a\u7684\u8fdb\u7a0b\uff0c\u964d\u4f4e score\\n    if (cpu_time)\\n        points /= int_sqrt(cpu_time);\\n    // \u6839\u636e\u542f\u52a8\u65f6\u95f4\u964d\u4f4e score, \u6240\u4ee5\u6700\u65b0\u542f\u52a8\u7684\u8fdb\u7a0b\u6700\u53ef\u80fd\u88ab\u6740\\n    if (run_time)\\n        points /= int_sqrt(int_sqrt(run_time));\\n    \\n    // \u964d\u4f4e root \u7528\u6237\u542f\u52a8\u7684\u8fdb\u7a0b\u7684 score\\n    if (has_capability_noaudit(p, CAP_SYS_ADMIN) ||\\n        has_capability_noaudit(p, CAP_SYS_RESOURCE))\\n        points /= 4;\\n    \\n    if (!has_intersects_mems_allowed(p))\\n        points /= 8;\\n     \\n     if (oom_adj) {\\n        if (oom_adj > 0) {\\n            if (!points)\\n                points = 1;\\n            points <<= oom_adj;\\n        } else\\n            points >>= -(oom_adj);\\n    }\\n    return points;\\n}\\n```\\n\\n### 3) \u603b\u7ed3\\n\\n\u4ece\u6574\u4f53\u6765\u770b\uff0c\u5360\u7528\u5185\u5b58\u8d8a\u5927\uff0c\u975eCPU\u6d88\u8017\u5211\uff0c\u975e Root \u542f\u52a8\u4ee5\u53ca\u65b0\u542f\u52a8\u7684\u8fdb\u7a0b\u66f4\u52a0\u5bb9\u6613\u88ab\u9009\u4e2d\u3002\u800c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574 `/proc/$pid/oom_adj` \u6765\u8c03\u6574\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\u3002"},{"id":"posts-overcommit-memory","metadata":{"permalink":"/posts-overcommit-memory","source":"@site/blog/2016-02-15-overcommit-memory.md","title":"\u8c08\u8c08 overcommit memory","description":"\u6625\u8282\u524d\u51e0\u5929\u8fd0\u7ef4\u5927\u4fa0\u8bf4\u8981\u6269\u5bb9 Redis \u4ece\u5e93\u4f46\u540c\u6b65\u4e00\u76f4\u5931\u8d25\uff0c\u770b\u65e5\u5fd7\u53d1\u73b0\u5728\u505a bgsave \u7684\u65f6\u5019\u4e00\u76f4\u5931\u8d25\u3002 \u65e5\u5fd7\u5982\u4e0b:","date":"2016-02-15T00:00:00.000Z","formattedDate":"February 15, 2016","tags":[{"label":"linux","permalink":"/tags/linux"},{"label":"memory","permalink":"/tags/memory"}],"readingTime":5.84,"truncated":true,"authors":[],"frontMatter":{"title":"\u8c08\u8c08 overcommit memory","slug":"posts-overcommit-memory","tags":["linux","memory"]},"prevItem":{"title":"oom killer \u5b9e\u73b0","permalink":"/posts-how-oom-killer-works"},"nextItem":{"title":"php \u5982\u4f55\u68c0\u67e5 TCP \u8fde\u63a5\u662f\u5426\u5173\u95ed","permalink":"/posts-how-php-check-tcp-liveness"}},"content":"\u6625\u8282\u524d\u51e0\u5929\u8fd0\u7ef4\u5927\u4fa0\u8bf4\u8981\u6269\u5bb9 Redis \u4ece\u5e93\u4f46\u540c\u6b65\u4e00\u76f4\u5931\u8d25\uff0c\u770b\u65e5\u5fd7\u53d1\u73b0\u5728\u505a bgsave \u7684\u65f6\u5019\u4e00\u76f4\u5931\u8d25\u3002 \u65e5\u5fd7\u5982\u4e0b:\\n\\n```shell\\n[41738] 04 Feb 11:16:39.859 * Full resync requested by slave.\\n[41738] 04 Feb 11:16:39.859 * Starting BGSAVE for SYNC\\n[41738] 04 Feb 11:16:39.860 # Can\'t save in background: fork: Cannot allocate memory\\n[41738] 04 Feb 11:16:39.860 * Replication failed, can\'t BGSAVE\\n```\\n\\n\u4ece\u65e5\u5fd7\u53ef\u4ee5\u770b\u5230 fork \u7684\u65f6\u5019\u5185\u5b58\u5206\u914d\u5931\u8d25\u5bfc\u81f4 bgsave \u65e0\u6cd5\u6210\u529f\uff0c\u90a3\u5c31\u662f\u53ef\u7528\u5185\u5b58\u4e0d\u8db3?\\n\\n\x3c!--truncate--\x3e\\n\\n\u4f7f\u7528 `info memory` \u770b\u4e86\u4e00\u4e0b\u5b9e\u4f8b\u4f7f\u7528\u5185\u5b58\uff0c \u5dee\u4e0d\u591a\u7528\u4e86 `8G`:\\n\\n```shell\\nused_memory:8045067888\\nused_memory_human:7.49G\\nused_memory_rss:8216522752\\nused_memory_peak:50615269608\\nused_memory_peak_human:47.14G\\n```\\n\\n\u7136\u540e\u7528 `free -m` \u770b\u5230\u7cfb\u7edf\u7a7a\u95f2\u9875\u52a0\u4e0a pagecache \u4e5f\u6709 21G\uff0c\u8fd9\u4e2a\u7a7a\u95f2\u5185\u5b58\u8fdc\u5927\u4e8e\u5b9e\u4f8b\u4f7f\u7528\u7684 8G \u5440\uff0c\u4e3a\u4ec0\u4e48\u4f1a fork \u5931\u8d25\u5462\uff1f\\n\\n\u4f7f\u7528 `top` \u53d1\u73b0\u8fd9\u4e2a Redis \u5b9e\u4f8b\u865a\u62df\u5185\u5b58\u4f7f\u7528\u4e86 48.7G, \u5e38\u9a7b\u5185\u5b58\u4f7f\u7528\u662f 7.6G\u3002\\n\\n![img](https://cdn.jsdelivr.net/gh/git-hulk/git-hulk.github.io/images/overcommit-memory-top.jpeg)\\n\\n### 2) \u90a3\u4e48\u95ee\u9898\u6765\u4e86\\n\\n> Q1. Redis \u7edf\u8ba1\u7684\u865a\u62df\u5185\u5b58\u4e3a\u4ec0\u4e48\u5360\u7528\u8fd9\u4e48\u591a?\\n\\n\u4ece\u73b0\u8c61\u6765\u770b\u662f\u5cf0\u503c\u5206\u914d\u4e86\u8fd9\u4e48\u591a(\u89c1 peak_memory)\u3002 \u4f46\u5728\u5185\u5b58\u91ca\u653e\u7684\u65f6\u5019\uff0c\u7269\u7406\u5185\u5b58\u91ca\u653e\u800c\u865a\u62df\u5185\u5b58\u65e0\u6cd5\u6536\u7f29\u3002\u8fd9\u4e2a\u8ddf\u5185\u5b58\u5206\u914d\u6709\u5173, \u5f53\u524d Redis \u9ed8\u8ba4\u662f\u7528\u7684\u662f jemalloc\u3002\\n\\n\u5728 github \u4e0a\u9762\u63d0\u4e86\u4e00\u4e2a issue \u8bf4\u8fd9\u4e2a\u95ee\u9898\uff0c Redis \u4f5c\u8005\u4e5f\u5927\u6982\u662f\u8fd9\u4e2a\u610f\u601d\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u865a\u62df\u5185\u5b58\u65e0\u6cd5\u6536\u7f29\u7684\u539f\u56e0\uff0c\u6709\u5f85\u8fdb\u4e00\u6b65\u7814\u7a76\u3002\\n\\n> Q2. fork \u662f\u6839\u636e\u865a\u62df\u5185\u5b58\u6765\u68c0\u67e5\u5185\u5b58\u662f\u5426\u591f\u7528? \\n\\n\u663e\u7136\u662f\u7684\u3002\u56e0\u4e3a\u5982\u679c\u662f\u6839\u636e\u7269\u7406\u5185\u5b58\uff0cfork \u662f\u53ef\u4ee5\u6210\u529f\u7684\u3002\u90a3\u5176\u5b9e\u5269\u4f59\u7684\u7cfb\u7edf\u5185\u5b58\u662f\u8db3\u591f\u7684\uff0c\u800c\u6211\u9700\u8981\u7684\u5185\u5b58\u5e76\u6ca1\u6709\u8fd9\u4e48\u5927\uff0c\u6709\u4ec0\u4e48\u529e\u6cd5\u53ef\u4ee5\u8ba9\u8fdb\u7a0b\u7ee7\u7eed fork \u4e48\uff1f \u7b54\u6848\u5c31\u662f\u628a `vm.overcommit_memory` \u8bbe\u7f6e\u4e3a 1\u3002\\n\\n### 3\uff09 \u89e3\u51b3\u65b9\u6848\\n\\n`vm.overcommit_memory` \u7528\u6765\u63a7\u5236\u5728 fork \u8fdb\u7a0b\u65f6\u7528\u4ec0\u4e48\u59ff\u52bf\u6765\u68c0\u67e5\u5185\u5b58\u662f\u5426\u591f\u7528\u3002 Redis \u5728\u5b9e\u4f8b\u542f\u52a8\u7684\u65f6\u5019\u7ed9\u51fa\u4e86\u63d0\u793a\u4fe1\u606f\u3002\\n\\n```shell\\nWARNING overcommit_memory is set to 0! Background save may fail under low memory condition. \\nTo fix this issue add \'vm.overcommit_memory = 1\' to /etc/sysctl.conf \\nand then reboot or run the command \'sysctl vm.overcommit_memory=1\' for this to take effect.\\n```\\n\\nvm.overcommit_memory \u53d6\u503c\u662f 0, 1, 2, \u9ed8\u8ba4\u662f 0\u3002 \u5177\u4f53\u6570\u503c\u7684\u610f\u4e49\u53ef\u53c2\u8003\u4e0b\u9762\u7684\u6587\u6863\uff0c\u540e\u9762\u4f1a\u7ed3\u5408\u4ee3\u7801\u6765\u8bf4\u660e\u3002\\n\\n[https://www.kernel.org/doc/Documentation/vm/overcommit-accounting](https://www.kernel.org/doc/Documentation/vm/overcommit-accounting)\\n\\n### 4) Overcommit memory\\n\\n\u6211\u4eec\u5177\u4f53\u4ece\u5185\u6838\u4ee3\u7801(Linux-2.6.32)\u6765\u770b\u8fd9\u4e2a\u53c2\u6570\u5982\u4f55\u5728 fork \u8fdb\u7a0b\u7684\u65f6\u5019\u8fdb\u884c\u5185\u5b58\u6821\u9a8c\u3002\\n\\n```c\\n#define OVERCOMMIT_GUESS        0\\n#define OVERCOMMIT_ALWAYS       1\\n#define OVERCOMMIT_NEVER        2\\n```\\n\\n\\n\u6211\u4eec\u5728\u7a0b\u5e8f\u6267\u884c fork() \u7684\u65f6\u5019\uff0c\u4f1a\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u4e2d\u65ad\u5207\u6362\u5230\u5185\u6838\u6001\uff0c\u518d\u8c03\u7528 sys_fork\u3002\\n\\n\u4e0b\u9762\u662f fork \u8fdb\u7a0b\u65f6\uff0c\u5185\u6838\u7684\u7cfb\u7edf\u8c03\u7528\u94fe:\\n\\n```c\\nsys_fork -> copy_mm -> dup_mm -> dup_mmap -> \\nsecurity_vm_enough_memory -> cap_vm_enough_memory -> __vm_enough_memory\\n```\\n\\n\u6700\u540e\u8c03\u7528 __vm_enough_memory \u8fdb\u884c\u5185\u5b58\u68c0\u67e5\uff0c\u6211\u4eec\u91cd\u70b9\u6765\u770b\u8fd9\u4e2a\u51fd\u6570\u3002\\n\\n```c\\nint __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin) {\\n\\t...\\n\\t/*    \\n     * Sometimes we want to use more memory than we have\\n     */\\n    // OVERCOMMIT_ALWAYS = 1, \u4ec0\u4e48\u90fd\u4e0d\u68c0\u67e5\u76f4\u63a5\u8fd4\u56de\\n    if (sysctl_overcommit_memory == OVERCOMMIT_ALWAYS)\\n        return 0;\\n    if (sysctl_overcommit_memory == OVERCOMMIT_GUESS) {\\n        unsigned long n;\\n        \\n        // \u5269\u4f59\u5bb9\u91cf = page cache\u4f7f\u7528\u7684\u9875 + \u7a7a\u95f2swap + \u53ef\u56de\u6536 slab + \u7cfb\u7edf\u7a7a\u95f2\u9875\\n        free = global_page_state(NR_FILE_PAGES);\\n        free += nr_swap_pages;\\n        free += global_page_state(NR_SLAB_RECLAIMABLE);\\n        \\n        // root \u5982\u679c\u662f\u975e root \u7528\u6237\u9700\u8981\u4fdd\u7559 3%\\n        if (!cap_sys_admin)\\n            free -= free / 32;\\n            \\n        // \u5982\u679c\u7a7a\u95f2\u7684\u9875\u8db3\u591f\u76f4\u63a5\u8fd4\u56de\\n        if (free > pages)\\n            return 0;\\n            \\n        // \u8ba1\u7b97\u7cfb\u7edf\u7a7a\u95f2\u9875\u6bd4\u8f83\u8017\u65f6\uff0c\u6240\u6709\u4e0a\u9762 3 \u79cd\u7a7a\u95f2\u5df2\u7ecf\u8db3\u591f\u5c31\u4e0d\u8ba1\u7b97\u3002\\n        n = nr_free_pages();\\n       \\n        // \u53bb\u6389\u4e00\u4e9b\u7cfb\u7edf\u4fdd\u7559\u9875\\n        if (n <= totalreserve_pages)\\n            goto error;\\n        else\\n            n -= totalreserve_pages;\\n        \\n        // root \u5982\u679c\u662f\u975e root \u7528\u6237\u9700\u8981\u4fdd\u7559 3%\\n        if (!cap_sys_admin)\\n            n -= n / 32;\\n        free += n;\\n       \\n        if (free > pages)\\n            return 0;\\n\\n        goto error;\\n    }\\n    \\n    // \u4e0a\u9762\u4e24\u4e2a\u5206\u652f\u5206\u522b\u662f\u503c\u4e3a 1 \u548c 0 \u7684\u60c5\u51b5\uff0c\u4e0b\u9762\u5219\u662f\u503c\u4e3a 2 \u7684\u5224\u65ad\u6761\u4ef6\\n    // \u56e0\u4e3a\u6211\u4eec\u8ba1\u7b97\u7684\u662f normal page, \u6240\u4ee5\u8ba1\u7b97\u5141\u8bb8\u4f7f\u7528\u7684\u5185\u5b58\u9700\u8981\u6263\u6389 huge page\\n    // sysctl_overcommit_ratio \u7cfb\u7edf\u63a7\u5236\u7684\u6bd4\u4f8b\u53c2\u6570\\n    allowed = (totalram_pages - hugetlb_total_pages())\\n            * sysctl_overcommit_ratio / 100;\\n\\n    //\u975eroot \u7528\u6237\u4fdd\u7559 3%\\n    if (!cap_sys_admin)\\n        allowed -= allowed / 32;\\n    // \u52a0\u4e0a swap \u7a7a\u95f2\u9875\\n    allowed += total_swap_pages;\\n    \\n    // \u9632\u6b62\u5355\u8fdb\u7a0b\u5360\u7528\u8fc7\u591a\u5185\u5b58\uff0c\u9700\u8981\u4fdd\u7559 3% \u7ed9\u5176\u4ed6\u8fdb\u7a0b\\n    if (mm)\\n        allowed -= mm->total_vm / 32;\\n\\n    if (percpu_counter_read_positive(&vm_committed_as) < allowed)\\n        return 0;\\nerror:\\n    vm_unacct_memory(pages);\\n\\n    return -ENOMEM;\\n}\\n```\\n\\n\u4ece\u4ee3\u7801\u5c42\u9762\u6765\u770b\uff1a\\n\\n1. overcommit_memory = 1, \u4e0d\u68c0\u67e5\uff0c\u6709\u9505\u81ea\u5df1\u80cc\u3002\\n2. overcommit_memory = 0\uff0c\u68c0\u67e5\u5f53\u524d\u8fdb\u7a0b\u9700\u8981\u7684\u865a\u62df\u5185\u5b58 < (\u5f53\u524d\u5269\u4f59\u7684\u7269\u7406 + swap\u5206\u533a)\\n3. overcommit_memory = 2, \u68c0\u67e5\u6574\u4e2a\u7cfb\u7edf\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58 < (\u7269\u7406\u5185\u5b58*\u5141\u8bb8\u6bd4\u4f8b + swap\u5206\u533a)\\n\\n\\n### 5\uff09 END\\n\\n\u8c03\u6574\u7cfb\u7edf\u53c2\u6570\u8fd8\u662f\u9700\u8981\u8c28\u614e\u518d\u8c28\u614e\uff0c\u5728\u6ca1\u6709\u8be6\u7ec6\u67e5\u770b\u5b98\u65b9\u6587\u6863\u4ee5\u53ca\u5168\u9762\u4e86\u89e3\u53c2\u6570\u5bf9\u7cfb\u7edf\u7684\u5f71\u54cd\u7684\u65f6\u5019\uff0c\u5207\u52ff\u624b\u8d31\u968f\u610f\u8c03\u6574\u3002"},{"id":"posts-how-php-check-tcp-liveness","metadata":{"permalink":"/posts-how-php-check-tcp-liveness","source":"@site/blog/2015-08-08-how-php-check-tcp-liveness.md","title":"php \u5982\u4f55\u68c0\u67e5 TCP \u8fde\u63a5\u662f\u5426\u5173\u95ed","description":"\u957f\u8fde\u63a5\u53ef\u4ee5\u51cf\u5c11\u5efa\u7acb\u8fde\u63a5\u7684\u8fc7\u7a0b, \u4f7f\u7528\u957f\u8fde\u63a5\u53ef\u4ee5\u63d0\u9ad8\u670d\u52a1\u7684\u6027\u80fd\u3002php \u5f88\u591a\u6269\u5c55\u90fd\u652f\u6301\u957f\u8fde\u63a5\uff0c\u5982 redis, memcache, mysql \u7684\u4e3b\u6d41\u6269\u5c55\u90fd\u652f\u6301\u3002","date":"2015-08-08T00:00:00.000Z","formattedDate":"August 8, 2015","tags":[{"label":"PHP","permalink":"/tags/php"},{"label":"TCP","permalink":"/tags/tcp"}],"readingTime":3.495,"truncated":true,"authors":[{"name":"hulk"}],"frontMatter":{"author":"hulk","slug":"posts-how-php-check-tcp-liveness","title":"php \u5982\u4f55\u68c0\u67e5 TCP \u8fde\u63a5\u662f\u5426\u5173\u95ed","tags":["PHP","TCP"]},"prevItem":{"title":"\u8c08\u8c08 overcommit memory","permalink":"/posts-overcommit-memory"}},"content":"\u957f\u8fde\u63a5\u53ef\u4ee5\u51cf\u5c11\u5efa\u7acb\u8fde\u63a5\u7684\u8fc7\u7a0b, \u4f7f\u7528\u957f\u8fde\u63a5\u53ef\u4ee5\u63d0\u9ad8\u670d\u52a1\u7684\u6027\u80fd\u3002php \u5f88\u591a\u6269\u5c55\u90fd\u652f\u6301\u957f\u8fde\u63a5\uff0c\u5982 redis, memcache, mysql \u7684\u4e3b\u6d41\u6269\u5c55\u90fd\u652f\u6301\u3002\\n\\n\u6211\u4eec\u77e5\u9053\u957f\u8fde\u63a5\u5c31\u662f\u4e00\u6b21\u5efa\u7acb\u8fde\u63a5\uff0c\u4f7f\u7528\u4e4b\u540e\u4e0d\u4f1a\u9a6c\u4e0a\u91ca\u653e\uff0c\u800c\u662f\u628a\u8fd9\u4e2a\u8fde\u63a5\u653e\u5230\u8fde\u63a5\u6c60\u3002\u90a3\u4e48\u5f15\u53d1\u7684\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u6211\u4eec\u4e0b\u6b21\u4f7f\u7528\u65f6\u5982\u4f55\u77e5\u9053\u8fd9\u4e2a\u8fde\u63a5\u662f\u5426\u5df2\u7ecf\u88ab\u5173\u95ed\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\u6211\u4eec\u6765\u770b\u770b phpredis \u662f\u5982\u4f55\u6765\u5224\u65ad\uff0c\u8fde\u63a5\u662f\u5426\u53ef\u7528\u3002 phpredis \u68c0\u67e5\u7684\u51fd\u6570\u5728 library.c \u7684 `redis_check_eof` \u7684\u65b9\u6cd5\uff0c\u800c\u8fd9\u4e2a\u65b9\u6cd5\u8c03\u7528\u7684\u662f php \u5185\u90e8\u7684\u65b9\u6cd5 `php_stream_eof`, \u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\u3002\\n\\n```c\\nPHPAPI int _php_stream_eof(php_stream *stream TSRMLS_DC)\\n{\\n\\t// \u5982\u679c\u6709\u6570\u636e\u672a\u8bfb\u53d6\uff0c\u8bf4\u660e socket \u8fd8\u662f\u53ef\u7528\\n    if (stream->writepos - stream->readpos > 0) {\\n        return 0;\\n    }\\n\\n\\t// \u54a6? \u8fd9\u91cc\u901a\u8fc7 php_stream_set_option \u6765\u68c0\u67e5\\n    if (!stream->eof && PHP_STREAM_OPTION_RETURN_ERR ==\\n            php_stream_set_option(stream, PHP_STREAM_OPTION_CHECK_LIVENESS,\\n            0, NULL)) {\\n        stream->eof = 1;\\n    }\\n\\n    return stream->eof;\\n}\\n```\\n\\n\u5224\u65adsocket \u662f\u5426\u53ef\u7528, \u6709\u4e24\u4e2a\u6761\u4ef6:\\n\\n1. writepos > readpos, \u8bf4\u660e\u8fd8\u6709\u6570\u636e\u672a\u8bfb, \u8fde\u63a5\u6b63\u5728\u4f7f\u7528\u4e2d\\n2. php_stream_set_option \u901a\u8fc7 PHP_STREAM_OPTION_CHECK_LIVENESS \u9009\u9879\u6765\u5224\u65ad\\n\\n\u89e3\u6790\u6765\u770b\u770b php_stream_set_option \u662f\u5982\u4f55\u5b9e\u73b0\u7684:\\n\\n```c\\nPHPAPI int _php_stream_set_option(php_stream *stream, int option, int value, void *ptrparam TSRMLS_DC)\\n{\\n    int ret = PHP_STREAM_OPTION_RETURN_NOTIMPL;\\n\\n    if (stream->ops->set_option) {\\n        ret = stream->ops->set_option(stream, option, value, ptrparam TSRMLS_CC);\\n    }\\n    ...\\n}\\n```\\n\u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u7684\u662f stream \u7684 set_option \u65b9\u6cd5\uff0c\u6211\u4eec\u77e5\u9053 php \u7684stream \u662f\u4e00\u7c7b\u6587\u4ef6\u64cd\u4f5c\u7684\u62bd\u8c61\u3002\u5728 php \u91cc\u9762\u7684 tcp, udp\uff0csocket, \u666e\u901a\u6587\u4ef6, \u6587\u4ef6\u6d41\u7b49\u90fd\u662f stream, \u53ea\u662f\u4ed6\u4eec\u5b9e\u73b0\u7684\u65b9\u6cd5\u5404\u6709\u5dee\u5f02\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u5173\u6ce8 tcp \u7684\u5b9e\u73b0\uff1a\\n\\n```c\\nphp_stream_ops php_stream_socket_ops = {\\n    php_sockop_write, php_sockop_read,\\n    php_sockop_close, php_sockop_flush,\\n    \\"tcp_socket\\",\\n    NULL, /* seek */\\n    php_sockop_cast,\\n    php_sockop_stat,\\n    php_tcp_sockop_set_option,\\n};\\n```\\n\u5bf9\u4e8e socket \u7684stream, \u5b83\u7684 set_option \u5c31\u662f php_tcp_sockop_set_option, \u5b9e\u73b0\u5982\u4e0b:\\n\\n```c\\nif (php_pollfd_for(sock->socket, PHP_POLLREADABLE|POLLPRI, &tv) > 0) {\\n\\tif (0 >= recv(sock->socket, &buf, sizeof(buf), MSG_PEEK) && php_socket_errno() != EWOULDBLOCK) {\\n    \\t\\talive = 0;\\n\\t}\\n}\\n```\\n\u8fd9\u91cc\u6211\u4eec\u770b\u5230, \u68c0\u67e5\u4e00\u4e2a socket \u662f\u5426\u5b58\u6d3b, \u662f\u901a\u8fc7 poll \u6765\u67e5\u8be2 socket \u7684\u53ef\u8bfb\u4e9b\u72b6\u6001\u3002\u7136\u540e\u4f7f\u7528 recv \u6765\u5224\u65ad socket \u662f\u5426\u5173\u95ed\uff0c\u6216\u8005\u51fa\u9519\u3002\\n\\n```shell\\n1. recv = 0 \u65f6, \u8bf4\u660e\u8fde\u63a5\u5df2\u7ecf\u5173\u95ed\\n2. recv < 0 \u4e14  errno != EWOULDBLOCK \u65f6\uff0c\u8bf4\u660e socket \u51fa\u9519\u4e86\u3002\\n```\\n\\n\u90e8\u95e8\u7ec6\u5fc3\u7684\u5c0f\u4f19\u4f34\uff0c\u53d1\u73b0\u4e86\u8fd9\u4e2a\u5224\u65ad\u6761\u4ef6\u6709\u4e00\u4e2a\u5c0f bug\u3002 \u5982\u679c\u4e0a\u4e00\u6b21\u67e5\u8be2\u7ed3\u679c\u7684 errno = EWOULDBLOCK\uff0c\u56e0\u4e3a\u53ea\u6709\u5f02\u5e38\u624d\u4f1a\u8986\u76d6 errno\uff0c\u6240\u4ee5recv = 0\u65f6\uff0c\u4e5f\u4f1a\u8ba4\u4e3a socket \u662f\u5b58\u6d3b\u7684\u3002\\n\\nphp_pollfd_for \u7684\u5b9e\u73b0\u4e5f\u6709\u4e00\u4e9b\u5c0f\u6280\u5de7\uff1a\\n\\n```c\\nstatic inline int php_pollfd_for(php_socket_t fd, int events, struct timeval *timeouttv)\\n{\\n    php_pollfd p;\\n    int n;\\n\\n    p.fd = fd;\\n    p.events = events;\\n    p.revents = 0;\\n\\t\\n    n = php_poll2(&p, 1, php_tvtoto(timeouttv));\\n\\n    if (n > 0) {\\n        return p.revents;\\n    }\\n\\n    return n;\\n}\\n```\\n\\n`php_poll2` \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f 1\uff0c poll \u53ea\u4f1a\u67e5\u8be2\u4e00\u4e2a fd, poll \u4e0d\u4f1a\u5f15\u5165\u67e5\u8be2\u591a\u4e2a\u65e0\u7528 fd \u7684\u95ee\u9898\u3002 \u7b2c\u4e09\u90a3\u4e2a\u53c2\u6570\u5728 check_liveness \u65f6\uff0c\u662f\u8bbe\u7f6e\u4e3a 0, poll \u4e5f\u4e0d\u4f1a\u963b\u585e\u3002"}]}')}}]);